// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.42 (7e4d6273).
//
// e:\mywork\testwork\arcengine92\test1\debug\excel9.tli
//
// Wrapper implementations for Win32 type library MS_DLL/EXCEL9.OLB
// compiler-generated file created 02/06/07 at 15:50:46 - DO NOT EDIT!

#pragma once

//
// interface Adjustments wrapper method implementations
//

inline IDispatchPtr Adjustments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline int Adjustments::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float Adjustments::GetItem ( int Index ) {
    float _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Adjustments::PutItem ( int Index, float Val ) {
    HRESULT _hr = put_Item(Index, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CalloutFormat wrapper method implementations
//

inline IDispatchPtr CalloutFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT CalloutFormat::AutomaticLength ( ) {
    HRESULT _hr = raw_AutomaticLength();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT CalloutFormat::CustomDrop ( float Drop ) {
    HRESULT _hr = raw_CustomDrop(Drop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT CalloutFormat::CustomLength ( float Length ) {
    HRESULT _hr = raw_CustomLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT CalloutFormat::PresetDrop ( enum Office::MsoCalloutDropType DropType ) {
    HRESULT _hr = raw_PresetDrop(DropType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoTriState CalloutFormat::GetAccent ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Accent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CalloutFormat::PutAccent ( enum Office::MsoTriState Accent ) {
    HRESULT _hr = put_Accent(Accent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoCalloutAngleType CalloutFormat::GetAngle ( ) {
    enum Office::MsoCalloutAngleType _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CalloutFormat::PutAngle ( enum Office::MsoCalloutAngleType Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState CalloutFormat::GetAutoAttach ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoAttach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CalloutFormat::PutAutoAttach ( enum Office::MsoTriState AutoAttach ) {
    HRESULT _hr = put_AutoAttach(AutoAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState CalloutFormat::GetAutoLength ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState CalloutFormat::GetBorder ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CalloutFormat::PutBorder ( enum Office::MsoTriState Border ) {
    HRESULT _hr = put_Border(Border);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float CalloutFormat::GetDrop ( ) {
    float _result = 0;
    HRESULT _hr = get_Drop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoCalloutDropType CalloutFormat::GetDropType ( ) {
    enum Office::MsoCalloutDropType _result;
    HRESULT _hr = get_DropType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float CalloutFormat::GetGap ( ) {
    float _result = 0;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CalloutFormat::PutGap ( float Gap ) {
    HRESULT _hr = put_Gap(Gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float CalloutFormat::GetLength ( ) {
    float _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoCalloutType CalloutFormat::GetType ( ) {
    enum Office::MsoCalloutType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CalloutFormat::PutType ( enum Office::MsoCalloutType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorFormat wrapper method implementations
//

inline IDispatchPtr ColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline Office::MsoRGBType ColorFormat::GetMSRBG ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_MSRBG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ColorFormat::PutMSRBG ( Office::MsoRGBType MSRBG ) {
    HRESULT _hr = put_MSRBG(MSRBG);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int ColorFormat::GetSchemeColor ( ) {
    int _result = 0;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ColorFormat::PutSchemeColor ( int SchemeColor ) {
    HRESULT _hr = put_SchemeColor(SchemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoColorType ColorFormat::GetType ( ) {
    enum Office::MsoColorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface LineFormat wrapper method implementations
//

inline IDispatchPtr LineFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ColorFormatPtr LineFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

inline void LineFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoArrowheadLength LineFormat::GetBeginArrowheadLength ( ) {
    enum Office::MsoArrowheadLength _result;
    HRESULT _hr = get_BeginArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void LineFormat::PutBeginArrowheadLength ( enum Office::MsoArrowheadLength BeginArrowheadLength ) {
    HRESULT _hr = put_BeginArrowheadLength(BeginArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoArrowheadStyle LineFormat::GetBeginArrowheadStyle ( ) {
    enum Office::MsoArrowheadStyle _result;
    HRESULT _hr = get_BeginArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void LineFormat::PutBeginArrowheadStyle ( enum Office::MsoArrowheadStyle BeginArrowheadStyle ) {
    HRESULT _hr = put_BeginArrowheadStyle(BeginArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoArrowheadWidth LineFormat::GetBeginArrowheadWidth ( ) {
    enum Office::MsoArrowheadWidth _result;
    HRESULT _hr = get_BeginArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void LineFormat::PutBeginArrowheadWidth ( enum Office::MsoArrowheadWidth BeginArrowheadWidth ) {
    HRESULT _hr = put_BeginArrowheadWidth(BeginArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoLineDashStyle LineFormat::GetDashStyle ( ) {
    enum Office::MsoLineDashStyle _result;
    HRESULT _hr = get_DashStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void LineFormat::PutDashStyle ( enum Office::MsoLineDashStyle DashStyle ) {
    HRESULT _hr = put_DashStyle(DashStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoArrowheadLength LineFormat::GetEndArrowheadLength ( ) {
    enum Office::MsoArrowheadLength _result;
    HRESULT _hr = get_EndArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void LineFormat::PutEndArrowheadLength ( enum Office::MsoArrowheadLength EndArrowheadLength ) {
    HRESULT _hr = put_EndArrowheadLength(EndArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoArrowheadStyle LineFormat::GetEndArrowheadStyle ( ) {
    enum Office::MsoArrowheadStyle _result;
    HRESULT _hr = get_EndArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void LineFormat::PutEndArrowheadStyle ( enum Office::MsoArrowheadStyle EndArrowheadStyle ) {
    HRESULT _hr = put_EndArrowheadStyle(EndArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoArrowheadWidth LineFormat::GetEndArrowheadWidth ( ) {
    enum Office::MsoArrowheadWidth _result;
    HRESULT _hr = get_EndArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void LineFormat::PutEndArrowheadWidth ( enum Office::MsoArrowheadWidth EndArrowheadWidth ) {
    HRESULT _hr = put_EndArrowheadWidth(EndArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ColorFormatPtr LineFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

inline void LineFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoPatternType LineFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void LineFormat::PutPattern ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = put_Pattern(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoLineStyle LineFormat::GetStyle ( ) {
    enum Office::MsoLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void LineFormat::PutStyle ( enum Office::MsoLineStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float LineFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void LineFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState LineFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void LineFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float LineFormat::GetWeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void LineFormat::PutWeight ( float Weight ) {
    HRESULT _hr = put_Weight(Weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeNode wrapper method implementations
//

inline IDispatchPtr ShapeNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum Office::MsoEditingType ShapeNode::GetEditingType ( ) {
    enum Office::MsoEditingType _result;
    HRESULT _hr = get_EditingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t ShapeNode::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum Office::MsoSegmentType ShapeNode::GetSegmentType ( ) {
    enum Office::MsoSegmentType _result;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeNodes wrapper method implementations
//

inline IDispatchPtr ShapeNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline int ShapeNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeNodePtr ShapeNodes::Item ( const _variant_t & Index ) {
    struct ShapeNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodePtr(_result, false);
}

inline IUnknownPtr ShapeNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT ShapeNodes::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeNodes::Insert ( int Index, enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_Insert(Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeNodes::SetEditingType ( int Index, enum Office::MsoEditingType EditingType ) {
    HRESULT _hr = raw_SetEditingType(Index, EditingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeNodes::SetPosition ( int Index, float X1, float Y1 ) {
    HRESULT _hr = raw_SetPosition(Index, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeNodes::SetSegmentType ( int Index, enum Office::MsoSegmentType SegmentType ) {
    HRESULT _hr = raw_SetSegmentType(Index, SegmentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PictureFormat wrapper method implementations
//

inline IDispatchPtr PictureFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT PictureFormat::IncrementBrightness ( float Increment ) {
    HRESULT _hr = raw_IncrementBrightness(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT PictureFormat::IncrementContrast ( float Increment ) {
    HRESULT _hr = raw_IncrementContrast(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float PictureFormat::GetBrightness ( ) {
    float _result = 0;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void PictureFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoPictureColorType PictureFormat::GetColorType ( ) {
    enum Office::MsoPictureColorType _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void PictureFormat::PutColorType ( enum Office::MsoPictureColorType ColorType ) {
    HRESULT _hr = put_ColorType(ColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float PictureFormat::GetContrast ( ) {
    float _result = 0;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void PictureFormat::PutContrast ( float Contrast ) {
    HRESULT _hr = put_Contrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float PictureFormat::GetCropBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_CropBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void PictureFormat::PutCropBottom ( float CropBottom ) {
    HRESULT _hr = put_CropBottom(CropBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float PictureFormat::GetCropLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_CropLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void PictureFormat::PutCropLeft ( float CropLeft ) {
    HRESULT _hr = put_CropLeft(CropLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float PictureFormat::GetCropRight ( ) {
    float _result = 0;
    HRESULT _hr = get_CropRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void PictureFormat::PutCropRight ( float CropRight ) {
    HRESULT _hr = put_CropRight(CropRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float PictureFormat::GetCropTop ( ) {
    float _result = 0;
    HRESULT _hr = get_CropTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void PictureFormat::PutCropTop ( float CropTop ) {
    HRESULT _hr = put_CropTop(CropTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::MsoRGBType PictureFormat::GetTransparencyColor ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_TransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void PictureFormat::PutTransparencyColor ( Office::MsoRGBType TransparencyColor ) {
    HRESULT _hr = put_TransparencyColor(TransparencyColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState PictureFormat::GetTransparentBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_TransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void PictureFormat::PutTransparentBackground ( enum Office::MsoTriState TransparentBackground ) {
    HRESULT _hr = put_TransparentBackground(TransparentBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShadowFormat wrapper method implementations
//

inline IDispatchPtr ShadowFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT ShadowFormat::IncrementOffsetX ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShadowFormat::IncrementOffsetY ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ColorFormatPtr ShadowFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

inline void ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState ShadowFormat::GetObscured ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Obscured(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShadowFormat::PutObscured ( enum Office::MsoTriState Obscured ) {
    HRESULT _hr = put_Obscured(Obscured);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float ShadowFormat::GetOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShadowFormat::PutOffsetX ( float OffsetX ) {
    HRESULT _hr = put_OffsetX(OffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float ShadowFormat::GetOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShadowFormat::PutOffsetY ( float OffsetY ) {
    HRESULT _hr = put_OffsetY(OffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float ShadowFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShadowFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoShadowType ShadowFormat::GetType ( ) {
    enum Office::MsoShadowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShadowFormat::PutType ( enum Office::MsoShadowType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState ShadowFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShadowFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextEffectFormat wrapper method implementations
//

inline IDispatchPtr TextEffectFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT TextEffectFormat::ToggleVerticalText ( ) {
    HRESULT _hr = raw_ToggleVerticalText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoTextEffectAlignment TextEffectFormat::GetAlignment ( ) {
    enum Office::MsoTextEffectAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void TextEffectFormat::PutAlignment ( enum Office::MsoTextEffectAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState TextEffectFormat::GetFontBold ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void TextEffectFormat::PutFontBold ( enum Office::MsoTriState FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState TextEffectFormat::GetFontItalic ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void TextEffectFormat::PutFontItalic ( enum Office::MsoTriState FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t TextEffectFormat::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void TextEffectFormat::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float TextEffectFormat::GetFontSize ( ) {
    float _result = 0;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void TextEffectFormat::PutFontSize ( float FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState TextEffectFormat::GetKernedPairs ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_KernedPairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void TextEffectFormat::PutKernedPairs ( enum Office::MsoTriState KernedPairs ) {
    HRESULT _hr = put_KernedPairs(KernedPairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState TextEffectFormat::GetNormalizedHeight ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_NormalizedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void TextEffectFormat::PutNormalizedHeight ( enum Office::MsoTriState NormalizedHeight ) {
    HRESULT _hr = put_NormalizedHeight(NormalizedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoPresetTextEffectShape TextEffectFormat::GetPresetShape ( ) {
    enum Office::MsoPresetTextEffectShape _result;
    HRESULT _hr = get_PresetShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void TextEffectFormat::PutPresetShape ( enum Office::MsoPresetTextEffectShape PresetShape ) {
    HRESULT _hr = put_PresetShape(PresetShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoPresetTextEffect TextEffectFormat::GetPresetTextEffect ( ) {
    enum Office::MsoPresetTextEffect _result;
    HRESULT _hr = get_PresetTextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void TextEffectFormat::PutPresetTextEffect ( enum Office::MsoPresetTextEffect Preset ) {
    HRESULT _hr = put_PresetTextEffect(Preset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState TextEffectFormat::GetRotatedChars ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RotatedChars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void TextEffectFormat::PutRotatedChars ( enum Office::MsoTriState RotatedChars ) {
    HRESULT _hr = put_RotatedChars(RotatedChars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t TextEffectFormat::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void TextEffectFormat::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float TextEffectFormat::GetTracking ( ) {
    float _result = 0;
    HRESULT _hr = get_Tracking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void TextEffectFormat::PutTracking ( float Tracking ) {
    HRESULT _hr = put_Tracking(Tracking);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ThreeDFormat wrapper method implementations
//

inline IDispatchPtr ThreeDFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT ThreeDFormat::IncrementRotationX ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ThreeDFormat::IncrementRotationY ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ThreeDFormat::ResetRotation ( ) {
    HRESULT _hr = raw_ResetRotation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ThreeDFormat::SetThreeDFormat ( enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) {
    HRESULT _hr = raw_SetThreeDFormat(PresetThreeDFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ThreeDFormat::SetExtrusionDirection ( enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) {
    HRESULT _hr = raw_SetExtrusionDirection(PresetExtrusionDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float ThreeDFormat::GetDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ThreeDFormat::PutDepth ( float Depth ) {
    HRESULT _hr = put_Depth(Depth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ColorFormatPtr ThreeDFormat::GetExtrusionColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ExtrusionColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

inline enum Office::MsoExtrusionColorType ThreeDFormat::GetExtrusionColorType ( ) {
    enum Office::MsoExtrusionColorType _result;
    HRESULT _hr = get_ExtrusionColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ThreeDFormat::PutExtrusionColorType ( enum Office::MsoExtrusionColorType ExtrusionColorType ) {
    HRESULT _hr = put_ExtrusionColorType(ExtrusionColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState ThreeDFormat::GetPerspective ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ThreeDFormat::PutPerspective ( enum Office::MsoTriState Perspective ) {
    HRESULT _hr = put_Perspective(Perspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoPresetExtrusionDirection ThreeDFormat::GetPresetExtrusionDirection ( ) {
    enum Office::MsoPresetExtrusionDirection _result;
    HRESULT _hr = get_PresetExtrusionDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoPresetLightingDirection ThreeDFormat::GetPresetLightingDirection ( ) {
    enum Office::MsoPresetLightingDirection _result;
    HRESULT _hr = get_PresetLightingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ThreeDFormat::PutPresetLightingDirection ( enum Office::MsoPresetLightingDirection PresetLightingDirection ) {
    HRESULT _hr = put_PresetLightingDirection(PresetLightingDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoPresetLightingSoftness ThreeDFormat::GetPresetLightingSoftness ( ) {
    enum Office::MsoPresetLightingSoftness _result;
    HRESULT _hr = get_PresetLightingSoftness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ThreeDFormat::PutPresetLightingSoftness ( enum Office::MsoPresetLightingSoftness PresetLightingSoftness ) {
    HRESULT _hr = put_PresetLightingSoftness(PresetLightingSoftness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoPresetMaterial ThreeDFormat::GetPresetMaterial ( ) {
    enum Office::MsoPresetMaterial _result;
    HRESULT _hr = get_PresetMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ThreeDFormat::PutPresetMaterial ( enum Office::MsoPresetMaterial PresetMaterial ) {
    HRESULT _hr = put_PresetMaterial(PresetMaterial);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoPresetThreeDFormat ThreeDFormat::GetPresetThreeDFormat ( ) {
    enum Office::MsoPresetThreeDFormat _result;
    HRESULT _hr = get_PresetThreeDFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float ThreeDFormat::GetRotationX ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ThreeDFormat::PutRotationX ( float RotationX ) {
    HRESULT _hr = put_RotationX(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float ThreeDFormat::GetRotationY ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ThreeDFormat::PutRotationY ( float RotationY ) {
    HRESULT _hr = put_RotationY(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState ThreeDFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ThreeDFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FillFormat wrapper method implementations
//

inline IDispatchPtr FillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT FillFormat::Background ( ) {
    HRESULT _hr = raw_Background();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT FillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, int Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT FillFormat::Patterned ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT FillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, int Variant, enum Office::MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT FillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT FillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT FillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, int Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT FillFormat::UserPicture ( _bstr_t PictureFile ) {
    HRESULT _hr = raw_UserPicture(PictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT FillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ColorFormatPtr FillFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

inline void FillFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ColorFormatPtr FillFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

inline void FillFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoGradientColorType FillFormat::GetGradientColorType ( ) {
    enum Office::MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float FillFormat::GetGradientDegree ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoGradientStyle FillFormat::GetGradientStyle ( ) {
    enum Office::MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int FillFormat::GetGradientVariant ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoPatternType FillFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoPresetGradientType FillFormat::GetPresetGradientType ( ) {
    enum Office::MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoPresetTexture FillFormat::GetPresetTexture ( ) {
    enum Office::MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t FillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum Office::MsoTextureType FillFormat::GetTextureType ( ) {
    enum Office::MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float FillFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void FillFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoFillType FillFormat::GetType ( ) {
    enum Office::MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState FillFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void FillFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartEvents wrapper method implementations
//

inline HRESULT IChartEvents::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartEvents::Deactivate ( ) {
    HRESULT _hr = raw_Deactivate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartEvents::Resize ( ) {
    HRESULT _hr = raw_Resize();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartEvents::MouseDown ( long Button, long Shift, long x, long y ) {
    HRESULT _hr = raw_MouseDown(Button, Shift, x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartEvents::MouseUp ( long Button, long Shift, long x, long y ) {
    HRESULT _hr = raw_MouseUp(Button, Shift, x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartEvents::MouseMove ( long Button, long Shift, long x, long y ) {
    HRESULT _hr = raw_MouseMove(Button, Shift, x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartEvents::BeforeRightClick ( VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeRightClick(Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartEvents::DragPlot ( ) {
    HRESULT _hr = raw_DragPlot();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartEvents::DragOver ( ) {
    HRESULT _hr = raw_DragOver();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartEvents::BeforeDoubleClick ( long ElementID, long Arg1, long Arg2, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeDoubleClick(ElementID, Arg1, Arg2, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartEvents::Select ( long ElementID, long Arg1, long Arg2 ) {
    HRESULT _hr = raw_Select(ElementID, Arg1, Arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartEvents::SeriesChange ( long SeriesIndex, long PointIndex ) {
    HRESULT _hr = raw_SeriesChange(SeriesIndex, PointIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartEvents::Calculate ( ) {
    HRESULT _hr = raw_Calculate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IOLEObjectEvents wrapper method implementations
//

inline HRESULT IOLEObjectEvents::GotFocus ( ) {
    HRESULT _hr = raw_GotFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IOLEObjectEvents::LostFocus ( ) {
    HRESULT _hr = raw_LostFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRefreshEvents wrapper method implementations
//

inline HRESULT IRefreshEvents::BeforeRefresh ( VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeRefresh(Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IRefreshEvents::AfterRefresh ( VARIANT_BOOL Success ) {
    HRESULT _hr = raw_AfterRefresh(Success);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface Font wrapper method implementations
//

inline _ApplicationPtr Font::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Font::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Font::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Font::GetBackground ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xb4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutBackground ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xb4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetBold ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x60, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutBold ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x60, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutColor ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutColorIndex ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetFontStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xb1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutFontStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xb1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetItalic ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x65, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutItalic ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutName ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetOutlineFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xdd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutOutlineFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xdd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetShadow ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutShadow ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x68, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutSize ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetStrikethrough ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x69, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutStrikethrough ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetSubscript ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xb3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutSubscript ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xb3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetSuperscript ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xb2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutSuperscript ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xb2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Font::GetUnderline ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Font::PutUnderline ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface Window wrapper method implementations
//

inline _ApplicationPtr Window::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Window::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Window::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Window::Activate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Window::ActivateNext ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x45b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Window::ActivatePrevious ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x45c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline RangePtr Window::GetActiveCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x131, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _ChartPtr Window::GetActiveChart ( ) {
    struct _Chart * _result = 0;
    _com_dispatch_method(this, 0xb7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ChartPtr(_result, false);
}

inline PanePtr Window::GetActivePane ( ) {
    struct Pane * _result = 0;
    _com_dispatch_method(this, 0x282, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PanePtr(_result, false);
}

inline IDispatchPtr Window::GetActiveSheet ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x133, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Window::GetCaption ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Window::PutCaption ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Window::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x115, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x080c\x080c\x080c", &SaveChanges, &Filename, &RouteWorkbook);
    return _result;
}

inline VARIANT_BOOL Window::GetDisplayFormulas ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x284, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutDisplayFormulas ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x284, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Window::GetDisplayGridlines ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x285, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutDisplayGridlines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x285, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Window::GetDisplayHeadings ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x286, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutDisplayHeadings ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x286, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Window::GetDisplayHorizontalScrollBar ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x399, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutDisplayHorizontalScrollBar ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x399, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Window::GetDisplayOutline ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x287, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutDisplayOutline ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x287, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Window::Get_DisplayRightToLeft ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x288, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::Put_DisplayRightToLeft ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x288, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Window::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Window::GetDisplayWorkbookTabs ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x39b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutDisplayWorkbookTabs ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x39b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Window::GetDisplayZeros ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x289, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutDisplayZeros ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x289, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Window::GetEnableResize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4a8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutEnableResize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x4a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Window::GetFreezePanes ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x28a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutFreezePanes ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x28a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Window::GetGridlineColor ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x28b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutGridlineColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x28b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlColorIndex Window::GetGridlineColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x28c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutGridlineColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x28c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline double Window::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Window::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _variant_t Window::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x223, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Down, &Up, &ToRight, &ToLeft);
    return _variant_t(_result, false);
}

inline double Window::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline WindowPtr Window::NewWindow ( ) {
    struct Window * _result = 0;
    _com_dispatch_method(this, 0x118, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return WindowPtr(_result, false);
}

inline _bstr_t Window::GetOnWindow ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x26f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Window::PutOnWindow ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x26f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline PanesPtr Window::GetPanes ( ) {
    struct Panes * _result = 0;
    _com_dispatch_method(this, 0x28d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PanesPtr(_result, false);
}

inline _variant_t Window::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
    return _variant_t(_result, false);
}

inline _variant_t Window::PrintPreview ( const _variant_t & EnableChanges ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x119, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &EnableChanges);
    return _variant_t(_result, false);
}

inline RangePtr Window::GetRangeSelection ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x4a5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline long Window::GetScrollColumn ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x28e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutScrollColumn ( long _arg1 ) {
    _com_dispatch_method(this, 0x28e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Window::GetScrollRow ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x28f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutScrollRow ( long _arg1 ) {
    _com_dispatch_method(this, 0x28f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t Window::ScrollWorkbookTabs ( const _variant_t & Sheets, const _variant_t & Position ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x296, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &Sheets, &Position);
    return _variant_t(_result, false);
}

inline SheetsPtr Window::GetSelectedSheets ( ) {
    struct Sheets * _result = 0;
    _com_dispatch_method(this, 0x290, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return SheetsPtr(_result, false);
}

inline IDispatchPtr Window::GetSelection ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x93, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Window::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x224, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Down, &Up, &ToRight, &ToLeft);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL Window::GetSplit ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x291, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutSplit ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x291, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Window::GetSplitColumn ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x292, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutSplitColumn ( long _arg1 ) {
    _com_dispatch_method(this, 0x292, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline double Window::GetSplitHorizontal ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x293, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutSplitHorizontal ( double _arg1 ) {
    _com_dispatch_method(this, 0x293, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Window::GetSplitRow ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x294, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutSplitRow ( long _arg1 ) {
    _com_dispatch_method(this, 0x294, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline double Window::GetSplitVertical ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x295, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutSplitVertical ( double _arg1 ) {
    _com_dispatch_method(this, 0x295, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Window::GetTabRatio ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x2a1, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutTabRatio ( double _arg1 ) {
    _com_dispatch_method(this, 0x2a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Window::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline enum XlWindowType Window::GetType ( ) {
    enum XlWindowType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double Window::GetUsableHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x185, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double Window::GetUsableWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x186, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL Window::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline RangePtr Window::GetVisibleRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x45e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline double Window::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Window::GetWindowNumber ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x45f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum XlWindowState Window::GetWindowState ( ) {
    enum XlWindowState _result;
    _com_dispatch_method(this, 0x18c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutWindowState ( enum XlWindowState _arg1 ) {
    _com_dispatch_method(this, 0x18c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t Window::GetZoom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x297, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Window::PutZoom ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x297, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline enum XlWindowView Window::GetView ( ) {
    enum XlWindowView _result;
    _com_dispatch_method(this, 0x4aa, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutView ( enum XlWindowView _arg1 ) {
    _com_dispatch_method(this, 0x4aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL Window::GetDisplayRightToLeft ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Window::PutDisplayRightToLeft ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x6ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Window::PointsToScreenPixelsX ( long Points ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6f0, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0003", Points);
    return _result;
}

inline long Window::PointsToScreenPixelsY ( long Points ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6f1, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0003", Points);
    return _result;
}

inline IDispatchPtr Window::RangeFromPoint ( long x, long y ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x6f2, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0003", x, y);
    return IDispatchPtr(_result, false);
}

inline HRESULT Window::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start ) {
    return _com_dispatch_method(this, 0x6f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003\x080c", Left, Top, Width, Height, &Start);
}

//
// dispinterface Windows wrapper method implementations
//

inline _ApplicationPtr Windows::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Windows::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Windows::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Windows::Arrange ( enum XlArrangeStyle ArrangeStyle, const _variant_t & ActiveWorkbook, const _variant_t & SyncHorizontal, const _variant_t & SyncVertical ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x27e, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c", ArrangeStyle, &ActiveWorkbook, &SyncHorizontal, &SyncVertical);
    return _variant_t(_result, false);
}

inline long Windows::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline WindowPtr Windows::GetItem ( const _variant_t & Index ) {
    struct Window * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return WindowPtr(_result, false);
}

inline IUnknownPtr Windows::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline WindowPtr Windows::Get_Default ( const _variant_t & Index ) {
    struct Window * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return WindowPtr(_result, false);
}

//
// dispinterface AppEvents wrapper method implementations
//

inline HRESULT AppEvents::NewWorkbook ( struct _Workbook * Wb ) {
    return _com_dispatch_method(this, 0x61d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wb);
}

inline HRESULT AppEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target ) {
    return _com_dispatch_method(this, 0x616, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

inline HRESULT AppEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x617, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x400b", Sh, Target, Cancel);
}

inline HRESULT AppEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x618, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x400b", Sh, Target, Cancel);
}

inline HRESULT AppEvents::SheetActivate ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x619, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

inline HRESULT AppEvents::SheetDeactivate ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x61a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

inline HRESULT AppEvents::SheetCalculate ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x61b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

inline HRESULT AppEvents::SheetChange ( IDispatch * Sh, struct Range * Target ) {
    return _com_dispatch_method(this, 0x61c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

inline HRESULT AppEvents::WorkbookOpen ( struct _Workbook * Wb ) {
    return _com_dispatch_method(this, 0x61f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wb);
}

inline HRESULT AppEvents::WorkbookActivate ( struct _Workbook * Wb ) {
    return _com_dispatch_method(this, 0x620, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wb);
}

inline HRESULT AppEvents::WorkbookDeactivate ( struct _Workbook * Wb ) {
    return _com_dispatch_method(this, 0x621, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wb);
}

inline HRESULT AppEvents::WorkbookBeforeClose ( struct _Workbook * Wb, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x622, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Wb, Cancel);
}

inline HRESULT AppEvents::WorkbookBeforeSave ( struct _Workbook * Wb, VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x623, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x000b\x400b", Wb, SaveAsUI, Cancel);
}

inline HRESULT AppEvents::WorkbookBeforePrint ( struct _Workbook * Wb, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x624, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Wb, Cancel);
}

inline HRESULT AppEvents::WorkbookNewSheet ( struct _Workbook * Wb, IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x625, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Wb, Sh);
}

inline HRESULT AppEvents::WorkbookAddinInstall ( struct _Workbook * Wb ) {
    return _com_dispatch_method(this, 0x626, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wb);
}

inline HRESULT AppEvents::WorkbookAddinUninstall ( struct _Workbook * Wb ) {
    return _com_dispatch_method(this, 0x627, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wb);
}

inline HRESULT AppEvents::WindowResize ( struct _Workbook * Wb, struct Window * Wn ) {
    return _com_dispatch_method(this, 0x612, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Wb, Wn);
}

inline HRESULT AppEvents::WindowActivate ( struct _Workbook * Wb, struct Window * Wn ) {
    return _com_dispatch_method(this, 0x614, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Wb, Wn);
}

inline HRESULT AppEvents::WindowDeactivate ( struct _Workbook * Wb, struct Window * Wn ) {
    return _com_dispatch_method(this, 0x615, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Wb, Wn);
}

inline HRESULT AppEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target ) {
    return _com_dispatch_method(this, 0x73e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

//
// dispinterface WorksheetFunction wrapper method implementations
//

inline _ApplicationPtr WorksheetFunction::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator WorksheetFunction::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr WorksheetFunction::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t WorksheetFunction::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xa9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _variant_t(_result, false);
}

inline double WorksheetFunction::Count ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4000, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline VARIANT_BOOL WorksheetFunction::IsNA ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4002, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

inline VARIANT_BOOL WorksheetFunction::IsError ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4003, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

inline double WorksheetFunction::Sum ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4004, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::Average ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4005, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::Min ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4006, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::Max ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4007, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::Npv ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x400b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::StDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x400c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline _bstr_t WorksheetFunction::Dollar ( double Arg1, const _variant_t & Arg2 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x400d, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005\x080c", Arg1, &Arg2);
    return _bstr_t(_result, false);
}

inline _bstr_t WorksheetFunction::Fixed ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x400e, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005\x080c\x080c", Arg1, &Arg2, &Arg3);
    return _bstr_t(_result, false);
}

inline double WorksheetFunction::Pi ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4013, DISPATCH_METHOD, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double WorksheetFunction::Ln ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4016, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Log10 ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4017, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Round ( double Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x401b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

inline _variant_t WorksheetFunction::Lookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x401c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x080c", &Arg1, &Arg2, &Arg3);
    return _variant_t(_result, false);
}

inline _variant_t WorksheetFunction::Index ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x401d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x0005\x080c\x080c", &Arg1, Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

inline _bstr_t WorksheetFunction::Rept ( _bstr_t Arg1, double Arg2 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x401e, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008\x0005", (BSTR)Arg1, Arg2);
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL WorksheetFunction::And ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4024, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline VARIANT_BOOL WorksheetFunction::Or ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4025, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::DCount ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4028, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::DSum ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4029, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::DAverage ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x402a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::DMin ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x402b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::DMax ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x402c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::DStDev ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x402d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::Var ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x402e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::DVar ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x402f, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline _bstr_t WorksheetFunction::Text ( const _variant_t & Arg1, _bstr_t Arg2 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x4030, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x000c\x0008", &Arg1, (BSTR)Arg2);
    return _bstr_t(_result, false);
}

inline _variant_t WorksheetFunction::LinEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x4031, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

inline _variant_t WorksheetFunction::Trend ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x4032, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

inline _variant_t WorksheetFunction::LogEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x4033, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

inline _variant_t WorksheetFunction::Growth ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x4034, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

inline double WorksheetFunction::Pv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4038, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5);
    return _result;
}

inline double WorksheetFunction::Fv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4039, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5);
    return _result;
}

inline double WorksheetFunction::NPer ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x403a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5);
    return _result;
}

inline double WorksheetFunction::Pmt ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x403b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5);
    return _result;
}

inline double WorksheetFunction::Rate ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x403c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5, &Arg6);
    return _result;
}

inline double WorksheetFunction::MIrr ( const _variant_t & Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x403d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005\x0005", &Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::Irr ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x403e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::Match ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c\x080c", &Arg1, &Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::Weekday ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4046, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::Search ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4052, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0008\x0008\x080c", (BSTR)Arg1, (BSTR)Arg2, &Arg3);
    return _result;
}

inline _variant_t WorksheetFunction::Transpose ( const _variant_t & Arg1 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x4053, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Arg1);
    return _variant_t(_result, false);
}

inline double WorksheetFunction::Atan2 ( double Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4061, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::Asin ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4062, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Acos ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4063, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline _variant_t WorksheetFunction::Choose ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x4064, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _variant_t(_result, false);
}

inline _variant_t WorksheetFunction::HLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x4065, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x000c\x080c", &Arg1, &Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

inline _variant_t WorksheetFunction::VLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x4066, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x000c\x080c", &Arg1, &Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

inline double WorksheetFunction::Log ( double Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x406d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x080c", Arg1, &Arg2);
    return _result;
}

inline _bstr_t WorksheetFunction::Proper ( _bstr_t Arg1 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x4072, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _bstr_t(_result, false);
}

inline _bstr_t WorksheetFunction::Trim ( _bstr_t Arg1 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x4076, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _bstr_t(_result, false);
}

inline _bstr_t WorksheetFunction::Replace ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x4077, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008\x0005\x0005\x0008", (BSTR)Arg1, Arg2, Arg3, (BSTR)Arg4);
    return _bstr_t(_result, false);
}

inline _bstr_t WorksheetFunction::Substitute ( _bstr_t Arg1, _bstr_t Arg2, _bstr_t Arg3, const _variant_t & Arg4 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x4078, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008\x0008\x0008\x080c", (BSTR)Arg1, (BSTR)Arg2, (BSTR)Arg3, &Arg4);
    return _bstr_t(_result, false);
}

inline double WorksheetFunction::Find ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x407c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0008\x0008\x080c", (BSTR)Arg1, (BSTR)Arg2, &Arg3);
    return _result;
}

inline VARIANT_BOOL WorksheetFunction::IsErr ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x407e, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

inline VARIANT_BOOL WorksheetFunction::IsText ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x407f, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

inline VARIANT_BOOL WorksheetFunction::IsNumber ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4080, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

inline double WorksheetFunction::Sln ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x408e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::Syd ( double Arg1, double Arg2, double Arg3, double Arg4 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x408f, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

inline double WorksheetFunction::Ddb ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4090, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x080c", Arg1, Arg2, Arg3, Arg4, &Arg5);
    return _result;
}

inline _bstr_t WorksheetFunction::Clean ( _bstr_t Arg1 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x40a2, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _bstr_t(_result, false);
}

inline double WorksheetFunction::MDeterm ( const _variant_t & Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40a3, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

inline _variant_t WorksheetFunction::MInverse ( const _variant_t & Arg1 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x40a4, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Arg1);
    return _variant_t(_result, false);
}

inline _variant_t WorksheetFunction::MMult ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x40a5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _variant_t(_result, false);
}

inline double WorksheetFunction::Ipmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40a7, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, Arg4, &Arg5, &Arg6);
    return _result;
}

inline double WorksheetFunction::Ppmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40a8, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, Arg4, &Arg5, &Arg6);
    return _result;
}

inline double WorksheetFunction::CountA ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40a9, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::Product ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40b7, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::Fact ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40b8, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::DProduct ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40bd, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline VARIANT_BOOL WorksheetFunction::IsNonText ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x40be, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

inline double WorksheetFunction::StDevP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40c1, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::VarP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40c2, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::DStDevP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40c3, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::DVarP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40c4, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline VARIANT_BOOL WorksheetFunction::IsLogical ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x40c6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

inline double WorksheetFunction::DCountA ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40c7, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline _bstr_t WorksheetFunction::USDollar ( double Arg1, double Arg2 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x40cc, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _bstr_t(_result, false);
}

inline double WorksheetFunction::FindB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40cd, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0008\x0008\x080c", (BSTR)Arg1, (BSTR)Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::SearchB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40ce, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0008\x0008\x080c", (BSTR)Arg1, (BSTR)Arg2, &Arg3);
    return _result;
}

inline _bstr_t WorksheetFunction::ReplaceB ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x40cf, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008\x0005\x0005\x0008", (BSTR)Arg1, Arg2, Arg3, (BSTR)Arg4);
    return _bstr_t(_result, false);
}

inline double WorksheetFunction::RoundUp ( double Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40d4, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::RoundDown ( double Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40d5, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::Rank ( double Arg1, struct Range * Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40d8, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0009\x080c", Arg1, Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::Days360 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40dc, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c\x080c", &Arg1, &Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::Vdb ( double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, const _variant_t & Arg6, const _variant_t & Arg7 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40de, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, Arg4, Arg5, &Arg6, &Arg7);
    return _result;
}

inline double WorksheetFunction::Median ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40e3, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::SumProduct ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40e4, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::Sinh ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40e5, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Cosh ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40e6, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Tanh ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40e7, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Asinh ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40e8, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Acosh ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40e9, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Atanh ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40ea, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline _variant_t WorksheetFunction::DGet ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x40eb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _variant_t(_result, false);
}

inline double WorksheetFunction::Db ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x40f7, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x080c", Arg1, Arg2, Arg3, Arg4, &Arg5);
    return _result;
}

inline _variant_t WorksheetFunction::Frequency ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x40fc, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _variant_t(_result, false);
}

inline double WorksheetFunction::AveDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x410d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::BetaDist ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x410e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5);
    return _result;
}

inline double WorksheetFunction::GammaLn ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x410f, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::BetaInv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4110, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5);
    return _result;
}

inline double WorksheetFunction::BinomDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4111, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x000b", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

inline double WorksheetFunction::ChiDist ( double Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4112, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::ChiInv ( double Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4113, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::Combin ( double Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4114, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::Confidence ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4115, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::CritBinom ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4116, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::Even ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4117, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::ExponDist ( double Arg1, double Arg2, VARIANT_BOOL Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4118, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x000b", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::FDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4119, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::FInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x411a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::Fisher ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x411b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::FisherInv ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x411c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Floor ( double Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x411d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::GammaDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x411e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x000b", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

inline double WorksheetFunction::GammaInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x411f, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::Ceiling ( double Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4120, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::HypGeomDist ( double Arg1, double Arg2, double Arg3, double Arg4 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4121, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

inline double WorksheetFunction::LogNormDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4122, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::LogInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4123, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::NegBinomDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4124, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::NormDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4125, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x000b", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

inline double WorksheetFunction::NormSDist ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4126, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::NormInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4127, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::NormSInv ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4128, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Standardize ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4129, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::Odd ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x412a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Permut ( double Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x412b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::Poisson ( double Arg1, double Arg2, VARIANT_BOOL Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x412c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x000b", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::TDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x412d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

inline double WorksheetFunction::Weibull ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x412e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x000b", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

inline double WorksheetFunction::SumXMY2 ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x412f, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::SumX2MY2 ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4130, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::SumX2PY2 ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4131, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::ChiTest ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4132, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::Correl ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4133, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::Covar ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4134, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::Forecast ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4135, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::FTest ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4136, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::Intercept ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4137, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::Pearson ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4138, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::RSq ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4139, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::StEyx ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x413a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::Slope ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x413b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::TTest ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, double Arg4 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x413c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c\x0005\x0005", &Arg1, &Arg2, Arg3, Arg4);
    return _result;
}

inline double WorksheetFunction::Prob ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, const _variant_t & Arg4 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x413d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c\x0005\x080c", &Arg1, &Arg2, Arg3, &Arg4);
    return _result;
}

inline double WorksheetFunction::DevSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x413e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::GeoMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x413f, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::HarMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4140, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::SumSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4141, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::Kurt ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4142, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::Skew ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4143, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::ZTest ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4144, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005\x080c", &Arg1, Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::Large ( const _variant_t & Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4145, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005", &Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::Small ( const _variant_t & Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4146, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005", &Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::Quartile ( const _variant_t & Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4147, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005", &Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::Percentile ( const _variant_t & Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4148, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005", &Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::PercentRank ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4149, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005\x080c", &Arg1, Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::Mode ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x414a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::TrimMean ( const _variant_t & Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x414b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005", &Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::TInv ( double Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x414c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::Power ( double Arg1, double Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4151, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

inline double WorksheetFunction::Radians ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4156, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Degrees ( double Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4157, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

inline double WorksheetFunction::Subtotal ( double Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4158, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0009\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", Arg1, Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

inline double WorksheetFunction::SumIf ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x4159, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x080c", Arg1, &Arg2, &Arg3);
    return _result;
}

inline double WorksheetFunction::CountIf ( struct Range * Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x415a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c", Arg1, &Arg2);
    return _result;
}

inline double WorksheetFunction::CountBlank ( struct Range * Arg1 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x415b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009", Arg1);
    return _result;
}

inline double WorksheetFunction::Ispmt ( double Arg1, double Arg2, double Arg3, double Arg4 ) {
    double _result = 0;
    _com_dispatch_method(this, 0x415e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

inline _bstr_t WorksheetFunction::Roman ( double Arg1, const _variant_t & Arg2 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x4162, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005\x080c", Arg1, &Arg2);
    return _bstr_t(_result, false);
}

inline _bstr_t WorksheetFunction::Asc ( _bstr_t Arg1 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x40d6, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _bstr_t(_result, false);
}

inline _bstr_t WorksheetFunction::Dbcs ( _bstr_t Arg1 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x40d7, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _bstr_t(_result, false);
}

inline _bstr_t WorksheetFunction::Phonetic ( struct Range * Arg1 ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x4168, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0009", Arg1);
    return _bstr_t(_result, false);
}

//
// dispinterface Range wrapper method implementations
//

inline _ApplicationPtr Range::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Range::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Range::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Range::Activate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::GetAddIndent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutAddIndent ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Range::GetAddress ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0xec, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, 
        L"\x000c\x000c\x0003\x080c\x080c", &RowAbsolute, &ColumnAbsolute, ReferenceStyle, &External, &RelativeTo);
    return _bstr_t(_result, false);
}

inline _bstr_t Range::GetAddressLocal ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x1b5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, 
        L"\x000c\x000c\x0003\x080c\x080c", &RowAbsolute, &ColumnAbsolute, ReferenceStyle, &External, &RelativeTo);
    return _bstr_t(_result, false);
}

inline _variant_t Range::AdvancedFilter ( enum XlFilterAction Action, const _variant_t & CriteriaRange, const _variant_t & CopyToRange, const _variant_t & Unique ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x36c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c", Action, &CriteriaRange, &CopyToRange, &Unique);
    return _variant_t(_result, false);
}

inline _variant_t Range::ApplyNames ( const _variant_t & Names, const _variant_t & IgnoreRelativeAbsolute, const _variant_t & UseRowColumnNames, const _variant_t & OmitColumn, const _variant_t & OmitRow, enum XlApplyNamesOrder Order, const _variant_t & AppendLast ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1b9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x000c\x000c\x000c\x0003\x080c", &Names, &IgnoreRelativeAbsolute, &UseRowColumnNames, &OmitColumn, &OmitRow, Order, &AppendLast);
    return _variant_t(_result, false);
}

inline _variant_t Range::ApplyOutlineStyles ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1c0, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline AreasPtr Range::GetAreas ( ) {
    struct Areas * _result = 0;
    _com_dispatch_method(this, 0x238, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return AreasPtr(_result, false);
}

inline _bstr_t Range::AutoComplete ( _bstr_t String ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x4a1, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)String);
    return _bstr_t(_result, false);
}

inline _variant_t Range::AutoFill ( struct Range * Destination, enum XlAutoFillType Type ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1c1, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0009\x0003", Destination, Type);
    return _variant_t(_result, false);
}

inline _variant_t Range::AutoFilter ( const _variant_t & Field, const _variant_t & Criteria1, enum XlAutoFilterOperator Operator, const _variant_t & Criteria2, const _variant_t & VisibleDropDown ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x319, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x0003\x080c\x080c", &Field, &Criteria1, Operator, &Criteria2, &VisibleDropDown);
    return _variant_t(_result, false);
}

inline _variant_t Range::AutoFit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xed, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::AutoFormat ( enum XlRangeAutoFormat Format, const _variant_t & Number, const _variant_t & Font, const _variant_t & Alignment, const _variant_t & Border, const _variant_t & Pattern, const _variant_t & Width ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x72, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c\x080c\x080c\x080c", Format, &Number, &Font, &Alignment, &Border, &Pattern, &Width);
    return _variant_t(_result, false);
}

inline _variant_t Range::AutoOutline ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x40c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::BorderAround ( const _variant_t & LineStyle, enum XlBorderWeight Weight, enum XlColorIndex ColorIndex, const _variant_t & Color ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x42b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x0003\x0003\x080c", &LineStyle, Weight, ColorIndex, &Color);
    return _variant_t(_result, false);
}

inline BordersPtr Range::GetBorders ( ) {
    struct Borders * _result = 0;
    _com_dispatch_method(this, 0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BordersPtr(_result, false);
}

inline _variant_t Range::Calculate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x117, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline RangePtr Range::GetCells ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0xee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline CharactersPtr Range::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Range::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline _variant_t Range::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6f, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::ClearContents ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x71, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::ClearNotes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xef, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::ClearOutline ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x40d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline long Range::GetColumn ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xf0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline RangePtr Range::ColumnDifferences ( const _variant_t & Comparison ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x1fe, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Comparison);
    return RangePtr(_result, false);
}

inline RangePtr Range::GetColumns ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0xf1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Range::GetColumnWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xf2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutColumnWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xf2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::Consolidate ( const _variant_t & Sources, const _variant_t & Function, const _variant_t & TopRow, const _variant_t & LeftColumn, const _variant_t & CreateLinks ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1e2, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c", &Sources, &Function, &TopRow, &LeftColumn, &CreateLinks);
    return _variant_t(_result, false);
}

inline _variant_t Range::Copy ( const _variant_t & Destination ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Destination);
    return _variant_t(_result, false);
}

inline long Range::CopyFromRecordset ( IUnknown * Data, const _variant_t & MaxRows, const _variant_t & MaxColumns ) {
    long _result = 0;
    _com_dispatch_method(this, 0x480, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x000d\x080c\x080c", Data, &MaxRows, &MaxColumns);
    return _result;
}

inline _variant_t Range::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline long Range::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _variant_t Range::CreateNames ( const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1c9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Top, &Left, &Bottom, &Right);
    return _variant_t(_result, false);
}

inline _variant_t Range::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1ca, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x0003\x080c\x080c\x080c\x080c", &Edition, Appearance, &ContainsPICT, &ContainsBIFF, &ContainsRTF, &ContainsVALU);
    return _variant_t(_result, false);
}

inline RangePtr Range::GetCurrentArray ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x1f5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline RangePtr Range::GetCurrentRegion ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0xf3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Range::Cut ( const _variant_t & Destination ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Destination);
    return _variant_t(_result, false);
}

inline _variant_t Range::DataSeries ( const _variant_t & Rowcol, enum XlDataSeriesType Type, enum XlDataSeriesDate Date, const _variant_t & Step, const _variant_t & Stop, const _variant_t & Trend ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1d0, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x0003\x0003\x080c\x080c\x080c", &Rowcol, Type, Date, &Step, &Stop, &Trend);
    return _variant_t(_result, false);
}

inline _variant_t Range::Get_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &RowIndex, &ColumnIndex);
    return _variant_t(_result, false);
}

inline void Range::Put_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, const _variant_t & _arg3 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c\x080c", &RowIndex, &ColumnIndex, &_arg3);
}

inline _variant_t Range::Delete ( const _variant_t & Shift ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Shift);
    return _variant_t(_result, false);
}

inline RangePtr Range::GetDependents ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x21f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Range::MSDialogBox ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xf5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline RangePtr Range::GetDirectDependents ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x221, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline RangePtr Range::GetDirectPrecedents ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x222, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Range::EditionOptions ( enum XlEditionType Type, enum XlEditionOptionsOption Option, const _variant_t & Name, const _variant_t & Reference, enum XlPictureAppearance Appearance, enum XlPictureAppearance ChartSize, const _variant_t & Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x46b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003\x000c\x000c\x0003\x0003\x080c", Type, Option, &Name, &Reference, Appearance, ChartSize, &Format);
    return _variant_t(_result, false);
}

inline RangePtr Range::GetEnd ( enum XlDirection Direction ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x1f4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Direction);
    return RangePtr(_result, false);
}

inline RangePtr Range::GetEntireColumn ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0xf6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline RangePtr Range::GetEntireRow ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0xf7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Range::FillDown ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xf8, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::FillLeft ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xf9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::FillRight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xfa, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::FillUp ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xfb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline RangePtr Range::Find ( const _variant_t & What, const _variant_t & After, const _variant_t & LookIn, const _variant_t & LookAt, const _variant_t & SearchOrder, enum XlSearchDirection SearchDirection, const _variant_t & MatchCase, const _variant_t & MatchByte ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x18e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c\x000c\x000c\x000c\x000c\x0003\x080c\x080c", &What, &After, &LookIn, &LookAt, &SearchOrder, SearchDirection, &MatchCase, &MatchByte);
    return RangePtr(_result, false);
}

inline RangePtr Range::FindNext ( const _variant_t & After ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x18f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &After);
    return RangePtr(_result, false);
}

inline RangePtr Range::FindPrevious ( const _variant_t & After ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &After);
    return RangePtr(_result, false);
}

inline FontPtr Range::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _variant_t Range::GetFormula ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutFormula ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetFormulaArray ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x24a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutFormulaArray ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x24a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline enum XlFormulaLabel Range::GetFormulaLabel ( ) {
    enum XlFormulaLabel _result;
    _com_dispatch_method(this, 0x564, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Range::PutFormulaLabel ( enum XlFormulaLabel _arg1 ) {
    _com_dispatch_method(this, 0x564, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t Range::GetFormulaHidden ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x106, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutFormulaHidden ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x106, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetFormulaLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x107, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutFormulaLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x107, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetFormulaR1C1 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x108, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutFormulaR1C1 ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x108, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetFormulaR1C1Local ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x109, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutFormulaR1C1Local ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x109, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::FunctionWizard ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x23b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL Range::GoalSeek ( const _variant_t & Goal, struct Range * ChangingCell ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1d8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x0009", &Goal, ChangingCell);
    return _result;
}

inline _variant_t Range::Group ( const _variant_t & Start, const _variant_t & End, const _variant_t & By, const _variant_t & Periods ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Start, &End, &By, &Periods);
    return _variant_t(_result, false);
}

inline _variant_t Range::GetHasArray ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x10a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::GetHasFormula ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x10b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::GetHeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::GetHidden ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x10c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutHidden ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x10c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetIndentLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xc9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutIndentLevel ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xc9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline HRESULT Range::InsertIndent ( long InsertAmount ) {
    return _com_dispatch_method(this, 0x565, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", InsertAmount);
}

inline _variant_t Range::Insert ( const _variant_t & Shift ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xfc, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Shift);
    return _variant_t(_result, false);
}

inline InteriorPtr Range::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline _variant_t Range::GetItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &RowIndex, &ColumnIndex);
    return _variant_t(_result, false);
}

inline void Range::PutItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, const _variant_t & _arg3 ) {
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x000c\x080c", &RowIndex, &ColumnIndex, &_arg3);
}

inline _variant_t Range::Justify ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1ef, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::GetLeft ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline long Range::GetListHeaderRows ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x4a3, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _variant_t Range::ListNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xfd, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline enum XlLocationInTable Range::GetLocationInTable ( ) {
    enum XlLocationInTable _result;
    _com_dispatch_method(this, 0x2b3, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _variant_t Range::GetLocked ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutLocked ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline HRESULT Range::Merge ( const _variant_t & Across ) {
    return _com_dispatch_method(this, 0x234, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Across);
}

inline HRESULT Range::UnMerge ( ) {
    return _com_dispatch_method(this, 0x568, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline RangePtr Range::GetMergeArea ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x569, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Range::GetMergeCells ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutMergeCells ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xd0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutName ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::NavigateArrow ( const _variant_t & TowardPrecedent, const _variant_t & ArrowNumber, const _variant_t & LinkNumber ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x408, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c", &TowardPrecedent, &ArrowNumber, &LinkNumber);
    return _variant_t(_result, false);
}

inline IUnknownPtr Range::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline RangePtr Range::GetNext ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _bstr_t Range::NoteText ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Length ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x467, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x080c\x080c\x080c", &Text, &Start, &Length);
    return _bstr_t(_result, false);
}

inline _variant_t Range::GetNumberFormat ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutNumberFormat ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutNumberFormatLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline RangePtr Range::GetOffset ( const _variant_t & RowOffset, const _variant_t & ColumnOffset ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0xfe, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &RowOffset, &ColumnOffset);
    return RangePtr(_result, false);
}

inline _variant_t Range::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetOutlineLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x10f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutOutlineLevel ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x10f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long Range::GetPageBreak ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xff, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Range::PutPageBreak ( long _arg1 ) {
    _com_dispatch_method(this, 0xff, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t Range::Parse ( const _variant_t & ParseLine, const _variant_t & Destination ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1dd, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &ParseLine, &Destination);
    return _variant_t(_result, false);
}

inline _variant_t Range::PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x403, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003\x080c\x080c", Paste, Operation, &SkipBlanks, &Transpose);
    return _variant_t(_result, false);
}

inline PivotFieldPtr Range::GetPivotField ( ) {
    struct PivotField * _result = 0;
    _com_dispatch_method(this, 0x2db, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

inline PivotItemPtr Range::GetPivotItem ( ) {
    struct PivotItem * _result = 0;
    _com_dispatch_method(this, 0x2e4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotItemPtr(_result, false);
}

inline PivotTablePtr Range::GetPivotTable ( ) {
    struct PivotTable * _result = 0;
    _com_dispatch_method(this, 0x2cc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotTablePtr(_result, false);
}

inline RangePtr Range::GetPrecedents ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x220, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Range::GetPrefixCharacter ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline RangePtr Range::GetPrevious ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x1f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Range::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
    return _variant_t(_result, false);
}

inline _variant_t Range::PrintPreview ( const _variant_t & EnableChanges ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x119, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &EnableChanges);
    return _variant_t(_result, false);
}

inline _QueryTablePtr Range::GetQueryTable ( ) {
    struct _QueryTable * _result = 0;
    _com_dispatch_method(this, 0x56a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _QueryTablePtr(_result, false);
}

inline RangePtr Range::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c\x080c", &Cell1, &Cell2);
    return RangePtr(_result, false);
}

inline _variant_t Range::RemoveSubtotal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x373, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL Range::Replace ( const _variant_t & What, const _variant_t & Replacement, const _variant_t & LookAt, const _variant_t & SearchOrder, const _variant_t & MatchCase, const _variant_t & MatchByte ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xe2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x000c\x080c\x080c\x080c\x080c", &What, &Replacement, &LookAt, &SearchOrder, &MatchCase, &MatchByte);
    return _result;
}

inline RangePtr Range::GetResize ( const _variant_t & RowSize, const _variant_t & ColumnSize ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x100, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &RowSize, &ColumnSize);
    return RangePtr(_result, false);
}

inline long Range::GetRow ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x101, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline RangePtr Range::RowDifferences ( const _variant_t & Comparison ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x1ff, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Comparison);
    return RangePtr(_result, false);
}

inline _variant_t Range::GetRowHeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x110, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutRowHeight ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x110, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline RangePtr Range::GetRows ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x102, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Range::Run ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x103, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _variant_t(_result, false);
}

inline _variant_t Range::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::Show ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f0, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::ShowDependents ( const _variant_t & Remove ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x36d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Remove);
    return _variant_t(_result, false);
}

inline _variant_t Range::GetShowDetail ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x249, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutShowDetail ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x249, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::ShowErrors ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x36e, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::ShowPrecedents ( const _variant_t & Remove ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x36f, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Remove);
    return _variant_t(_result, false);
}

inline _variant_t Range::GetShrinkToFit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutShrinkToFit ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xd1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::Sort ( const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Key2, const _variant_t & Type, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortMethod SortMethod ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x370, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x0003\x000c\x000c\x0003\x000c\x0003\x0003\x000c\x000c\x0003\x0003", &Key1, Order1, &Key2, &Type, Order2, &Key3, Order3, Header, &OrderCustom, &MatchCase, Orientation, SortMethod);
    return _variant_t(_result, false);
}

inline _variant_t Range::SortSpecial ( enum XlSortMethod SortMethod, const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Type, const _variant_t & Key2, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x371, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x000c\x0003\x000c\x000c\x0003\x000c\x0003\x0003\x000c\x000c\x0003", SortMethod, &Key1, Order1, &Type, &Key2, Order2, &Key3, Order3, Header, &OrderCustom, &MatchCase, Orientation);
    return _variant_t(_result, false);
}

inline SoundNotePtr Range::GetSoundNote ( ) {
    struct SoundNote * _result = 0;
    _com_dispatch_method(this, 0x394, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return SoundNotePtr(_result, false);
}

inline RangePtr Range::SpecialCells ( enum XlCellType Type, const _variant_t & Value ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x19a, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x080c", Type, &Value);
    return RangePtr(_result, false);
}

inline _variant_t Range::GetStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x104, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x104, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::SubscribeTo ( _bstr_t Edition, enum XlSubscribeToFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1e1, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0008\x0003", (BSTR)Edition, Format);
    return _variant_t(_result, false);
}

inline _variant_t Range::Subtotal ( long GroupBy, enum XlConsolidationFunction Function, const _variant_t & TotalList, const _variant_t & Replace, const _variant_t & PageBreaks, enum XlSummaryRow SummaryBelowData ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x372, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003\x000c\x000c\x000c\x0003", GroupBy, Function, &TotalList, &Replace, &PageBreaks, SummaryBelowData);
    return _variant_t(_result, false);
}

inline _variant_t Range::GetSummary ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x111, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::Table ( const _variant_t & RowInput, const _variant_t & ColumnInput ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f1, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &RowInput, &ColumnInput);
    return _variant_t(_result, false);
}

inline _variant_t Range::GetText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::TextToColumns ( const _variant_t & Destination, enum XlTextParsingType DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x410, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x0003\x0003\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Destination, DataType, TextQualifier, &ConsecutiveDelimiter, &Tab, &Semicolon, &Comma, &Space, &Other, &OtherChar, &FieldInfo, &DecimalSeparator, &ThousandsSeparator);
    return _variant_t(_result, false);
}

inline _variant_t Range::GetTop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::Ungroup ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Range::GetUseStandardHeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x112, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutUseStandardHeight ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x112, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetUseStandardWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x113, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutUseStandardWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x113, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline ValidationPtr Range::GetValidation ( ) {
    struct Validation * _result = 0;
    _com_dispatch_method(this, 0x56b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ValidationPtr(_result, false);
}

inline _variant_t Range::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetValue2 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x56c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutValue2 ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x56c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Range::GetWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _WorksheetPtr Range::GetWorksheet ( ) {
    struct _Worksheet * _result = 0;
    _com_dispatch_method(this, 0x15c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _WorksheetPtr(_result, false);
}

inline _variant_t Range::GetWrapText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x114, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Range::PutWrapText ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x114, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline CommentPtr Range::AddComment ( const _variant_t & Text ) {
    struct Comment * _result = 0;
    _com_dispatch_method(this, 0x56d, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Text);
    return CommentPtr(_result, false);
}

inline CommentPtr Range::GetComment ( ) {
    struct Comment * _result = 0;
    _com_dispatch_method(this, 0x38e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CommentPtr(_result, false);
}

inline HRESULT Range::ClearComments ( ) {
    return _com_dispatch_method(this, 0x56e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline PhoneticPtr Range::GetPhonetic ( ) {
    struct Phonetic * _result = 0;
    _com_dispatch_method(this, 0x56f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PhoneticPtr(_result, false);
}

inline FormatConditionsPtr Range::GetFormatConditions ( ) {
    struct FormatConditions * _result = 0;
    _com_dispatch_method(this, 0x570, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FormatConditionsPtr(_result, false);
}

inline long Range::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Range::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline HyperlinksPtr Range::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    _com_dispatch_method(this, 0x571, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HyperlinksPtr(_result, false);
}

inline PhoneticsPtr Range::GetPhonetics ( ) {
    struct Phonetics * _result = 0;
    _com_dispatch_method(this, 0x713, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PhoneticsPtr(_result, false);
}

inline HRESULT Range::SetPhonetic ( ) {
    return _com_dispatch_method(this, 0x714, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline _bstr_t Range::GetID ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x715, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Range::PutID ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x715, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Range::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
    return _variant_t(_result, false);
}

//
// dispinterface ChartEvents wrapper method implementations
//

inline HRESULT ChartEvents::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ChartEvents::Deactivate ( ) {
    return _com_dispatch_method(this, 0x5fa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ChartEvents::Resize ( ) {
    return _com_dispatch_method(this, 0x100, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ChartEvents::MouseDown ( long Button, long Shift, long x, long y ) {
    return _com_dispatch_method(this, 0x5fb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, x, y);
}

inline HRESULT ChartEvents::MouseUp ( long Button, long Shift, long x, long y ) {
    return _com_dispatch_method(this, 0x5fc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, x, y);
}

inline HRESULT ChartEvents::MouseMove ( long Button, long Shift, long x, long y ) {
    return _com_dispatch_method(this, 0x5fd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, x, y);
}

inline HRESULT ChartEvents::BeforeRightClick ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x5fe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

inline HRESULT ChartEvents::DragPlot ( ) {
    return _com_dispatch_method(this, 0x5ff, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ChartEvents::DragOver ( ) {
    return _com_dispatch_method(this, 0x600, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ChartEvents::BeforeDoubleClick ( long ElementID, long Arg1, long Arg2, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x601, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x400b", ElementID, Arg1, Arg2, Cancel);
}

inline HRESULT ChartEvents::Select ( long ElementID, long Arg1, long Arg2 ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003", ElementID, Arg1, Arg2);
}

inline HRESULT ChartEvents::SeriesChange ( long SeriesIndex, long PointIndex ) {
    return _com_dispatch_method(this, 0x602, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", SeriesIndex, PointIndex);
}

inline HRESULT ChartEvents::Calculate ( ) {
    return _com_dispatch_method(this, 0x117, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface VPageBreak wrapper method implementations
//

inline _ApplicationPtr VPageBreak::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator VPageBreak::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _WorksheetPtr VPageBreak::GetParent ( ) {
    struct _Worksheet * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _WorksheetPtr(_result, false);
}

inline HRESULT VPageBreak::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT VPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex ) {
    return _com_dispatch_method(this, 0x58c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", Direction, RegionIndex);
}

inline enum XlPageBreak VPageBreak::GetType ( ) {
    enum XlPageBreak _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void VPageBreak::PutType ( enum XlPageBreak _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlPageBreakExtent VPageBreak::GetExtent ( ) {
    enum XlPageBreakExtent _result;
    _com_dispatch_method(this, 0x58e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline RangePtr VPageBreak::GetLocation ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x575, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline void VPageBreak::PutRefLocation ( struct Range * _arg1 ) {
    _com_dispatch_method(this, 0x575, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

//
// dispinterface HPageBreak wrapper method implementations
//

inline _ApplicationPtr HPageBreak::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator HPageBreak::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _WorksheetPtr HPageBreak::GetParent ( ) {
    struct _Worksheet * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _WorksheetPtr(_result, false);
}

inline HRESULT HPageBreak::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT HPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex ) {
    return _com_dispatch_method(this, 0x58c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", Direction, RegionIndex);
}

inline enum XlPageBreak HPageBreak::GetType ( ) {
    enum XlPageBreak _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void HPageBreak::PutType ( enum XlPageBreak _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlPageBreakExtent HPageBreak::GetExtent ( ) {
    enum XlPageBreakExtent _result;
    _com_dispatch_method(this, 0x58e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline RangePtr HPageBreak::GetLocation ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x575, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline void HPageBreak::PutRefLocation ( struct Range * _arg1 ) {
    _com_dispatch_method(this, 0x575, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

//
// dispinterface HPageBreaks wrapper method implementations
//

inline _ApplicationPtr HPageBreaks::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator HPageBreaks::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr HPageBreaks::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long HPageBreaks::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HPageBreakPtr HPageBreaks::GetItem ( long Index ) {
    struct HPageBreak * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return HPageBreakPtr(_result, false);
}

inline HPageBreakPtr HPageBreaks::Get_Default ( long Index ) {
    struct HPageBreak * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return HPageBreakPtr(_result, false);
}

inline IUnknownPtr HPageBreaks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline HPageBreakPtr HPageBreaks::Add ( IDispatch * Before ) {
    struct HPageBreak * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0009", Before);
    return HPageBreakPtr(_result, false);
}

//
// dispinterface VPageBreaks wrapper method implementations
//

inline _ApplicationPtr VPageBreaks::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator VPageBreaks::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr VPageBreaks::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long VPageBreaks::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VPageBreakPtr VPageBreaks::GetItem ( long Index ) {
    struct VPageBreak * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return VPageBreakPtr(_result, false);
}

inline VPageBreakPtr VPageBreaks::Get_Default ( long Index ) {
    struct VPageBreak * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return VPageBreakPtr(_result, false);
}

inline IUnknownPtr VPageBreaks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline VPageBreakPtr VPageBreaks::Add ( IDispatch * Before ) {
    struct VPageBreak * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0009", Before);
    return VPageBreakPtr(_result, false);
}

//
// dispinterface RecentFile wrapper method implementations
//

inline _ApplicationPtr RecentFile::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator RecentFile::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr RecentFile::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t RecentFile::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t RecentFile::GetPath ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x123, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline long RecentFile::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _WorkbookPtr RecentFile::Open ( ) {
    struct _Workbook * _result = 0;
    _com_dispatch_method(this, 0x2aa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return _WorkbookPtr(_result, false);
}

inline HRESULT RecentFile::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface RecentFiles wrapper method implementations
//

inline _ApplicationPtr RecentFiles::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator RecentFiles::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr RecentFiles::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long RecentFiles::GetMaximum ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x58f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void RecentFiles::PutMaximum ( long _arg1 ) {
    _com_dispatch_method(this, 0x58f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long RecentFiles::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline RecentFilePtr RecentFiles::GetItem ( long Index ) {
    struct RecentFile * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return RecentFilePtr(_result, false);
}

inline RecentFilePtr RecentFiles::Get_Default ( long Index ) {
    struct RecentFile * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return RecentFilePtr(_result, false);
}

inline RecentFilePtr RecentFiles::Add ( _bstr_t Name ) {
    struct RecentFile * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008", (BSTR)Name);
    return RecentFilePtr(_result, false);
}

inline IUnknownPtr RecentFiles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface DocEvents wrapper method implementations
//

inline HRESULT DocEvents::SelectionChange ( struct Range * Target ) {
    return _com_dispatch_method(this, 0x607, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Target);
}

inline HRESULT DocEvents::BeforeDoubleClick ( struct Range * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x601, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Target, Cancel);
}

inline HRESULT DocEvents::BeforeRightClick ( struct Range * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x5fe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Target, Cancel);
}

inline HRESULT DocEvents::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DocEvents::Deactivate ( ) {
    return _com_dispatch_method(this, 0x5fa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DocEvents::Calculate ( ) {
    return _com_dispatch_method(this, 0x117, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DocEvents::Change ( struct Range * Target ) {
    return _com_dispatch_method(this, 0x609, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Target);
}

inline HRESULT DocEvents::FollowHyperlink ( struct Hyperlink * Target ) {
    return _com_dispatch_method(this, 0x5be, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Target);
}

//
// dispinterface Style wrapper method implementations
//

inline _ApplicationPtr Style::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Style::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Style::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Style::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Style::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline BordersPtr Style::GetBorders ( ) {
    struct Borders * _result = 0;
    _com_dispatch_method(this, 0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BordersPtr(_result, false);
}

inline _variant_t Style::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline FontPtr Style::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline VARIANT_BOOL Style::GetFormulaHidden ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x106, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutFormulaHidden ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x106, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum XlHAlign Style::GetHorizontalAlignment ( ) {
    enum XlHAlign _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutHorizontalAlignment ( enum XlHAlign _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL Style::GetIncludeAlignment ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x19d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutIncludeAlignment ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x19d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Style::GetIncludeBorder ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x19e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutIncludeBorder ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x19e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Style::GetIncludeFont ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x19f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutIncludeFont ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x19f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Style::GetIncludeNumber ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1a0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutIncludeNumber ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x1a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Style::GetIncludePatterns ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1a1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutIncludePatterns ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x1a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Style::GetIncludeProtection ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1a2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutIncludeProtection ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x1a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Style::GetIndentLevel ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xc9, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutIndentLevel ( long _arg1 ) {
    _com_dispatch_method(this, 0xc9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline InteriorPtr Style::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL Style::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Style::GetMergeCells ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Style::PutMergeCells ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xd0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Style::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t Style::GetNameLocal ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3a9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t Style::GetNumberFormat ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Style::PutNumberFormat ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Style::GetNumberFormatLocal ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Style::PutNumberFormatLocal ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline enum XlOrientation Style::GetOrientation ( ) {
    enum XlOrientation _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutOrientation ( enum XlOrientation _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL Style::GetShrinkToFit ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xd1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutShrinkToFit ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xd1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Style::GetValue ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline enum XlVAlign Style::GetVerticalAlignment ( ) {
    enum XlVAlign _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutVerticalAlignment ( enum XlVAlign _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL Style::GetWrapText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x114, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutWrapText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x114, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Style::Get_Default ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline long Style::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Style::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface Styles wrapper method implementations
//

inline _ApplicationPtr Styles::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Styles::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Styles::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline StylePtr Styles::Add ( _bstr_t Name, const _variant_t & BasedOn ) {
    struct Style * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c", (BSTR)Name, &BasedOn);
    return StylePtr(_result, false);
}

inline long Styles::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline StylePtr Styles::GetItem ( const _variant_t & Index ) {
    struct Style * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return StylePtr(_result, false);
}

inline _variant_t Styles::Merge ( const _variant_t & Workbook ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x234, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Workbook);
    return _variant_t(_result, false);
}

inline IUnknownPtr Styles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline StylePtr Styles::Get_Default ( const _variant_t & Index ) {
    struct Style * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return StylePtr(_result, false);
}

//
// dispinterface Borders wrapper method implementations
//

inline _ApplicationPtr Borders::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Borders::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Borders::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Borders::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Borders::PutColor ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Borders::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Borders::PutColorIndex ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long Borders::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline BorderPtr Borders::GetItem ( enum XlBordersIndex Index ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return BorderPtr(_result, false);
}

inline _variant_t Borders::GetLineStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x77, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Borders::PutLineStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x77, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline IUnknownPtr Borders::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline _variant_t Borders::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Borders::PutValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Borders::GetWeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x78, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Borders::PutWeight ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x78, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline BorderPtr Borders::Get_Default ( enum XlBordersIndex Index ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return BorderPtr(_result, false);
}

//
// dispinterface AddIn wrapper method implementations
//

inline _ApplicationPtr AddIn::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator AddIn::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr AddIn::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t AddIn::GetAuthor ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x23e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t AddIn::GetComments ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x23f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t AddIn::GetFullName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x121, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL AddIn::GetInstalled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x226, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void AddIn::PutInstalled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x226, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t AddIn::GetKeywords ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x241, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t AddIn::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t AddIn::GetPath ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x123, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t AddIn::GetSubject ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t AddIn::GetTitle ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0xc7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

//
// dispinterface AddIns wrapper method implementations
//

inline _ApplicationPtr AddIns::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator AddIns::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr AddIns::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline AddInPtr AddIns::Add ( _bstr_t Filename, const _variant_t & MSCopyFile ) {
    struct AddIn * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c", (BSTR)Filename, &MSCopyFile);
    return AddInPtr(_result, false);
}

inline long AddIns::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline AddInPtr AddIns::GetItem ( const _variant_t & Index ) {
    struct AddIn * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return AddInPtr(_result, false);
}

inline IUnknownPtr AddIns::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline AddInPtr AddIns::Get_Default ( const _variant_t & Index ) {
    struct AddIn * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return AddInPtr(_result, false);
}

//
// dispinterface Toolbar wrapper method implementations
//

inline _ApplicationPtr Toolbar::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Toolbar::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Toolbar::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Toolbar::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Toolbar::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline long Toolbar::GetHeight ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Toolbar::PutHeight ( long _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Toolbar::GetLeft ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Toolbar::PutLeft ( long _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t Toolbar::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline long Toolbar::GetPosition ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Toolbar::PutPosition ( long _arg1 ) {
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlToolbarProtection Toolbar::GetProtection ( ) {
    enum XlToolbarProtection _result;
    _com_dispatch_method(this, 0xb0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Toolbar::PutProtection ( enum XlToolbarProtection _arg1 ) {
    _com_dispatch_method(this, 0xb0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline HRESULT Toolbar::Reset ( ) {
    return _com_dispatch_method(this, 0x22b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline ToolbarButtonsPtr Toolbar::GetToolbarButtons ( ) {
    struct ToolbarButtons * _result = 0;
    _com_dispatch_method(this, 0x3c4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ToolbarButtonsPtr(_result, false);
}

inline long Toolbar::GetTop ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Toolbar::PutTop ( long _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL Toolbar::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Toolbar::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Toolbar::GetWidth ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Toolbar::PutWidth ( long _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface Toolbars wrapper method implementations
//

inline _ApplicationPtr Toolbars::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Toolbars::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Toolbars::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline ToolbarPtr Toolbars::Add ( const _variant_t & Name ) {
    struct Toolbar * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Name);
    return ToolbarPtr(_result, false);
}

inline long Toolbars::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ToolbarPtr Toolbars::Get_Default ( const _variant_t & Index ) {
    struct Toolbar * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ToolbarPtr(_result, false);
}

inline ToolbarPtr Toolbars::GetItem ( const _variant_t & Index ) {
    struct Toolbar * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ToolbarPtr(_result, false);
}

inline IUnknownPtr Toolbars::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface ToolbarButton wrapper method implementations
//

inline _ApplicationPtr ToolbarButton::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ToolbarButton::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ToolbarButton::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ToolbarButton::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL ToolbarButton::GetBuiltInFace ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ToolbarButton::PutBuiltInFace ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline HRESULT ToolbarButton::Copy ( struct Toolbar * Toolbar, long Before ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", Toolbar, Before);
}

inline HRESULT ToolbarButton::CopyFace ( ) {
    return _com_dispatch_method(this, 0x3c6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ToolbarButton::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ToolbarButton::Edit ( ) {
    return _com_dispatch_method(this, 0x232, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL ToolbarButton::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ToolbarButton::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long ToolbarButton::GetHelpContextID ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x163, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ToolbarButton::PutHelpContextID ( long _arg1 ) {
    _com_dispatch_method(this, 0x163, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t ToolbarButton::GetHelpFile ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x168, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ToolbarButton::PutHelpFile ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x168, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long ToolbarButton::GetID ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x23a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL ToolbarButton::GetIsGap ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x231, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline HRESULT ToolbarButton::Move ( struct Toolbar * Toolbar, long Before ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", Toolbar, Before);
}

inline _bstr_t ToolbarButton::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ToolbarButton::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t ToolbarButton::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ToolbarButton::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline HRESULT ToolbarButton::PasteFace ( ) {
    return _com_dispatch_method(this, 0x3c7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL ToolbarButton::GetPushed ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x230, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ToolbarButton::PutPushed ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x230, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline HRESULT ToolbarButton::Reset ( ) {
    return _com_dispatch_method(this, 0x22b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline _bstr_t ToolbarButton::GetStatusBar ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x182, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ToolbarButton::PutStatusBar ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x182, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long ToolbarButton::GetWidth ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ToolbarButton::PutWidth ( long _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface ToolbarButtons wrapper method implementations
//

inline _ApplicationPtr ToolbarButtons::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ToolbarButtons::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ToolbarButtons::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline ToolbarButtonPtr ToolbarButtons::Add ( const _variant_t & Button, const _variant_t & Before, const _variant_t & OnAction, const _variant_t & Pushed, const _variant_t & Enabled, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID ) {
    struct ToolbarButton * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Button, &Before, &OnAction, &Pushed, &Enabled, &StatusBar, &HelpFile, &HelpContextID);
    return ToolbarButtonPtr(_result, false);
}

inline long ToolbarButtons::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ToolbarButtonPtr ToolbarButtons::GetItem ( long Index ) {
    struct ToolbarButton * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return ToolbarButtonPtr(_result, false);
}

inline IUnknownPtr ToolbarButtons::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline ToolbarButtonPtr ToolbarButtons::Get_Default ( long Index ) {
    struct ToolbarButton * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return ToolbarButtonPtr(_result, false);
}

//
// dispinterface Areas wrapper method implementations
//

inline _ApplicationPtr Areas::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Areas::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Areas::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Areas::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline RangePtr Areas::GetItem ( long Index ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return RangePtr(_result, false);
}

inline IUnknownPtr Areas::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline RangePtr Areas::Get_Default ( long Index ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return RangePtr(_result, false);
}

//
// dispinterface WorkbookEvents wrapper method implementations
//

inline HRESULT WorkbookEvents::Open ( ) {
    return _com_dispatch_method(this, 0x2aa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT WorkbookEvents::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT WorkbookEvents::Deactivate ( ) {
    return _com_dispatch_method(this, 0x5fa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT WorkbookEvents::BeforeClose ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x60a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

inline HRESULT WorkbookEvents::BeforeSave ( VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x60b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b\x400b", SaveAsUI, Cancel);
}

inline HRESULT WorkbookEvents::BeforePrint ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x60d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

inline HRESULT WorkbookEvents::NewSheet ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x60e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

inline HRESULT WorkbookEvents::AddinInstall ( ) {
    return _com_dispatch_method(this, 0x610, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT WorkbookEvents::AddinUninstall ( ) {
    return _com_dispatch_method(this, 0x611, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT WorkbookEvents::WindowResize ( struct Window * Wn ) {
    return _com_dispatch_method(this, 0x612, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wn);
}

inline HRESULT WorkbookEvents::WindowActivate ( struct Window * Wn ) {
    return _com_dispatch_method(this, 0x614, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wn);
}

inline HRESULT WorkbookEvents::WindowDeactivate ( struct Window * Wn ) {
    return _com_dispatch_method(this, 0x615, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wn);
}

inline HRESULT WorkbookEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target ) {
    return _com_dispatch_method(this, 0x616, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

inline HRESULT WorkbookEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x617, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x400b", Sh, Target, Cancel);
}

inline HRESULT WorkbookEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x618, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x400b", Sh, Target, Cancel);
}

inline HRESULT WorkbookEvents::SheetActivate ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x619, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

inline HRESULT WorkbookEvents::SheetDeactivate ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x61a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

inline HRESULT WorkbookEvents::SheetCalculate ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x61b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

inline HRESULT WorkbookEvents::SheetChange ( IDispatch * Sh, struct Range * Target ) {
    return _com_dispatch_method(this, 0x61c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

inline HRESULT WorkbookEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target ) {
    return _com_dispatch_method(this, 0x73e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

//
// dispinterface MenuBars wrapper method implementations
//

inline _ApplicationPtr MenuBars::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator MenuBars::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr MenuBars::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline MenuBarPtr MenuBars::Add ( const _variant_t & Name ) {
    struct MenuBar * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Name);
    return MenuBarPtr(_result, false);
}

inline long MenuBars::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline MenuBarPtr MenuBars::Get_Default ( const _variant_t & Index ) {
    struct MenuBar * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return MenuBarPtr(_result, false);
}

inline MenuBarPtr MenuBars::GetItem ( const _variant_t & Index ) {
    struct MenuBar * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return MenuBarPtr(_result, false);
}

inline IUnknownPtr MenuBars::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface MenuBar wrapper method implementations
//

inline _ApplicationPtr MenuBar::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator MenuBar::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr MenuBar::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT MenuBar::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL MenuBar::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t MenuBar::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void MenuBar::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline HRESULT MenuBar::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline long MenuBar::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline MenusPtr MenuBar::GetMenus ( ) {
    struct Menus * _result = 0;
    _com_dispatch_method(this, 0x24f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return MenusPtr(_result, false);
}

inline HRESULT MenuBar::Reset ( ) {
    return _com_dispatch_method(this, 0x22b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface Menus wrapper method implementations
//

inline _ApplicationPtr Menus::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Menus::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Menus::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline MenuPtr Menus::Add ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore ) {
    struct Menu * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c\x080c", (BSTR)Caption, &Before, &Restore);
    return MenuPtr(_result, false);
}

inline long Menus::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline MenuPtr Menus::Get_Default ( const _variant_t & Index ) {
    struct Menu * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return MenuPtr(_result, false);
}

inline MenuPtr Menus::GetItem ( const _variant_t & Index ) {
    struct Menu * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return MenuPtr(_result, false);
}

inline IUnknownPtr Menus::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Menu wrapper method implementations
//

inline _ApplicationPtr Menu::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Menu::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Menu::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Menu::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Menu::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline HRESULT Menu::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL Menu::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Menu::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Menu::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline MenuItemsPtr Menu::GetMenuItems ( ) {
    struct MenuItems * _result = 0;
    _com_dispatch_method(this, 0x251, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return MenuItemsPtr(_result, false);
}

//
// dispinterface MenuItems wrapper method implementations
//

inline _ApplicationPtr MenuItems::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator MenuItems::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr MenuItems::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline MenuItemPtr MenuItems::Add ( _bstr_t Caption, const _variant_t & OnAction, const _variant_t & ShortcutKey, const _variant_t & Before, const _variant_t & Restore, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID ) {
    struct MenuItem * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c\x080c\x080c\x080c\x080c\x080c\x080c", (BSTR)Caption, &OnAction, &ShortcutKey, &Before, &Restore, &StatusBar, &HelpFile, &HelpContextID);
    return MenuItemPtr(_result, false);
}

inline MenuPtr MenuItems::AddMenu ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore ) {
    struct Menu * _result = 0;
    _com_dispatch_method(this, 0x256, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c\x080c", (BSTR)Caption, &Before, &Restore);
    return MenuPtr(_result, false);
}

inline long MenuItems::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr MenuItems::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr MenuItems::GetItem ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr MenuItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface MenuItem wrapper method implementations
//

inline _ApplicationPtr MenuItem::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator MenuItem::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr MenuItem::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t MenuItem::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void MenuItem::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL MenuItem::GetChecked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x257, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void MenuItem::PutChecked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x257, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline HRESULT MenuItem::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL MenuItem::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void MenuItem::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long MenuItem::GetHelpContextID ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x163, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void MenuItem::PutHelpContextID ( long _arg1 ) {
    _com_dispatch_method(this, 0x163, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t MenuItem::GetHelpFile ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x168, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void MenuItem::PutHelpFile ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x168, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long MenuItem::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t MenuItem::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void MenuItem::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t MenuItem::GetStatusBar ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x182, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void MenuItem::PutStatusBar ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x182, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface Charts wrapper method implementations
//

inline _ApplicationPtr Charts::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Charts::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Charts::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _ChartPtr Charts::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count ) {
    struct _Chart * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c", &Before, &After, &Count);
    return _ChartPtr(_result, false);
}

inline HRESULT Charts::Copy ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

inline long Charts::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Charts::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline IDispatchPtr Charts::GetItem ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline HRESULT Charts::Move ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

inline IUnknownPtr Charts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline HRESULT Charts::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
}

inline HRESULT Charts::PrintPreview ( const _variant_t & EnableChanges ) {
    return _com_dispatch_method(this, 0x119, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &EnableChanges);
}

inline HRESULT Charts::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

inline HPageBreaksPtr Charts::GetHPageBreaks ( ) {
    struct HPageBreaks * _result = 0;
    _com_dispatch_method(this, 0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HPageBreaksPtr(_result, false);
}

inline VPageBreaksPtr Charts::GetVPageBreaks ( ) {
    struct VPageBreaks * _result = 0;
    _com_dispatch_method(this, 0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return VPageBreaksPtr(_result, false);
}

inline _variant_t Charts::GetVisible ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Charts::PutVisible ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline IDispatchPtr Charts::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline HRESULT Charts::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    return _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
}

//
// dispinterface DrawingObjects wrapper method implementations
//

inline _ApplicationPtr DrawingObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DrawingObjects::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DrawingObjects::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t DrawingObjects::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DrawingObjects::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DrawingObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t DrawingObjects::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DrawingObjects::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr DrawingObjects::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL DrawingObjects::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double DrawingObjects::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double DrawingObjects::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL DrawingObjects::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t DrawingObjects::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DrawingObjects::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t DrawingObjects::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DrawingObjects::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DrawingObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DrawingObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t DrawingObjects::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double DrawingObjects::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL DrawingObjects::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double DrawingObjects::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long DrawingObjects::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr DrawingObjects::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _variant_t DrawingObjects::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DrawingObjects::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DrawingObjects::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DrawingObjects::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &Text, &Index);
    return _variant_t(_result, false);
}

inline _variant_t DrawingObjects::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DrawingObjects::PutArrowHeadLength ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t DrawingObjects::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DrawingObjects::PutArrowHeadStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t DrawingObjects::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DrawingObjects::PutArrowHeadWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DrawingObjects::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline BorderPtr DrawingObjects::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline VARIANT_BOOL DrawingObjects::GetCancelButton ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x35a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutCancelButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t DrawingObjects::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DrawingObjects::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr DrawingObjects::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t DrawingObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline long DrawingObjects::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL DrawingObjects::GetDefaultButton ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutDefaultButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DrawingObjects::GetDismissButton ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x35b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutDismissButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DrawingObjects::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DrawingObjects::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long DrawingObjects::GetDropDownLines ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutDropDownLines ( long _arg1 ) {
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline FontPtr DrawingObjects::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline VARIANT_BOOL DrawingObjects::GetHelpButton ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x35c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutHelpButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DrawingObjects::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DrawingObjects::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long DrawingObjects::GetInputType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x356, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutInputType ( long _arg1 ) {
    _com_dispatch_method(this, 0x356, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline InteriorPtr DrawingObjects::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline long DrawingObjects::GetLargeChange ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutLargeChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t DrawingObjects::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DrawingObjects::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t DrawingObjects::List ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x35d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline _bstr_t DrawingObjects::GetListFillRange ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DrawingObjects::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long DrawingObjects::GetListIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutListIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL DrawingObjects::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long DrawingObjects::GetMax ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutMax ( long _arg1 ) {
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long DrawingObjects::GetMin ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutMin ( long _arg1 ) {
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL DrawingObjects::GetMultiLine ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x357, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutMultiLine ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x357, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DrawingObjects::GetMultiSelect ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutMultiSelect ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DrawingObjects::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DrawingObjects::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t DrawingObjects::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DrawingObjects::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t DrawingObjects::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DrawingObjects::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c", Index, &Count);
    return _variant_t(_result, false);
}

inline _variant_t DrawingObjects::Reshape ( long Vertex, const _variant_t & Insert, const _variant_t & Left, const _variant_t & Top ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x000c\x080c\x080c", Vertex, &Insert, &Left, &Top);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL DrawingObjects::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DrawingObjects::Selected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x463, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL DrawingObjects::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long DrawingObjects::GetSmallChange ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutSmallChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t DrawingObjects::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DrawingObjects::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline IDispatchPtr DrawingObjects::Ungroup ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long DrawingObjects::GetValue ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t DrawingObjects::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DrawingObjects::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t DrawingObjects::Vertices ( const _variant_t & Index1, const _variant_t & Index2 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x26d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &Index1, &Index2);
    return _variant_t(_result, false);
}

inline long DrawingObjects::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DrawingObjects::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long DrawingObjects::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DrawingObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline GroupObjectPtr DrawingObjects::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline _variant_t DrawingObjects::LinkCombo ( const _variant_t & Link ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x358, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Link);
    return _variant_t(_result, false);
}

inline IUnknownPtr DrawingObjects::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface PivotCache wrapper method implementations
//

inline _ApplicationPtr PivotCache::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PivotCache::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PivotCache::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL PivotCache::GetBackgroundQuery ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x593, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotCache::PutBackgroundQuery ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x593, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t PivotCache::GetConnection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x598, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PivotCache::PutConnection ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x598, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL PivotCache::GetEnableRefresh ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5c5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotCache::PutEnableRefresh ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long PivotCache::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long PivotCache::GetMemoryUsed ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x174, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL PivotCache::GetOptimizeCache ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x594, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotCache::PutOptimizeCache ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x594, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long PivotCache::GetRecordCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x5c6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT PivotCache::Refresh ( ) {
    return _com_dispatch_method(this, 0x589, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline DATE PivotCache::GetRefreshDate ( ) {
    DATE _result = 0;
    _com_dispatch_method(this, 0x2b8, DISPATCH_PROPERTYGET, VT_DATE, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t PivotCache::GetRefreshName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x2b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL PivotCache::GetRefreshOnFileOpen ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5c7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotCache::PutRefreshOnFileOpen ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t PivotCache::GetSql ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5c8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PivotCache::PutSql ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL PivotCache::GetSavePassword ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5c9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotCache::PutSavePassword ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t PivotCache::GetSourceData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PivotCache::PutSourceData ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x2ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t PivotCache::GetCommandText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x725, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PivotCache::PutCommandText ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x725, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline enum XlCmdType PivotCache::GetCommandType ( ) {
    enum XlCmdType _result;
    _com_dispatch_method(this, 0x726, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotCache::PutCommandType ( enum XlCmdType _arg1 ) {
    _com_dispatch_method(this, 0x726, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum xlQueryType PivotCache::GetQueryType ( ) {
    enum xlQueryType _result;
    _com_dispatch_method(this, 0x727, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL PivotCache::GetMaintainConnection ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x728, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotCache::PutMaintainConnection ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x728, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long PivotCache::GetRefreshPeriod ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x729, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotCache::PutRefreshPeriod ( long _arg1 ) {
    _com_dispatch_method(this, 0x729, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline IDispatchPtr PivotCache::GetRecordset ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x48d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline void PivotCache::PutRefRecordset ( IDispatch * _arg1 ) {
    _com_dispatch_method(this, 0x48d, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

inline HRESULT PivotCache::ResetTimer ( ) {
    return _com_dispatch_method(this, 0x72a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline _variant_t PivotCache::GetLocalConnection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x72b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PivotCache::PutLocalConnection ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x72b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline PivotTablePtr PivotCache::CreatePivotTable ( const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData ) {
    struct PivotTable * _result = 0;
    _com_dispatch_method(this, 0x72c, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c\x080c\x080c", &TableDestination, &TableName, &ReadData);
    return PivotTablePtr(_result, false);
}

inline VARIANT_BOOL PivotCache::GetUseLocalConnection ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x72d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotCache::PutUseLocalConnection ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x72d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface PivotCaches wrapper method implementations
//

inline _ApplicationPtr PivotCaches::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PivotCaches::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PivotCaches::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long PivotCaches::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline PivotCachePtr PivotCaches::Item ( const _variant_t & Index ) {
    struct PivotCache * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotCachePtr(_result, false);
}

inline PivotCachePtr PivotCaches::Get_Default ( const _variant_t & Index ) {
    struct PivotCache * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotCachePtr(_result, false);
}

inline IUnknownPtr PivotCaches::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline PivotCachePtr PivotCaches::Add ( enum XlPivotTableSourceType SourceType, const _variant_t & SourceData ) {
    struct PivotCache * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x080c", SourceType, &SourceData);
    return PivotCachePtr(_result, false);
}

//
// dispinterface PivotFormula wrapper method implementations
//

inline _ApplicationPtr PivotFormula::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PivotFormula::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PivotFormula::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT PivotFormula::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline _bstr_t PivotFormula::Get_Default ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotFormula::Put_Default ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t PivotFormula::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotFormula::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t PivotFormula::GetValue ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotFormula::PutValue ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long PivotFormula::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotFormula::PutIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface PivotFormulas wrapper method implementations
//

inline _ApplicationPtr PivotFormulas::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PivotFormulas::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PivotFormulas::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long PivotFormulas::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline PivotFormulaPtr PivotFormulas::Add ( _bstr_t Formula ) {
    struct PivotFormula * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008", (BSTR)Formula);
    return PivotFormulaPtr(_result, false);
}

inline PivotFormulaPtr PivotFormulas::Item ( const _variant_t & Index ) {
    struct PivotFormula * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotFormulaPtr(_result, false);
}

inline PivotFormulaPtr PivotFormulas::Get_Default ( const _variant_t & Index ) {
    struct PivotFormula * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotFormulaPtr(_result, false);
}

inline IUnknownPtr PivotFormulas::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface PivotTable wrapper method implementations
//

inline _ApplicationPtr PivotTable::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PivotTable::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PivotTable::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t PivotTable::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AddToTable ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2c4, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &RowFields, &ColumnFields, &PageFields, &AddToTable);
    return _variant_t(_result, false);
}

inline IDispatchPtr PivotTable::GetColumnFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2c9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL PivotTable::GetColumnGrand ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2b6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutColumnGrand ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2b6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline RangePtr PivotTable::GetColumnRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x2be, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t PivotTable::ShowPages ( const _variant_t & PageField ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2c2, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &PageField);
    return _variant_t(_result, false);
}

inline RangePtr PivotTable::GetDataBodyRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x2c1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline IDispatchPtr PivotTable::GetDataFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2cb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline RangePtr PivotTable::GetDataLabelRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x2c0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _bstr_t PivotTable::Get_Default ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotTable::Put_Default ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL PivotTable::GetHasAutoFormat ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2b7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutHasAutoFormat ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline IDispatchPtr PivotTable::GetHiddenFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2c7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline _bstr_t PivotTable::GetInnerDetail ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x2ba, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotTable::PutInnerDetail ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x2ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t PivotTable::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotTable::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline IDispatchPtr PivotTable::GetPageFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2ca, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline RangePtr PivotTable::GetPageRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x2bf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline RangePtr PivotTable::GetPageRangeCells ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x5ca, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline IDispatchPtr PivotTable::PivotFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2ce, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline DATE PivotTable::GetRefreshDate ( ) {
    DATE _result = 0;
    _com_dispatch_method(this, 0x2b8, DISPATCH_PROPERTYGET, VT_DATE, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t PivotTable::GetRefreshName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x2b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL PivotTable::RefreshTable ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2cd, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PivotTable::GetRowFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2c8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL PivotTable::GetRowGrand ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2b5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutRowGrand ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2b5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline RangePtr PivotTable::GetRowRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x2bd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL PivotTable::GetSaveData ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2b4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutSaveData ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2b4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t PivotTable::GetSourceData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PivotTable::PutSourceData ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x2ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline RangePtr PivotTable::GetTableRange1 ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x2bb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline RangePtr PivotTable::GetTableRange2 ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x2bc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _bstr_t PivotTable::GetValue ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotTable::PutValue ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline IDispatchPtr PivotTable::GetVisibleFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2c6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline long PivotTable::GetCacheIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x5cb, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutCacheIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x5cb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline CalculatedFieldsPtr PivotTable::CalculatedFields ( ) {
    struct CalculatedFields * _result = 0;
    _com_dispatch_method(this, 0x5cc, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return CalculatedFieldsPtr(_result, false);
}

inline VARIANT_BOOL PivotTable::GetDisplayErrorString ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5cd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutDisplayErrorString ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PivotTable::GetDisplayNullString ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5ce, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutDisplayNullString ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PivotTable::GetEnableDrilldown ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5cf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutEnableDrilldown ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PivotTable::GetEnableFieldDialog ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5d0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutEnableFieldDialog ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PivotTable::GetEnableWizard ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5d1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutEnableWizard ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t PivotTable::GetErrorString ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5d2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotTable::PutErrorString ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline double PivotTable::GetData ( _bstr_t Name ) {
    double _result = 0;
    _com_dispatch_method(this, 0x5d3, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0008", (BSTR)Name);
    return _result;
}

inline HRESULT PivotTable::ListFormulas ( ) {
    return _com_dispatch_method(this, 0x5d4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL PivotTable::GetManualUpdate ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutManualUpdate ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PivotTable::GetMergeLabels ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5d6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutMergeLabels ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t PivotTable::GetNullString ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5d7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotTable::PutNullString ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline PivotCachePtr PivotTable::PivotCache ( ) {
    struct PivotCache * _result = 0;
    _com_dispatch_method(this, 0x5d8, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return PivotCachePtr(_result, false);
}

inline PivotFormulasPtr PivotTable::GetPivotFormulas ( ) {
    struct PivotFormulas * _result = 0;
    _com_dispatch_method(this, 0x5d9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFormulasPtr(_result, false);
}

inline HRESULT PivotTable::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection ) {
    return _com_dispatch_method(this, 0x2ac, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &SourceType, &SourceData, &TableDestination, &TableName, &RowGrand, &ColumnGrand, &SaveData, &HasAutoFormat, &AutoPage, &Reserved, &BackgroundQuery, &OptimizeCache, &PageFieldOrder, &PageFieldWrapCount, &ReadData, &Connection);
}

inline VARIANT_BOOL PivotTable::GetSubtotalHiddenPageItems ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5da, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutSubtotalHiddenPageItems ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long PivotTable::GetPageFieldOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x595, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutPageFieldOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x595, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t PivotTable::GetPageFieldStyle ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5db, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotTable::PutPageFieldStyle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long PivotTable::GetPageFieldWrapCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x596, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutPageFieldWrapCount ( long _arg1 ) {
    _com_dispatch_method(this, 0x596, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL PivotTable::GetPreserveFormatting ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5dc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutPreserveFormatting ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline HRESULT PivotTable::PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode ) {
    return _com_dispatch_method(this, 0x5dd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0003", (BSTR)Name, Mode);
}

inline _bstr_t PivotTable::GetPivotSelection ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5de, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotTable::PutPivotSelection ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline enum XlPTSelectionMode PivotTable::GetSelectionMode ( ) {
    enum XlPTSelectionMode _result;
    _com_dispatch_method(this, 0x5df, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutSelectionMode ( enum XlPTSelectionMode _arg1 ) {
    _com_dispatch_method(this, 0x5df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t PivotTable::GetTableStyle ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5e0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotTable::PutTableStyle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t PivotTable::GetTag ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5e1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotTable::PutTag ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5e1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline HRESULT PivotTable::Update ( ) {
    return _com_dispatch_method(this, 0x2a8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline _bstr_t PivotTable::GetVacatedStyle ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5e2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotTable::PutVacatedStyle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline HRESULT PivotTable::Format ( enum xlPivotFormatType Format ) {
    return _com_dispatch_method(this, 0x74, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Format);
}

inline VARIANT_BOOL PivotTable::GetPrintTitles ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x72e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutPrintTitles ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x72e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline CubeFieldsPtr PivotTable::GetCubeFields ( ) {
    struct CubeFields * _result = 0;
    _com_dispatch_method(this, 0x72f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CubeFieldsPtr(_result, false);
}

inline _bstr_t PivotTable::GetGrandTotalName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x730, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotTable::PutGrandTotalName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x730, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL PivotTable::GetSmallGrid ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x731, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutSmallGrid ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x731, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PivotTable::GetRepeatItemsOnEachPrintedPage ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x732, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutRepeatItemsOnEachPrintedPage ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x732, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PivotTable::GetTotalsAnnotation ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x733, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotTable::PutTotalsAnnotation ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x733, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface PivotTables wrapper method implementations
//

inline _ApplicationPtr PivotTables::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PivotTables::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PivotTables::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long PivotTables::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline PivotTablePtr PivotTables::Item ( const _variant_t & Index ) {
    struct PivotTable * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotTablePtr(_result, false);
}

inline IUnknownPtr PivotTables::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline PivotTablePtr PivotTables::Add ( struct PivotCache * PivotCache, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData ) {
    struct PivotTable * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0009\x000c\x080c\x080c", PivotCache, &TableDestination, &TableName, &ReadData);
    return PivotTablePtr(_result, false);
}

//
// dispinterface PivotField wrapper method implementations
//

inline _ApplicationPtr PivotField::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PivotField::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PivotField::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline enum XlPivotFieldCalculation PivotField::GetCalculation ( ) {
    enum XlPivotFieldCalculation _result;
    _com_dispatch_method(this, 0x13c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutCalculation ( enum XlPivotFieldCalculation _arg1 ) {
    _com_dispatch_method(this, 0x13c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline PivotFieldPtr PivotField::GetChildField ( ) {
    struct PivotField * _result = 0;
    _com_dispatch_method(this, 0x2e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

inline _variant_t PivotField::GetChildItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2da, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline _variant_t PivotField::GetCurrentPage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2e2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PivotField::PutCurrentPage ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x2e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline RangePtr PivotField::GetDataRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x2d0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline enum XlPivotFieldDataType PivotField::GetDataType ( ) {
    enum XlPivotFieldDataType _result;
    _com_dispatch_method(this, 0x2d2, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t PivotField::Get_Default ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotField::Put_Default ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline enum XlConsolidationFunction PivotField::GetFunction ( ) {
    enum XlConsolidationFunction _result;
    _com_dispatch_method(this, 0x383, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutFunction ( enum XlConsolidationFunction _arg1 ) {
    _com_dispatch_method(this, 0x383, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t PivotField::GetGroupLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2d3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t PivotField::GetHiddenItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2d8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline RangePtr PivotField::GetLabelRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x2cf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _bstr_t PivotField::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotField::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t PivotField::GetNumberFormat ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotField::PutNumberFormat ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline enum XlPivotFieldOrientation PivotField::GetOrientation ( ) {
    enum XlPivotFieldOrientation _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutOrientation ( enum XlPivotFieldOrientation _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL PivotField::GetShowAllItems ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1c4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutShowAllItems ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x1c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline PivotFieldPtr PivotField::GetParentField ( ) {
    struct PivotField * _result = 0;
    _com_dispatch_method(this, 0x2dc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

inline _variant_t PivotField::GetParentItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2d9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline _variant_t PivotField::PivotItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2e1, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline _variant_t PivotField::GetPosition ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PivotField::PutPosition ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t PivotField::GetSourceName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x2d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t PivotField::GetSubtotals ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2dd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline void PivotField::PutSubtotals ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x2dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

inline _variant_t PivotField::GetBaseField ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2de, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PivotField::PutBaseField ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x2de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t PivotField::GetBaseItem ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2df, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PivotField::PutBaseItem ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x2df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t PivotField::GetTotalLevels ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2d4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _bstr_t PivotField::GetValue ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotField::PutValue ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t PivotField::GetVisibleItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2d7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline CalculatedItemsPtr PivotField::CalculatedItems ( ) {
    struct CalculatedItems * _result = 0;
    _com_dispatch_method(this, 0x5e3, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return CalculatedItemsPtr(_result, false);
}

inline HRESULT PivotField::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL PivotField::GetDragToColumn ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5e4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutDragToColumn ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PivotField::GetDragToHide ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5e5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutDragToHide ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PivotField::GetDragToPage ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5e6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutDragToPage ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PivotField::GetDragToRow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5e7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutDragToRow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PivotField::GetDragToData ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x734, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutDragToData ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x734, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t PivotField::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotField::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL PivotField::GetIsCalculated ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5e8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline long PivotField::GetMemoryUsed ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x174, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL PivotField::GetServerBased ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5e9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutServerBased ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline HRESULT PivotField::AutoSort ( long Order, _bstr_t Field ) {
    return _com_dispatch_method(this, 0x5ea, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008", Order, (BSTR)Field);
}

inline HRESULT PivotField::AutoShow ( long Type, long Range, long Count, _bstr_t Field ) {
    return _com_dispatch_method(this, 0x5eb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0008", Type, Range, Count, (BSTR)Field);
}

inline long PivotField::GetAutoSortOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x5ec, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t PivotField::GetAutoSortField ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5ed, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline long PivotField::GetAutoShowType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x5ee, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long PivotField::GetAutoShowRange ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x5ef, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long PivotField::GetAutoShowCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x5f0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t PivotField::GetAutoShowField ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5f1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL PivotField::GetLayoutBlankLine ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x735, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutLayoutBlankLine ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x735, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum xLSubtototalLocationType PivotField::GetLayoutSubtotalLocation ( ) {
    enum xLSubtototalLocationType _result;
    _com_dispatch_method(this, 0x736, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutLayoutSubtotalLocation ( enum xLSubtototalLocationType _arg1 ) {
    _com_dispatch_method(this, 0x736, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL PivotField::GetLayoutPageBreak ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x737, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutLayoutPageBreak ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x737, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum XlLayoutFormType PivotField::GetLayoutForm ( ) {
    enum XlLayoutFormType _result;
    _com_dispatch_method(this, 0x738, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutLayoutForm ( enum XlLayoutFormType _arg1 ) {
    _com_dispatch_method(this, 0x738, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t PivotField::GetSubtotalName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x739, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotField::PutSubtotalName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x739, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t PivotField::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotField::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL PivotField::GetDrilledDown ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x73a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotField::PutDrilledDown ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x73a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline CubeFieldPtr PivotField::GetCubeField ( ) {
    struct CubeField * _result = 0;
    _com_dispatch_method(this, 0x73b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CubeFieldPtr(_result, false);
}

inline _bstr_t PivotField::GetCurrentPageName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x73c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotField::PutCurrentPageName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x73c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface PivotFields wrapper method implementations
//

inline _ApplicationPtr PivotFields::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PivotFields::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline PivotTablePtr PivotFields::GetParent ( ) {
    struct PivotTable * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotTablePtr(_result, false);
}

inline long PivotFields::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PivotFields::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr PivotFields::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface CalculatedFields wrapper method implementations
//

inline _ApplicationPtr CalculatedFields::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator CalculatedFields::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr CalculatedFields::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long CalculatedFields::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline PivotFieldPtr CalculatedFields::Add ( _bstr_t Name, _bstr_t Formula ) {
    struct PivotField * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x0008", (BSTR)Name, (BSTR)Formula);
    return PivotFieldPtr(_result, false);
}

inline PivotFieldPtr CalculatedFields::Item ( const _variant_t & Index ) {
    struct PivotField * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotFieldPtr(_result, false);
}

inline PivotFieldPtr CalculatedFields::Get_Default ( const _variant_t & Field ) {
    struct PivotField * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Field);
    return PivotFieldPtr(_result, false);
}

inline IUnknownPtr CalculatedFields::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface PivotItem wrapper method implementations
//

inline _ApplicationPtr PivotItem::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PivotItem::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline PivotFieldPtr PivotItem::GetParent ( ) {
    struct PivotField * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

inline _variant_t PivotItem::GetChildItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2da, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline RangePtr PivotItem::GetDataRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x2d0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _bstr_t PivotItem::Get_Default ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotItem::Put_Default ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline RangePtr PivotItem::GetLabelRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x2cf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _bstr_t PivotItem::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotItem::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline PivotItemPtr PivotItem::GetParentItem ( ) {
    struct PivotItem * _result = 0;
    _com_dispatch_method(this, 0x2e5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotItemPtr(_result, false);
}

inline VARIANT_BOOL PivotItem::GetParentShowDetail ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2e3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline long PivotItem::GetPosition ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PivotItem::PutPosition ( long _arg1 ) {
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL PivotItem::GetShowDetail ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x249, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotItem::PutShowDetail ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x249, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t PivotItem::GetSourceName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x2d1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _bstr_t PivotItem::GetValue ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotItem::PutValue ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL PivotItem::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotItem::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline HRESULT PivotItem::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL PivotItem::GetIsCalculated ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5e8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline long PivotItem::GetRecordCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x5c6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t PivotItem::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotItem::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t PivotItem::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotItem::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL PivotItem::GetDrilledDown ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x73a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PivotItem::PutDrilledDown ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x73a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface PivotItems wrapper method implementations
//

inline _ApplicationPtr PivotItems::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PivotItems::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline PivotFieldPtr PivotItems::GetParent ( ) {
    struct PivotField * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

inline HRESULT PivotItems::Add ( _bstr_t Name ) {
    return _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Name);
}

inline long PivotItems::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PivotItems::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr PivotItems::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface CalculatedItems wrapper method implementations
//

inline _ApplicationPtr CalculatedItems::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator CalculatedItems::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr CalculatedItems::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long CalculatedItems::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline PivotItemPtr CalculatedItems::Add ( _bstr_t Name, _bstr_t Formula ) {
    struct PivotItem * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x0008", (BSTR)Name, (BSTR)Formula);
    return PivotItemPtr(_result, false);
}

inline PivotItemPtr CalculatedItems::Item ( const _variant_t & Index ) {
    struct PivotItem * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotItemPtr(_result, false);
}

inline PivotItemPtr CalculatedItems::Get_Default ( const _variant_t & Field ) {
    struct PivotItem * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Field);
    return PivotItemPtr(_result, false);
}

inline IUnknownPtr CalculatedItems::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Characters wrapper method implementations
//

inline _ApplicationPtr Characters::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Characters::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Characters::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Characters::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Characters::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long Characters::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _variant_t Characters::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline FontPtr Characters::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _variant_t Characters::Insert ( _bstr_t String ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xfc, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0008", (BSTR)String);
    return _variant_t(_result, false);
}

inline _bstr_t Characters::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Characters::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Characters::GetPhoneticCharacters ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5f2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Characters::PutPhoneticCharacters ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5f2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface Dialogs wrapper method implementations
//

inline _ApplicationPtr Dialogs::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Dialogs::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Dialogs::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Dialogs::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline DialogPtr Dialogs::GetItem ( enum XlBuiltInDialog Index ) {
    struct Dialog * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return DialogPtr(_result, false);
}

inline DialogPtr Dialogs::Get_Default ( enum XlBuiltInDialog Index ) {
    struct Dialog * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return DialogPtr(_result, false);
}

inline IUnknownPtr Dialogs::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Dialog wrapper method implementations
//

inline _ApplicationPtr Dialog::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Dialog::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Dialog::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Dialog::Show ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1f0, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

//
// dispinterface SoundNote wrapper method implementations
//

inline _ApplicationPtr SoundNote::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator SoundNote::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr SoundNote::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t SoundNote::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t SoundNote::Import ( _bstr_t Filename ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x395, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0008", (BSTR)Filename);
    return _variant_t(_result, false);
}

inline _variant_t SoundNote::Play ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x396, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t SoundNote::Record ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x397, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface Button wrapper method implementations
//

inline _ApplicationPtr Button::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Button::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Button::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr Button::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Button::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Button::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Button::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Button::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Button::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Button::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Button::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Button::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Button::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double Button::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Button::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Button::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Button::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Button::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Button::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Button::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Button::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Button::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Button::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Button::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Button::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr Button::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL Button::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Button::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Button::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Button::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL Button::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Button::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Button::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Button::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Button::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Button::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr Button::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Button::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline FontPtr Button::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t Button::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Button::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Button::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Button::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Button::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Button::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Button::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Button::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Button::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Button::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Button::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long Button::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t Button::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Button::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Button::GetCancelButton ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x35a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutCancelButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Button::GetDefaultButton ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutDefaultButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Button::GetDismissButton ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x35b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutDismissButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Button::GetHelpButton ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x35c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Button::PutHelpButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Button::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Button::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface Buttons wrapper method implementations
//

inline _ApplicationPtr Buttons::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Buttons::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Buttons::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Buttons::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Buttons::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Buttons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Buttons::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Buttons::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Buttons::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Buttons::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Buttons::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Buttons::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Buttons::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Buttons::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Buttons::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Buttons::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Buttons::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Buttons::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Buttons::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Buttons::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Buttons::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Buttons::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Buttons::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Buttons::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Buttons::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL Buttons::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Buttons::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Buttons::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Buttons::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Buttons::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Buttons::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr Buttons::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Buttons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline FontPtr Buttons::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t Buttons::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Buttons::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Buttons::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Buttons::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Buttons::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Buttons::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Buttons::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Buttons::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Buttons::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Buttons::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Buttons::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long Buttons::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t Buttons::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Buttons::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Buttons::GetCancelButton ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x35a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutCancelButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Buttons::GetDefaultButton ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutDefaultButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Buttons::GetDismissButton ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x35b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutDismissButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Buttons::GetHelpButton ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x35c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Buttons::PutHelpButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Buttons::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Buttons::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline ButtonPtr Buttons::Add ( double Left, double Top, double Width, double Height ) {
    struct Button * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return ButtonPtr(_result, false);
}

inline long Buttons::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr Buttons::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr Buttons::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr Buttons::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface CheckBox wrapper method implementations
//

inline _ApplicationPtr CheckBox::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator CheckBox::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr CheckBox::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr CheckBox::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t CheckBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t CheckBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t CheckBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t CheckBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t CheckBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr CheckBox::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL CheckBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void CheckBox::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double CheckBox::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void CheckBox::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long CheckBox::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double CheckBox::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void CheckBox::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL CheckBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void CheckBox::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t CheckBox::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void CheckBox::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t CheckBox::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void CheckBox::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t CheckBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void CheckBox::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL CheckBox::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void CheckBox::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t CheckBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t CheckBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double CheckBox::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void CheckBox::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr CheckBox::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL CheckBox::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void CheckBox::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double CheckBox::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void CheckBox::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long CheckBox::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr CheckBox::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _bstr_t CheckBox::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void CheckBox::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr CheckBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t CheckBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL CheckBox::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void CheckBox::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t CheckBox::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void CheckBox::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t CheckBox::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void CheckBox::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline BorderPtr CheckBox::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline long CheckBox::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void CheckBox::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL CheckBox::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void CheckBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline InteriorPtr CheckBox::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline _bstr_t CheckBox::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void CheckBox::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t CheckBox::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void CheckBox::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t CheckBox::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void CheckBox::PutValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface CheckBoxes wrapper method implementations
//

inline _ApplicationPtr CheckBoxes::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator CheckBoxes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr CheckBoxes::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t CheckBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t CheckBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t CheckBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t CheckBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t CheckBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr CheckBoxes::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL CheckBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void CheckBoxes::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double CheckBoxes::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void CheckBoxes::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double CheckBoxes::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void CheckBoxes::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL CheckBoxes::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void CheckBoxes::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t CheckBoxes::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void CheckBoxes::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t CheckBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void CheckBoxes::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL CheckBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void CheckBoxes::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t CheckBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t CheckBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double CheckBoxes::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void CheckBoxes::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL CheckBoxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void CheckBoxes::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double CheckBoxes::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void CheckBoxes::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long CheckBoxes::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr CheckBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _bstr_t CheckBoxes::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void CheckBoxes::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr CheckBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t CheckBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL CheckBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void CheckBoxes::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t CheckBoxes::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void CheckBoxes::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t CheckBoxes::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void CheckBoxes::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline BorderPtr CheckBoxes::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline long CheckBoxes::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void CheckBoxes::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL CheckBoxes::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void CheckBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline InteriorPtr CheckBoxes::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline _bstr_t CheckBoxes::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void CheckBoxes::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t CheckBoxes::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void CheckBoxes::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t CheckBoxes::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void CheckBoxes::PutValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline CheckBoxPtr CheckBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct CheckBox * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return CheckBoxPtr(_result, false);
}

inline long CheckBoxes::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr CheckBoxes::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr CheckBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr CheckBoxes::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface OptionButton wrapper method implementations
//

inline _ApplicationPtr OptionButton::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator OptionButton::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr OptionButton::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr OptionButton::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t OptionButton::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t OptionButton::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t OptionButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t OptionButton::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t OptionButton::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr OptionButton::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL OptionButton::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OptionButton::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double OptionButton::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void OptionButton::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long OptionButton::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double OptionButton::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void OptionButton::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL OptionButton::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OptionButton::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t OptionButton::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void OptionButton::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t OptionButton::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void OptionButton::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t OptionButton::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void OptionButton::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL OptionButton::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OptionButton::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t OptionButton::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t OptionButton::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double OptionButton::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void OptionButton::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr OptionButton::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL OptionButton::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OptionButton::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double OptionButton::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void OptionButton::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long OptionButton::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr OptionButton::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _bstr_t OptionButton::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void OptionButton::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr OptionButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t OptionButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL OptionButton::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OptionButton::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t OptionButton::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void OptionButton::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t OptionButton::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void OptionButton::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline BorderPtr OptionButton::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline long OptionButton::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void OptionButton::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL OptionButton::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OptionButton::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline InteriorPtr OptionButton::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline _bstr_t OptionButton::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void OptionButton::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t OptionButton::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void OptionButton::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t OptionButton::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void OptionButton::PutValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline GroupBoxPtr OptionButton::GetGroupBox ( ) {
    struct GroupBox * _result = 0;
    _com_dispatch_method(this, 0x341, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GroupBoxPtr(_result, false);
}

//
// dispinterface OptionButtons wrapper method implementations
//

inline _ApplicationPtr OptionButtons::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator OptionButtons::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr OptionButtons::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t OptionButtons::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t OptionButtons::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t OptionButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t OptionButtons::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t OptionButtons::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr OptionButtons::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL OptionButtons::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OptionButtons::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double OptionButtons::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void OptionButtons::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double OptionButtons::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void OptionButtons::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL OptionButtons::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OptionButtons::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t OptionButtons::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void OptionButtons::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t OptionButtons::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void OptionButtons::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL OptionButtons::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OptionButtons::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t OptionButtons::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t OptionButtons::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double OptionButtons::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void OptionButtons::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL OptionButtons::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OptionButtons::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double OptionButtons::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void OptionButtons::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long OptionButtons::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr OptionButtons::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _bstr_t OptionButtons::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void OptionButtons::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr OptionButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t OptionButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL OptionButtons::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OptionButtons::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t OptionButtons::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void OptionButtons::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t OptionButtons::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void OptionButtons::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline BorderPtr OptionButtons::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline long OptionButtons::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void OptionButtons::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL OptionButtons::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OptionButtons::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline InteriorPtr OptionButtons::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline _bstr_t OptionButtons::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void OptionButtons::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t OptionButtons::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void OptionButtons::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t OptionButtons::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void OptionButtons::PutValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline GroupBoxPtr OptionButtons::GetGroupBox ( ) {
    struct GroupBox * _result = 0;
    _com_dispatch_method(this, 0x341, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GroupBoxPtr(_result, false);
}

inline OptionButtonPtr OptionButtons::Add ( double Left, double Top, double Width, double Height ) {
    struct OptionButton * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return OptionButtonPtr(_result, false);
}

inline long OptionButtons::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr OptionButtons::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr OptionButtons::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr OptionButtons::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface EditBox wrapper method implementations
//

inline _ApplicationPtr EditBox::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator EditBox::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr EditBox::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr EditBox::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t EditBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t EditBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t EditBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t EditBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t EditBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr EditBox::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL EditBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double EditBox::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long EditBox::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double EditBox::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL EditBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t EditBox::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void EditBox::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t EditBox::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void EditBox::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t EditBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void EditBox::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL EditBox::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t EditBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t EditBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double EditBox::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr EditBox::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL EditBox::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double EditBox::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long EditBox::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr EditBox::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _bstr_t EditBox::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void EditBox::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr EditBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t EditBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL EditBox::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t EditBox::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void EditBox::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL EditBox::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long EditBox::GetInputType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x356, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutInputType ( long _arg1 ) {
    _com_dispatch_method(this, 0x356, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t EditBox::GetLinkedObject ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x35e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL EditBox::GetMultiLine ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x357, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutMultiLine ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x357, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL EditBox::GetPasswordEdit ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x48a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBox::PutPasswordEdit ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x48a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface EditBoxes wrapper method implementations
//

inline _ApplicationPtr EditBoxes::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator EditBoxes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr EditBoxes::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t EditBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t EditBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t EditBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t EditBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t EditBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr EditBoxes::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL EditBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double EditBoxes::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double EditBoxes::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL EditBoxes::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t EditBoxes::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void EditBoxes::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t EditBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void EditBoxes::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL EditBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t EditBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t EditBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double EditBoxes::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL EditBoxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double EditBoxes::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long EditBoxes::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr EditBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _bstr_t EditBoxes::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void EditBoxes::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr EditBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t EditBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL EditBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t EditBoxes::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void EditBoxes::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL EditBoxes::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long EditBoxes::GetInputType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x356, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutInputType ( long _arg1 ) {
    _com_dispatch_method(this, 0x356, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL EditBoxes::GetMultiLine ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x357, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutMultiLine ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x357, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL EditBoxes::GetPasswordEdit ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x48a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void EditBoxes::PutPasswordEdit ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x48a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline EditBoxPtr EditBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct EditBox * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return EditBoxPtr(_result, false);
}

inline long EditBoxes::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr EditBoxes::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline _variant_t EditBoxes::Item ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Index);
    return _variant_t(_result, false);
}

inline IUnknownPtr EditBoxes::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface ScrollBar wrapper method implementations
//

inline _ApplicationPtr ScrollBar::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ScrollBar::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ScrollBar::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr ScrollBar::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t ScrollBar::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ScrollBar::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ScrollBar::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t ScrollBar::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ScrollBar::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr ScrollBar::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ScrollBar::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double ScrollBar::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long ScrollBar::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double ScrollBar::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL ScrollBar::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t ScrollBar::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ScrollBar::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t ScrollBar::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ScrollBar::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t ScrollBar::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void ScrollBar::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL ScrollBar::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t ScrollBar::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t ScrollBar::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double ScrollBar::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr ScrollBar::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL ScrollBar::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double ScrollBar::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long ScrollBar::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr ScrollBar::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline long ScrollBar::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL ScrollBar::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t ScrollBar::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ScrollBar::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long ScrollBar::GetMax ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutMax ( long _arg1 ) {
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ScrollBar::GetMin ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutMin ( long _arg1 ) {
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ScrollBar::GetSmallChange ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutSmallChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ScrollBar::GetValue ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ScrollBar::GetLargeChange ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBar::PutLargeChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface ScrollBars wrapper method implementations
//

inline _ApplicationPtr ScrollBars::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ScrollBars::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ScrollBars::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t ScrollBars::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ScrollBars::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ScrollBars::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t ScrollBars::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ScrollBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr ScrollBars::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ScrollBars::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double ScrollBars::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double ScrollBars::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL ScrollBars::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t ScrollBars::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ScrollBars::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t ScrollBars::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void ScrollBars::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL ScrollBars::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t ScrollBars::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t ScrollBars::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double ScrollBars::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL ScrollBars::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double ScrollBars::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long ScrollBars::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr ScrollBars::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline long ScrollBars::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL ScrollBars::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t ScrollBars::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ScrollBars::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long ScrollBars::GetMax ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutMax ( long _arg1 ) {
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ScrollBars::GetMin ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutMin ( long _arg1 ) {
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ScrollBars::GetSmallChange ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutSmallChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ScrollBars::GetValue ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ScrollBars::GetLargeChange ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ScrollBars::PutLargeChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline ScrollBarPtr ScrollBars::Add ( double Left, double Top, double Width, double Height ) {
    struct ScrollBar * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return ScrollBarPtr(_result, false);
}

inline long ScrollBars::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr ScrollBars::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr ScrollBars::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr ScrollBars::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface ListBox wrapper method implementations
//

inline _ApplicationPtr ListBox::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ListBox::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ListBox::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr ListBox::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t ListBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ListBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ListBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t ListBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ListBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr ListBox::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ListBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double ListBox::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long ListBox::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double ListBox::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL ListBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t ListBox::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ListBox::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t ListBox::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ListBox::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t ListBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void ListBox::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL ListBox::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t ListBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t ListBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double ListBox::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr ListBox::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL ListBox::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double ListBox::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long ListBox::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr ListBox::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _variant_t ListBox::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &Text, &Index);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ListBox::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long ListBox::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t ListBox::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ListBox::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t ListBox::GetLinkedObject ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x35e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ListBox::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline void ListBox::PutList ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

inline long ListBox::GetListCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x351, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t ListBox::GetListFillRange ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ListBox::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long ListBox::GetListIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::PutListIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ListBox::GetMultiSelect ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::PutMultiSelect ( long _arg1 ) {
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t ListBox::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ListBox::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c", Index, &Count);
    return _variant_t(_result, false);
}

inline _variant_t ListBox::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline void ListBox::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

inline long ListBox::GetValue ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ListBox::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface ListBoxes wrapper method implementations
//

inline _ApplicationPtr ListBoxes::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ListBoxes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ListBoxes::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t ListBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ListBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ListBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t ListBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ListBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr ListBoxes::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ListBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double ListBoxes::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double ListBoxes::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL ListBoxes::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t ListBoxes::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ListBoxes::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t ListBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void ListBoxes::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL ListBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t ListBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t ListBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double ListBoxes::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL ListBoxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double ListBoxes::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long ListBoxes::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr ListBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _variant_t ListBoxes::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &Text, &Index);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ListBoxes::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long ListBoxes::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t ListBoxes::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ListBoxes::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t ListBoxes::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline void ListBoxes::PutList ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

inline _bstr_t ListBoxes::GetListFillRange ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ListBoxes::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long ListBoxes::GetListIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::PutListIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ListBoxes::GetMultiSelect ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::PutMultiSelect ( long _arg1 ) {
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t ListBoxes::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ListBoxes::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c", Index, &Count);
    return _variant_t(_result, false);
}

inline _variant_t ListBoxes::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline void ListBoxes::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

inline long ListBoxes::GetValue ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ListBoxes::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline ListBoxPtr ListBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct ListBox * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return ListBoxPtr(_result, false);
}

inline long ListBoxes::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr ListBoxes::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr ListBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr ListBoxes::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface GroupBox wrapper method implementations
//

inline _ApplicationPtr GroupBox::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator GroupBox::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr GroupBox::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr GroupBox::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t GroupBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t GroupBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t GroupBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t GroupBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t GroupBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr GroupBox::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL GroupBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupBox::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double GroupBox::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupBox::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long GroupBox::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double GroupBox::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupBox::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL GroupBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupBox::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t GroupBox::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void GroupBox::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t GroupBox::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void GroupBox::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t GroupBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupBox::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL GroupBox::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupBox::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t GroupBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t GroupBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double GroupBox::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupBox::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr GroupBox::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL GroupBox::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupBox::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double GroupBox::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupBox::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long GroupBox::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr GroupBox::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _bstr_t GroupBox::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void GroupBox::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr GroupBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t GroupBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL GroupBox::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupBox::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t GroupBox::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void GroupBox::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t GroupBox::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupBox::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL GroupBox::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t GroupBox::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupBox::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface GroupBoxes wrapper method implementations
//

inline _ApplicationPtr GroupBoxes::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator GroupBoxes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr GroupBoxes::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t GroupBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t GroupBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t GroupBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t GroupBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t GroupBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr GroupBoxes::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL GroupBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupBoxes::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double GroupBoxes::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupBoxes::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double GroupBoxes::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupBoxes::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL GroupBoxes::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupBoxes::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t GroupBoxes::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void GroupBoxes::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t GroupBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupBoxes::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL GroupBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupBoxes::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t GroupBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t GroupBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double GroupBoxes::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupBoxes::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL GroupBoxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupBoxes::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double GroupBoxes::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupBoxes::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long GroupBoxes::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr GroupBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _bstr_t GroupBoxes::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void GroupBoxes::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr GroupBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t GroupBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL GroupBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupBoxes::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t GroupBoxes::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void GroupBoxes::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t GroupBoxes::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupBoxes::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL GroupBoxes::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t GroupBoxes::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupBoxes::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline GroupBoxPtr GroupBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct GroupBox * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return GroupBoxPtr(_result, false);
}

inline long GroupBoxes::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr GroupBoxes::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr GroupBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr GroupBoxes::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface DropDown wrapper method implementations
//

inline _ApplicationPtr DropDown::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DropDown::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DropDown::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr DropDown::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t DropDown::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DropDown::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DropDown::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t DropDown::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DropDown::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr DropDown::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL DropDown::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double DropDown::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long DropDown::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double DropDown::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL DropDown::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t DropDown::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DropDown::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t DropDown::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DropDown::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t DropDown::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DropDown::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DropDown::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DropDown::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t DropDown::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double DropDown::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr DropDown::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL DropDown::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double DropDown::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long DropDown::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr DropDown::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _variant_t DropDown::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &Text, &Index);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL DropDown::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long DropDown::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t DropDown::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DropDown::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t DropDown::GetLinkedObject ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x35e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DropDown::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline void DropDown::PutList ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

inline long DropDown::GetListCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x351, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t DropDown::GetListFillRange ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DropDown::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long DropDown::GetListIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::PutListIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t DropDown::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DropDown::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c", Index, &Count);
    return _variant_t(_result, false);
}

inline _variant_t DropDown::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline void DropDown::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

inline long DropDown::GetValue ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t DropDown::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DropDown::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr DropDown::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline long DropDown::GetDropDownLines ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DropDown::PutDropDownLines ( long _arg1 ) {
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t DropDown::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DropDown::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface DropDowns wrapper method implementations
//

inline _ApplicationPtr DropDowns::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DropDowns::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DropDowns::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t DropDowns::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DropDowns::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DropDowns::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t DropDowns::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DropDowns::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr DropDowns::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL DropDowns::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double DropDowns::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double DropDowns::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL DropDowns::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t DropDowns::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DropDowns::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t DropDowns::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DropDowns::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DropDowns::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DropDowns::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t DropDowns::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double DropDowns::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL DropDowns::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double DropDowns::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long DropDowns::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr DropDowns::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _variant_t DropDowns::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &Text, &Index);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL DropDowns::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long DropDowns::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t DropDowns::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DropDowns::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t DropDowns::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline void DropDowns::PutList ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

inline _bstr_t DropDowns::GetListFillRange ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DropDowns::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long DropDowns::GetListIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::PutListIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t DropDowns::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t DropDowns::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c", Index, &Count);
    return _variant_t(_result, false);
}

inline _variant_t DropDowns::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline void DropDowns::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

inline long DropDowns::GetValue ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t DropDowns::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DropDowns::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr DropDowns::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline long DropDowns::GetDropDownLines ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DropDowns::PutDropDownLines ( long _arg1 ) {
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t DropDowns::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DropDowns::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline DropDownPtr DropDowns::Add ( double Left, double Top, double Width, double Height, const _variant_t & Editable ) {
    struct DropDown * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x080c", Left, Top, Width, Height, &Editable);
    return DropDownPtr(_result, false);
}

inline long DropDowns::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr DropDowns::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr DropDowns::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr DropDowns::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Spinner wrapper method implementations
//

inline _ApplicationPtr Spinner::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Spinner::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Spinner::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr Spinner::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Spinner::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Spinner::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Spinner::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Spinner::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Spinner::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Spinner::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Spinner::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Spinner::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Spinner::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double Spinner::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Spinner::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Spinner::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Spinner::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Spinner::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Spinner::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Spinner::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Spinner::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Spinner::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Spinner::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Spinner::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Spinner::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr Spinner::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL Spinner::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Spinner::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Spinner::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Spinner::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline long Spinner::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL Spinner::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Spinner::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Spinner::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long Spinner::GetMax ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutMax ( long _arg1 ) {
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Spinner::GetMin ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutMin ( long _arg1 ) {
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Spinner::GetSmallChange ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutSmallChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Spinner::GetValue ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Spinner::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface Spinners wrapper method implementations
//

inline _ApplicationPtr Spinners::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Spinners::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Spinners::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Spinners::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Spinners::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Spinners::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Spinners::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Spinners::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Spinners::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Spinners::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Spinners::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Spinners::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Spinners::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Spinners::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Spinners::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Spinners::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Spinners::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Spinners::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Spinners::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Spinners::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Spinners::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Spinners::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Spinners::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Spinners::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Spinners::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline long Spinners::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL Spinners::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Spinners::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Spinners::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long Spinners::GetMax ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutMax ( long _arg1 ) {
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Spinners::GetMin ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutMin ( long _arg1 ) {
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Spinners::GetSmallChange ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutSmallChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Spinners::GetValue ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Spinners::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline SpinnerPtr Spinners::Add ( double Left, double Top, double Width, double Height ) {
    struct Spinner * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return SpinnerPtr(_result, false);
}

inline long Spinners::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr Spinners::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr Spinners::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr Spinners::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface DialogFrame wrapper method implementations
//

inline _ApplicationPtr DialogFrame::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DialogFrame::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DialogFrame::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t DialogFrame::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline double DialogFrame::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DialogFrame::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double DialogFrame::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DialogFrame::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL DialogFrame::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DialogFrame::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t DialogFrame::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DialogFrame::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t DialogFrame::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DialogFrame::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t DialogFrame::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline double DialogFrame::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DialogFrame::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double DialogFrame::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DialogFrame::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline ShapeRangePtr DialogFrame::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _bstr_t DialogFrame::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DialogFrame::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr DialogFrame::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t DialogFrame::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL DialogFrame::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DialogFrame::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t DialogFrame::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DialogFrame::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface Label wrapper method implementations
//

inline _ApplicationPtr Label::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Label::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Label::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr Label::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Label::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Label::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Label::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Label::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Label::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Label::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Label::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Label::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Label::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Label::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Label::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double Label::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Label::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Label::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Label::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Label::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Label::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Label::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Label::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Label::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Label::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Label::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Label::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Label::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Label::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Label::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Label::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr Label::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL Label::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Label::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Label::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Label::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Label::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Label::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _bstr_t Label::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Label::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr Label::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Label::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL Label::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Label::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Label::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Label::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Label::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Label::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Label::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Label::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface Labels wrapper method implementations
//

inline _ApplicationPtr Labels::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Labels::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Labels::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Labels::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Labels::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Labels::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Labels::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Labels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Labels::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Labels::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Labels::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Labels::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Labels::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Labels::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Labels::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Labels::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Labels::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Labels::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Labels::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Labels::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Labels::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Labels::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Labels::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Labels::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Labels::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Labels::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Labels::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Labels::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Labels::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Labels::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Labels::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Labels::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Labels::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _bstr_t Labels::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Labels::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr Labels::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Labels::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL Labels::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Labels::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Labels::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Labels::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Labels::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Labels::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Labels::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Labels::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline LabelPtr Labels::Add ( double Left, double Top, double Width, double Height ) {
    struct Label * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return LabelPtr(_result, false);
}

inline long Labels::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr Labels::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr Labels::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr Labels::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Panes wrapper method implementations
//

inline _ApplicationPtr Panes::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Panes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Panes::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Panes::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline PanePtr Panes::GetItem ( long Index ) {
    struct Pane * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return PanePtr(_result, false);
}

inline PanePtr Panes::Get_Default ( long Index ) {
    struct Pane * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return PanePtr(_result, false);
}

//
// dispinterface Pane wrapper method implementations
//

inline _ApplicationPtr Pane::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Pane::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Pane::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Pane::Activate ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline long Pane::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _variant_t Pane::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x223, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Down, &Up, &ToRight, &ToLeft);
    return _variant_t(_result, false);
}

inline long Pane::GetScrollColumn ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x28e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Pane::PutScrollColumn ( long _arg1 ) {
    _com_dispatch_method(this, 0x28e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Pane::GetScrollRow ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x28f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Pane::PutScrollRow ( long _arg1 ) {
    _com_dispatch_method(this, 0x28f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t Pane::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x224, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Down, &Up, &ToRight, &ToLeft);
    return _variant_t(_result, false);
}

inline RangePtr Pane::GetVisibleRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x45e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline HRESULT Pane::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start ) {
    return _com_dispatch_method(this, 0x6f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003\x080c", Left, Top, Width, Height, &Start);
}

//
// dispinterface Scenarios wrapper method implementations
//

inline _ApplicationPtr Scenarios::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Scenarios::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Scenarios::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline ScenarioPtr Scenarios::Add ( _bstr_t Name, const _variant_t & ChangingCells, const _variant_t & Values, const _variant_t & Comment, const _variant_t & Locked, const _variant_t & Hidden ) {
    struct Scenario * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x000c\x080c\x080c\x080c\x080c", (BSTR)Name, &ChangingCells, &Values, &Comment, &Locked, &Hidden);
    return ScenarioPtr(_result, false);
}

inline long Scenarios::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _variant_t Scenarios::CreateSummary ( enum XlSummaryReportType ReportType, const _variant_t & ResultCells ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x391, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c", ReportType, &ResultCells);
    return _variant_t(_result, false);
}

inline ScenarioPtr Scenarios::Item ( const _variant_t & Index ) {
    struct Scenario * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ScenarioPtr(_result, false);
}

inline _variant_t Scenarios::Merge ( const _variant_t & Source ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x234, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Source);
    return _variant_t(_result, false);
}

inline IUnknownPtr Scenarios::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Scenario wrapper method implementations
//

inline _ApplicationPtr Scenario::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Scenario::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Scenario::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Scenario::ChangeScenario ( const _variant_t & ChangingCells, const _variant_t & Values ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x390, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &ChangingCells, &Values);
    return _variant_t(_result, false);
}

inline RangePtr Scenario::GetChangingCells ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x38f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _bstr_t Scenario::GetComment ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x38e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Scenario::PutComment ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x38e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Scenario::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL Scenario::GetHidden ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Scenario::PutHidden ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Scenario::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL Scenario::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Scenario::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Scenario::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Scenario::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Scenario::Show ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f0, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Scenario::GetValues ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xa4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

//
// dispinterface GroupObject wrapper method implementations
//

inline _ApplicationPtr GroupObject::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator GroupObject::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr GroupObject::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr GroupObject::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t GroupObject::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t GroupObject::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t GroupObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t GroupObject::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t GroupObject::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr GroupObject::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL GroupObject::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double GroupObject::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long GroupObject::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double GroupObject::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL GroupObject::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t GroupObject::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void GroupObject::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t GroupObject::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void GroupObject::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t GroupObject::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObject::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL GroupObject::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t GroupObject::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t GroupObject::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double GroupObject::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr GroupObject::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL GroupObject::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double GroupObject::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long GroupObject::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr GroupObject::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL GroupObject::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t GroupObject::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObject::PutArrowHeadLength ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t GroupObject::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObject::PutArrowHeadStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t GroupObject::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObject::PutArrowHeadWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL GroupObject::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline BorderPtr GroupObject::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t GroupObject::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline long GroupObject::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline FontPtr GroupObject::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _variant_t GroupObject::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObject::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline InteriorPtr GroupObject::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline _variant_t GroupObject::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObject::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL GroupObject::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL GroupObject::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline IDispatchPtr GroupObject::Ungroup ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t GroupObject::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObject::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long GroupObject::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void GroupObject::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface GroupObjects wrapper method implementations
//

inline _ApplicationPtr GroupObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator GroupObjects::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr GroupObjects::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t GroupObjects::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t GroupObjects::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t GroupObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t GroupObjects::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t GroupObjects::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr GroupObjects::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL GroupObjects::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double GroupObjects::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double GroupObjects::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL GroupObjects::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t GroupObjects::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void GroupObjects::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t GroupObjects::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObjects::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL GroupObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t GroupObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t GroupObjects::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double GroupObjects::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL GroupObjects::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double GroupObjects::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long GroupObjects::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr GroupObjects::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL GroupObjects::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t GroupObjects::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObjects::PutArrowHeadLength ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t GroupObjects::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObjects::PutArrowHeadStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t GroupObjects::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObjects::PutArrowHeadWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL GroupObjects::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline BorderPtr GroupObjects::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t GroupObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline long GroupObjects::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline FontPtr GroupObjects::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _variant_t GroupObjects::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObjects::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline InteriorPtr GroupObjects::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline _variant_t GroupObjects::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObjects::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL GroupObjects::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL GroupObjects::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline IDispatchPtr GroupObjects::Ungroup ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t GroupObjects::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void GroupObjects::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long GroupObjects::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void GroupObjects::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long GroupObjects::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr GroupObjects::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr GroupObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr GroupObjects::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Line wrapper method implementations
//

inline _ApplicationPtr Line::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Line::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Line::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr Line::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Line::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Line::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Line::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Line::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Line::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Line::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Line::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Line::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Line::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Line::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Line::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double Line::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Line::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Line::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Line::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Line::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Line::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Line::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Line::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Line::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Line::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Line::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Line::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Line::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Line::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Line::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Line::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr Line::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL Line::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Line::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Line::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Line::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Line::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Line::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _variant_t Line::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Line::PutArrowHeadLength ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Line::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Line::PutArrowHeadStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Line::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Line::PutArrowHeadWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline BorderPtr Line::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

//
// dispinterface Lines wrapper method implementations
//

inline _ApplicationPtr Lines::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Lines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Lines::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Lines::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Lines::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Lines::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Lines::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Lines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Lines::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Lines::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Lines::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Lines::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Lines::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Lines::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Lines::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Lines::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Lines::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Lines::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Lines::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Lines::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Lines::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Lines::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Lines::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Lines::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Lines::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Lines::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Lines::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Lines::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Lines::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Lines::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Lines::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Lines::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Lines::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _variant_t Lines::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Lines::PutArrowHeadLength ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Lines::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Lines::PutArrowHeadStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Lines::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Lines::PutArrowHeadWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline BorderPtr Lines::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline LinePtr Lines::Add ( double X1, double Y1, double X2, double Y2 ) {
    struct Line * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", X1, Y1, X2, Y2);
    return LinePtr(_result, false);
}

inline long Lines::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr Lines::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr Lines::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr Lines::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Rectangle wrapper method implementations
//

inline _ApplicationPtr Rectangle::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Rectangle::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Rectangle::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr Rectangle::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Rectangle::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Rectangle::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Rectangle::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Rectangle::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Rectangle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Rectangle::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Rectangle::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Rectangle::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Rectangle::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double Rectangle::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Rectangle::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Rectangle::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Rectangle::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Rectangle::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Rectangle::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Rectangle::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Rectangle::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Rectangle::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Rectangle::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Rectangle::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Rectangle::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr Rectangle::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL Rectangle::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Rectangle::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Rectangle::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Rectangle::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL Rectangle::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Rectangle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Rectangle::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Rectangle::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Rectangle::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Rectangle::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr Rectangle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Rectangle::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline FontPtr Rectangle::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t Rectangle::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Rectangle::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Rectangle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Rectangle::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Rectangle::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Rectangle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Rectangle::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Rectangle::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Rectangle::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Rectangle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Rectangle::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long Rectangle::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline BorderPtr Rectangle::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr Rectangle::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL Rectangle::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Rectangle::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangle::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Rectangles wrapper method implementations
//

inline _ApplicationPtr Rectangles::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Rectangles::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Rectangles::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Rectangles::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Rectangles::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Rectangles::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Rectangles::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Rectangles::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Rectangles::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Rectangles::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Rectangles::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Rectangles::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Rectangles::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Rectangles::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Rectangles::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Rectangles::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Rectangles::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Rectangles::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Rectangles::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Rectangles::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Rectangles::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Rectangles::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Rectangles::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Rectangles::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Rectangles::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL Rectangles::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Rectangles::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Rectangles::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Rectangles::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Rectangles::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Rectangles::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr Rectangles::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Rectangles::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline FontPtr Rectangles::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t Rectangles::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Rectangles::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Rectangles::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Rectangles::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Rectangles::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Rectangles::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Rectangles::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Rectangles::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Rectangles::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Rectangles::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Rectangles::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long Rectangles::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline BorderPtr Rectangles::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr Rectangles::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL Rectangles::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Rectangles::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Rectangles::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline RectanglePtr Rectangles::Add ( double Left, double Top, double Width, double Height ) {
    struct Rectangle * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return RectanglePtr(_result, false);
}

inline long Rectangles::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr Rectangles::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr Rectangles::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr Rectangles::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Oval wrapper method implementations
//

inline _ApplicationPtr Oval::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Oval::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Oval::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr Oval::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Oval::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Oval::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Oval::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Oval::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Oval::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Oval::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Oval::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Oval::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Oval::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double Oval::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Oval::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Oval::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Oval::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Oval::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Oval::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Oval::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Oval::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Oval::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Oval::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Oval::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Oval::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr Oval::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL Oval::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Oval::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Oval::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Oval::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL Oval::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Oval::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Oval::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Oval::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Oval::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Oval::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr Oval::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Oval::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline FontPtr Oval::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t Oval::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Oval::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Oval::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Oval::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Oval::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Oval::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Oval::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Oval::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Oval::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Oval::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Oval::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long Oval::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline BorderPtr Oval::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr Oval::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL Oval::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Oval::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Ovals wrapper method implementations
//

inline _ApplicationPtr Ovals::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Ovals::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Ovals::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Ovals::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Ovals::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Ovals::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Ovals::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Ovals::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Ovals::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Ovals::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Ovals::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Ovals::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Ovals::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Ovals::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Ovals::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Ovals::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Ovals::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Ovals::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Ovals::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Ovals::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Ovals::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Ovals::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Ovals::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Ovals::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Ovals::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL Ovals::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Ovals::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Ovals::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Ovals::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Ovals::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Ovals::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr Ovals::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Ovals::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline FontPtr Ovals::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t Ovals::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Ovals::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Ovals::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Ovals::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Ovals::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Ovals::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Ovals::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Ovals::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Ovals::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Ovals::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Ovals::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long Ovals::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline BorderPtr Ovals::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr Ovals::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL Ovals::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Ovals::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline OvalPtr Ovals::Add ( double Left, double Top, double Width, double Height ) {
    struct Oval * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return OvalPtr(_result, false);
}

inline long Ovals::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr Ovals::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr Ovals::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr Ovals::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Arc wrapper method implementations
//

inline _ApplicationPtr Arc::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Arc::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Arc::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr Arc::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Arc::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Arc::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Arc::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Arc::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Arc::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Arc::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Arc::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arc::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Arc::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Arc::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Arc::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double Arc::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Arc::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Arc::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arc::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Arc::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Arc::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Arc::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Arc::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Arc::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Arc::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Arc::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arc::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Arc::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Arc::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Arc::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Arc::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr Arc::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL Arc::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arc::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Arc::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Arc::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Arc::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Arc::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL Arc::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arc::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Arc::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Arc::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Arc::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arc::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Arc::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Arc::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr Arc::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Arc::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline FontPtr Arc::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t Arc::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Arc::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Arc::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Arc::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Arc::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arc::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Arc::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Arc::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Arc::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Arc::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Arc::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Arc::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long Arc::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Arc::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline BorderPtr Arc::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr Arc::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

//
// dispinterface Arcs wrapper method implementations
//

inline _ApplicationPtr Arcs::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Arcs::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Arcs::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Arcs::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Arcs::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Arcs::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Arcs::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Arcs::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Arcs::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Arcs::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arcs::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Arcs::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Arcs::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Arcs::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Arcs::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Arcs::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arcs::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Arcs::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Arcs::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Arcs::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Arcs::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Arcs::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arcs::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Arcs::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Arcs::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Arcs::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Arcs::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Arcs::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arcs::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Arcs::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Arcs::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Arcs::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Arcs::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL Arcs::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arcs::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Arcs::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Arcs::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Arcs::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arcs::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Arcs::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Arcs::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr Arcs::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Arcs::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline FontPtr Arcs::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t Arcs::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Arcs::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Arcs::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Arcs::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Arcs::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Arcs::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Arcs::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Arcs::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Arcs::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Arcs::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Arcs::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Arcs::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long Arcs::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Arcs::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline BorderPtr Arcs::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr Arcs::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ArcPtr Arcs::Add ( double X1, double Y1, double X2, double Y2 ) {
    struct Arc * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", X1, Y1, X2, Y2);
    return ArcPtr(_result, false);
}

inline long Arcs::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr Arcs::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr Arcs::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr Arcs::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface OLEObjectEvents wrapper method implementations
//

inline HRESULT OLEObjectEvents::GotFocus ( ) {
    return _com_dispatch_method(this, 0x605, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT OLEObjectEvents::LostFocus ( ) {
    return _com_dispatch_method(this, 0x606, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface _OLEObject wrapper method implementations
//

inline _ApplicationPtr _OLEObject::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x80010094, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator _OLEObject::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x80010095, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr _OLEObject::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x80010096, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr _OLEObject::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x80010267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t _OLEObject::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x8001025a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t _OLEObject::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x80010227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t _OLEObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x800100d5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t _OLEObject::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x80010235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t _OLEObject::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x80010075, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr _OLEObject::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x8001040f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _OLEObject::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x80010258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _OLEObject::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x80010258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double _OLEObject::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x8001007b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void _OLEObject::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x8001007b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long _OLEObject::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x800101e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double _OLEObject::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x8001007f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void _OLEObject::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x8001007f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL _OLEObject::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8001010d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _OLEObject::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8001010d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t _OLEObject::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8001006e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void _OLEObject::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8001006e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t _OLEObject::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void _OLEObject::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t _OLEObject::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x80010269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void _OLEObject::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x80010269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL _OLEObject::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8001026a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _OLEObject::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8001026a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t _OLEObject::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x800100eb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t _OLEObject::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x8001025d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double _OLEObject::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x8001007e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void _OLEObject::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x8001007e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr _OLEObject::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x8001026c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL _OLEObject::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8001022e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _OLEObject::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8001022e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double _OLEObject::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x8001007a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void _OLEObject::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x8001007a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long _OLEObject::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x8001026e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr _OLEObject::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x800105f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline BorderPtr _OLEObject::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80010080, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr _OLEObject::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x80010081, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL _OLEObject::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x80010067, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _OLEObject::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x80010067, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t _OLEObject::Activate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x80010130, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL _OLEObject::GetAutoLoad ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x800104a2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _OLEObject::PutAutoLoad ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x800104a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _OLEObject::GetAutoUpdate ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x80010418, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _OLEObject::PutAutoUpdate ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x80010418, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline IDispatchPtr _OLEObject::GetObject ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x80010419, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t _OLEObject::GetOLEType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x8001041e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _bstr_t _OLEObject::GetSourceName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x800102d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void _OLEObject::PutSourceName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x800102d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t _OLEObject::Update ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x800102a8, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t _OLEObject::Verb ( enum XlOLEVerb Verb ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x8001025e, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003", Verb);
    return _variant_t(_result, false);
}

inline _bstr_t _OLEObject::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void _OLEObject::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t _OLEObject::GetListFillRange ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8001034f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void _OLEObject::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8001034f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t _OLEObject::GetProgId ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x800105f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t _OLEObject::GetAltHTML ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8001073d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void _OLEObject::PutAltHTML ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8001073d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface OLEObjects wrapper method implementations
//

inline _ApplicationPtr OLEObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator OLEObjects::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr OLEObjects::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t OLEObjects::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t OLEObjects::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t OLEObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t OLEObjects::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t OLEObjects::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr OLEObjects::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL OLEObjects::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OLEObjects::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double OLEObjects::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void OLEObjects::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double OLEObjects::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void OLEObjects::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL OLEObjects::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OLEObjects::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t OLEObjects::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void OLEObjects::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t OLEObjects::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void OLEObjects::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL OLEObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OLEObjects::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t OLEObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t OLEObjects::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double OLEObjects::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void OLEObjects::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL OLEObjects::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OLEObjects::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double OLEObjects::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void OLEObjects::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long OLEObjects::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr OLEObjects::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline BorderPtr OLEObjects::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr OLEObjects::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL OLEObjects::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OLEObjects::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL OLEObjects::GetAutoLoad ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4a2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void OLEObjects::PutAutoLoad ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x4a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t OLEObjects::GetSourceName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x2d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void OLEObjects::PutSourceName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x2d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _OLEObjectPtr OLEObjects::Add ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height ) {
    struct _OLEObject * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &ClassType, &Filename, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel, &Left, &Top, &Width, &Height);
    return _OLEObjectPtr(_result, false);
}

inline long OLEObjects::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr OLEObjects::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr OLEObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr OLEObjects::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface TextBox wrapper method implementations
//

inline _ApplicationPtr TextBox::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator TextBox::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr TextBox::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr TextBox::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t TextBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t TextBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t TextBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t TextBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t TextBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr TextBox::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL TextBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double TextBox::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long TextBox::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double TextBox::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL TextBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t TextBox::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void TextBox::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t TextBox::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void TextBox::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t TextBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void TextBox::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL TextBox::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t TextBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t TextBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double TextBox::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr TextBox::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL TextBox::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double TextBox::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long TextBox::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr TextBox::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL TextBox::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t TextBox::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void TextBox::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL TextBox::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t TextBox::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void TextBox::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr TextBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t TextBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline FontPtr TextBox::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t TextBox::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void TextBox::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t TextBox::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void TextBox::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL TextBox::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t TextBox::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void TextBox::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t TextBox::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void TextBox::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t TextBox::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void TextBox::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long TextBox::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline BorderPtr TextBox::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr TextBox::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL TextBox::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL TextBox::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBox::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface TextBoxes wrapper method implementations
//

inline _ApplicationPtr TextBoxes::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator TextBoxes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr TextBoxes::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t TextBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t TextBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t TextBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t TextBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t TextBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr TextBoxes::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL TextBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double TextBoxes::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double TextBoxes::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL TextBoxes::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t TextBoxes::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void TextBoxes::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t TextBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void TextBoxes::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL TextBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t TextBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t TextBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double TextBoxes::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL TextBoxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double TextBoxes::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long TextBoxes::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr TextBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL TextBoxes::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t TextBoxes::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void TextBoxes::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL TextBoxes::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t TextBoxes::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void TextBoxes::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr TextBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t TextBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline FontPtr TextBoxes::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t TextBoxes::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void TextBoxes::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t TextBoxes::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void TextBoxes::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL TextBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t TextBoxes::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void TextBoxes::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t TextBoxes::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void TextBoxes::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t TextBoxes::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void TextBoxes::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long TextBoxes::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline BorderPtr TextBoxes::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr TextBoxes::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL TextBoxes::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL TextBoxes::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextBoxes::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline TextBoxPtr TextBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct TextBox * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return TextBoxPtr(_result, false);
}

inline long TextBoxes::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr TextBoxes::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr TextBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr TextBoxes::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Picture wrapper method implementations
//

inline _ApplicationPtr Picture::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Picture::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Picture::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr Picture::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Picture::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Picture::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Picture::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Picture::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Picture::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Picture::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Picture::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Picture::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Picture::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Picture::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Picture::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double Picture::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Picture::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Picture::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Picture::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Picture::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Picture::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Picture::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Picture::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Picture::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Picture::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Picture::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Picture::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Picture::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Picture::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Picture::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Picture::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr Picture::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL Picture::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Picture::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Picture::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Picture::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Picture::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Picture::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline BorderPtr Picture::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr Picture::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL Picture::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Picture::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Picture::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Picture::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface Pictures wrapper method implementations
//

inline _ApplicationPtr Pictures::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Pictures::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Pictures::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Pictures::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Pictures::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Pictures::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Pictures::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Pictures::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Pictures::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Pictures::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Pictures::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Pictures::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Pictures::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Pictures::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Pictures::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Pictures::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Pictures::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Pictures::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Pictures::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Pictures::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Pictures::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Pictures::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Pictures::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Pictures::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Pictures::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Pictures::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Pictures::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Pictures::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Pictures::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Pictures::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Pictures::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Pictures::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Pictures::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline BorderPtr Pictures::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr Pictures::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL Pictures::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Pictures::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Pictures::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Pictures::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline PicturePtr Pictures::Add ( double Left, double Top, double Width, double Height ) {
    struct Picture * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return PicturePtr(_result, false);
}

inline long Pictures::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr Pictures::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline PicturePtr Pictures::Insert ( _bstr_t Filename, const _variant_t & Converter ) {
    struct Picture * _result = 0;
    _com_dispatch_method(this, 0xfc, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c", (BSTR)Filename, &Converter);
    return PicturePtr(_result, false);
}

inline IDispatchPtr Pictures::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr Pictures::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline PicturePtr Pictures::Paste ( const _variant_t & Link ) {
    struct Picture * _result = 0;
    _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Link);
    return PicturePtr(_result, false);
}

//
// dispinterface Drawing wrapper method implementations
//

inline _ApplicationPtr Drawing::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Drawing::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Drawing::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr Drawing::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t Drawing::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Drawing::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Drawing::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Drawing::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Drawing::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Drawing::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Drawing::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Drawing::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Drawing::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double Drawing::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Drawing::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Drawing::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Drawing::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Drawing::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Drawing::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Drawing::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Drawing::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Drawing::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Drawing::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Drawing::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Drawing::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr Drawing::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL Drawing::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Drawing::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Drawing::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Drawing::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL Drawing::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Drawing::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Drawing::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Drawing::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Drawing::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Drawing::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr Drawing::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Drawing::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline FontPtr Drawing::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t Drawing::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Drawing::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Drawing::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Drawing::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Drawing::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Drawing::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Drawing::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Drawing::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Drawing::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Drawing::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Drawing::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long Drawing::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline BorderPtr Drawing::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr Drawing::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL Drawing::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawing::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Drawing::AddVertex ( double Left, double Top ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x259, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0005\x0005", Left, Top);
    return _variant_t(_result, false);
}

inline _variant_t Drawing::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x000b\x080c\x080c", Vertex, Insert, &Left, &Top);
    return _variant_t(_result, false);
}

inline _variant_t Drawing::GetVertices ( const _variant_t & Index1, const _variant_t & Index2 ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x26d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &Index1, &Index2);
    return _variant_t(_result, false);
}

//
// dispinterface Drawings wrapper method implementations
//

inline _ApplicationPtr Drawings::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Drawings::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Drawings::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Drawings::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Drawings::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Drawings::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t Drawings::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Drawings::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Drawings::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Drawings::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Drawings::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Drawings::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Drawings::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Drawings::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Drawings::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Drawings::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Drawings::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Drawings::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Drawings::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t Drawings::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Drawings::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Drawings::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Drawings::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long Drawings::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr Drawings::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL Drawings::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Drawings::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Drawings::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Drawings::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Drawings::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Drawings::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr Drawings::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline _variant_t Drawings::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

inline FontPtr Drawings::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t Drawings::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Drawings::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Drawings::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Drawings::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Drawings::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Drawings::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Drawings::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Drawings::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Drawings::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Drawings::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Drawings::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long Drawings::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline BorderPtr Drawings::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr Drawings::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL Drawings::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Drawings::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Drawings::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x000b\x080c\x080c", Vertex, Insert, &Left, &Top);
    return _variant_t(_result, false);
}

inline DrawingPtr Drawings::Add ( double X1, double Y1, double X2, double Y2, VARIANT_BOOL Closed ) {
    struct Drawing * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x000b", X1, Y1, X2, Y2, Closed);
    return DrawingPtr(_result, false);
}

inline long Drawings::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr Drawings::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr Drawings::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr Drawings::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface RoutingSlip wrapper method implementations
//

inline _ApplicationPtr RoutingSlip::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator RoutingSlip::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr RoutingSlip::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline enum XlRoutingSlipDelivery RoutingSlip::GetDelivery ( ) {
    enum XlRoutingSlipDelivery _result;
    _com_dispatch_method(this, 0x3bb, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void RoutingSlip::PutDelivery ( enum XlRoutingSlipDelivery _arg1 ) {
    _com_dispatch_method(this, 0x3bb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t RoutingSlip::GetMessage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3ba, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void RoutingSlip::PutMessage ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t RoutingSlip::GetRecipients ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3b8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline void RoutingSlip::PutRecipients ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x3b8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

inline _variant_t RoutingSlip::Reset ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x22b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL RoutingSlip::GetReturnWhenDone ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3bc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void RoutingSlip::PutReturnWhenDone ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3bc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum XlRoutingSlipStatus RoutingSlip::GetStatus ( ) {
    enum XlRoutingSlipStatus _result;
    _com_dispatch_method(this, 0x3be, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _variant_t RoutingSlip::GetSubject ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3b9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void RoutingSlip::PutSubject ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL RoutingSlip::GetTrackStatus ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3bd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void RoutingSlip::PutTrackStatus ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3bd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Outline wrapper method implementations
//

inline _ApplicationPtr Outline::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Outline::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Outline::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Outline::GetAutomaticStyles ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3bf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Outline::PutAutomaticStyles ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Outline::ShowLevels ( const _variant_t & RowLevels, const _variant_t & ColumnLevels ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3c0, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &RowLevels, &ColumnLevels);
    return _variant_t(_result, false);
}

inline enum XlSummaryColumn Outline::GetSummaryColumn ( ) {
    enum XlSummaryColumn _result;
    _com_dispatch_method(this, 0x3c1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Outline::PutSummaryColumn ( enum XlSummaryColumn _arg1 ) {
    _com_dispatch_method(this, 0x3c1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlSummaryRow Outline::GetSummaryRow ( ) {
    enum XlSummaryRow _result;
    _com_dispatch_method(this, 0x386, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Outline::PutSummaryRow ( enum XlSummaryRow _arg1 ) {
    _com_dispatch_method(this, 0x386, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface Module wrapper method implementations
//

inline _ApplicationPtr Module::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Module::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Module::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Module::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT Module::Copy ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

inline HRESULT Module::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline _bstr_t Module::GetCodeName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x55d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t Module::Get_CodeName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Module::Put_CodeName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long Module::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Module::Move ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

inline _bstr_t Module::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Module::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline IDispatchPtr Module::GetNext ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Module::GetOnDoubleClick ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x274, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Module::PutOnDoubleClick ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x274, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Module::GetOnSheetActivate ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x407, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Module::PutOnSheetActivate ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x407, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Module::GetOnSheetDeactivate ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x439, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Module::PutOnSheetDeactivate ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x439, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline PageSetupPtr Module::GetPageSetup ( ) {
    struct PageSetup * _result = 0;
    _com_dispatch_method(this, 0x3e6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PageSetupPtr(_result, false);
}

inline IDispatchPtr Module::GetPrevious ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x1f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Module::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
}

inline HRESULT Module::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly ) {
    return _com_dispatch_method(this, 0x11a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c", &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly);
}

inline VARIANT_BOOL Module::GetProtectContents ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x124, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL Module::GetProtectionMode ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x487, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Module::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout ) {
    return _com_dispatch_method(this, 0x11c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", (BSTR)Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout);
}

inline HRESULT Module::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

inline HRESULT Module::Unprotect ( const _variant_t & Password ) {
    return _com_dispatch_method(this, 0x11d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Password);
}

inline enum XlSheetVisibility Module::GetVisible ( ) {
    enum XlSheetVisibility _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Module::PutVisible ( enum XlSheetVisibility _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline ShapesPtr Module::GetShapes ( ) {
    struct Shapes * _result = 0;
    _com_dispatch_method(this, 0x561, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapesPtr(_result, false);
}

inline _variant_t Module::InsertFile ( const _variant_t & Filename, const _variant_t & Merge ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x248, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &Filename, &Merge);
    return _variant_t(_result, false);
}

//
// dispinterface Modules wrapper method implementations
//

inline _ApplicationPtr Modules::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Modules::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Modules::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline ModulePtr Modules::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count ) {
    struct Module * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c", &Before, &After, &Count);
    return ModulePtr(_result, false);
}

inline HRESULT Modules::Copy ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

inline long Modules::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Modules::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline IDispatchPtr Modules::GetItem ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline HRESULT Modules::Move ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

inline IUnknownPtr Modules::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline HRESULT Modules::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
}

inline HRESULT Modules::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

inline HPageBreaksPtr Modules::GetHPageBreaks ( ) {
    struct HPageBreaks * _result = 0;
    _com_dispatch_method(this, 0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HPageBreaksPtr(_result, false);
}

inline VPageBreaksPtr Modules::GetVPageBreaks ( ) {
    struct VPageBreaks * _result = 0;
    _com_dispatch_method(this, 0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return VPageBreaksPtr(_result, false);
}

inline _variant_t Modules::GetVisible ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Modules::PutVisible ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline IDispatchPtr Modules::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline HRESULT Modules::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    return _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
}

//
// dispinterface DialogSheet wrapper method implementations
//

inline _ApplicationPtr DialogSheet::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DialogSheet::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DialogSheet::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT DialogSheet::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DialogSheet::Copy ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

inline HRESULT DialogSheet::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline _bstr_t DialogSheet::GetCodeName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x55d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t DialogSheet::Get_CodeName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DialogSheet::Put_CodeName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long DialogSheet::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT DialogSheet::Move ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

inline _bstr_t DialogSheet::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DialogSheet::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline IDispatchPtr DialogSheet::GetNext ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t DialogSheet::GetOnDoubleClick ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x274, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DialogSheet::PutOnDoubleClick ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x274, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t DialogSheet::GetOnSheetActivate ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x407, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DialogSheet::PutOnSheetActivate ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x407, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t DialogSheet::GetOnSheetDeactivate ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x439, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DialogSheet::PutOnSheetDeactivate ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x439, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline PageSetupPtr DialogSheet::GetPageSetup ( ) {
    struct PageSetup * _result = 0;
    _com_dispatch_method(this, 0x3e6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PageSetupPtr(_result, false);
}

inline IDispatchPtr DialogSheet::GetPrevious ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x1f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT DialogSheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
}

inline HRESULT DialogSheet::PrintPreview ( const _variant_t & EnableChanges ) {
    return _com_dispatch_method(this, 0x119, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &EnableChanges);
}

inline HRESULT DialogSheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly ) {
    return _com_dispatch_method(this, 0x11a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c", &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly);
}

inline VARIANT_BOOL DialogSheet::GetProtectContents ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x124, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL DialogSheet::GetProtectDrawingObjects ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x125, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL DialogSheet::GetProtectionMode ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x487, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL DialogSheet::GetProtectScenarios ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x126, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline HRESULT DialogSheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout ) {
    return _com_dispatch_method(this, 0x11c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", (BSTR)Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout);
}

inline HRESULT DialogSheet::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

inline HRESULT DialogSheet::Unprotect ( const _variant_t & Password ) {
    return _com_dispatch_method(this, 0x11d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Password);
}

inline enum XlSheetVisibility DialogSheet::GetVisible ( ) {
    enum XlSheetVisibility _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DialogSheet::PutVisible ( enum XlSheetVisibility _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline ShapesPtr DialogSheet::GetShapes ( ) {
    struct Shapes * _result = 0;
    _com_dispatch_method(this, 0x561, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapesPtr(_result, false);
}

inline IDispatchPtr DialogSheet::Arcs ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2f8, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::Buttons ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x22d, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL DialogSheet::GetEnableCalculation ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x590, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DialogSheet::PutEnableCalculation ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x590, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline IDispatchPtr DialogSheet::ChartObjects ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x424, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::CheckBoxes ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x338, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline HRESULT DialogSheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    return _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
}

inline VARIANT_BOOL DialogSheet::GetDisplayAutomaticPageBreaks ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x283, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DialogSheet::PutDisplayAutomaticPageBreaks ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x283, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline IDispatchPtr DialogSheet::Drawings ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x304, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::DrawingObjects ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x58, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::DropDowns ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x344, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL DialogSheet::GetEnableAutoFilter ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x484, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DialogSheet::PutEnableAutoFilter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x484, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum XlEnableSelection DialogSheet::GetEnableSelection ( ) {
    enum XlEnableSelection _result;
    _com_dispatch_method(this, 0x591, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DialogSheet::PutEnableSelection ( enum XlEnableSelection _arg1 ) {
    _com_dispatch_method(this, 0x591, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL DialogSheet::GetEnableOutlining ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x485, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DialogSheet::PutEnableOutlining ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x485, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DialogSheet::GetEnablePivotTable ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x486, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DialogSheet::PutEnablePivotTable ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x486, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DialogSheet::Evaluate ( const _variant_t & Name ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Name);
    return _variant_t(_result, false);
}

inline _variant_t DialogSheet::_Evaluate ( const _variant_t & Name ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xfffffffb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Name);
    return _variant_t(_result, false);
}

inline HRESULT DialogSheet::ResetAllPageBreaks ( ) {
    return _com_dispatch_method(this, 0x592, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline IDispatchPtr DialogSheet::GroupBoxes ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x342, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::GroupObjects ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x459, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::Labels ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x349, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::Lines ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2ff, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::ListBoxes ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x340, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline NamesPtr DialogSheet::GetNames ( ) {
    struct Names * _result = 0;
    _com_dispatch_method(this, 0x1ba, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return NamesPtr(_result, false);
}

inline IDispatchPtr DialogSheet::OLEObjects ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x31f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::OptionButtons ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x33a, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::Ovals ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x321, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline HRESULT DialogSheet::Paste ( const _variant_t & Destination, const _variant_t & Link ) {
    return _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Destination, &Link);
}

inline HRESULT DialogSheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel ) {
    return _com_dispatch_method(this, 0x403, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c", &Format, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel);
}

inline IDispatchPtr DialogSheet::Pictures ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x303, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::Rectangles ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x306, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline _bstr_t DialogSheet::GetScrollArea ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x599, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DialogSheet::PutScrollArea ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x599, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline IDispatchPtr DialogSheet::ScrollBars ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x33e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::Spinners ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x346, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr DialogSheet::TextBoxes ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x309, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline HPageBreaksPtr DialogSheet::GetHPageBreaks ( ) {
    struct HPageBreaks * _result = 0;
    _com_dispatch_method(this, 0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HPageBreaksPtr(_result, false);
}

inline VPageBreaksPtr DialogSheet::GetVPageBreaks ( ) {
    struct VPageBreaks * _result = 0;
    _com_dispatch_method(this, 0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return VPageBreaksPtr(_result, false);
}

inline QueryTablesPtr DialogSheet::GetQueryTables ( ) {
    struct QueryTables * _result = 0;
    _com_dispatch_method(this, 0x59a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return QueryTablesPtr(_result, false);
}

inline VARIANT_BOOL DialogSheet::GetDisplayPageBreaks ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x59b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DialogSheet::PutDisplayPageBreaks ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x59b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline CommentsPtr DialogSheet::GetComments ( ) {
    struct Comments * _result = 0;
    _com_dispatch_method(this, 0x23f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CommentsPtr(_result, false);
}

inline HyperlinksPtr DialogSheet::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    _com_dispatch_method(this, 0x571, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HyperlinksPtr(_result, false);
}

inline HRESULT DialogSheet::ClearCircles ( ) {
    return _com_dispatch_method(this, 0x59c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DialogSheet::CircleInvalid ( ) {
    return _com_dispatch_method(this, 0x59d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline long DialogSheet::Get_DisplayRightToLeft ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x288, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DialogSheet::Put_DisplayRightToLeft ( long _arg1 ) {
    _com_dispatch_method(this, 0x288, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline AutoFilterPtr DialogSheet::GetAutoFilter ( ) {
    struct AutoFilter * _result = 0;
    _com_dispatch_method(this, 0x319, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return AutoFilterPtr(_result, false);
}

inline VARIANT_BOOL DialogSheet::GetDisplayRightToLeft ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DialogSheet::PutDisplayRightToLeft ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x6ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline Office::ScriptsPtr DialogSheet::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    _com_dispatch_method(this, 0x718, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return Office::ScriptsPtr(_result, false);
}

inline HRESULT DialogSheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    return _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
}

inline HRESULT DialogSheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript ) {
    return _com_dispatch_method(this, 0x719, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang, &IgnoreFinalYaa, &SpellScript);
}

inline _variant_t DialogSheet::GetDefaultButton ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DialogSheet::PutDefaultButton ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline DialogFramePtr DialogSheet::GetDialogFrame ( ) {
    struct DialogFrame * _result = 0;
    _com_dispatch_method(this, 0x347, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DialogFramePtr(_result, false);
}

inline IDispatchPtr DialogSheet::EditBoxes ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x33c, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline _variant_t DialogSheet::GetFocus ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x32e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DialogSheet::PutFocus ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x32e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DialogSheet::Hide ( const _variant_t & Cancel ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x32d, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x080c", &Cancel);
    return _result;
}

inline VARIANT_BOOL DialogSheet::Show ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1f0, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface DialogSheets wrapper method implementations
//

inline _ApplicationPtr DialogSheets::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DialogSheets::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DialogSheets::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline DialogSheetPtr DialogSheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count ) {
    struct DialogSheet * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c", &Before, &After, &Count);
    return DialogSheetPtr(_result, false);
}

inline HRESULT DialogSheets::Copy ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

inline long DialogSheets::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT DialogSheets::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline IDispatchPtr DialogSheets::GetItem ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline HRESULT DialogSheets::Move ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

inline IUnknownPtr DialogSheets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline HRESULT DialogSheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
}

inline HRESULT DialogSheets::PrintPreview ( const _variant_t & EnableChanges ) {
    return _com_dispatch_method(this, 0x119, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &EnableChanges);
}

inline HRESULT DialogSheets::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

inline HPageBreaksPtr DialogSheets::GetHPageBreaks ( ) {
    struct HPageBreaks * _result = 0;
    _com_dispatch_method(this, 0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HPageBreaksPtr(_result, false);
}

inline VPageBreaksPtr DialogSheets::GetVPageBreaks ( ) {
    struct VPageBreaks * _result = 0;
    _com_dispatch_method(this, 0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return VPageBreaksPtr(_result, false);
}

inline _variant_t DialogSheets::GetVisible ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DialogSheets::PutVisible ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline IDispatchPtr DialogSheets::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline HRESULT DialogSheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    return _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
}

//
// dispinterface Worksheets wrapper method implementations
//

inline _ApplicationPtr Worksheets::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Worksheets::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Worksheets::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Worksheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Before, &After, &Count, &Type);
    return IDispatchPtr(_result, false);
}

inline HRESULT Worksheets::Copy ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

inline long Worksheets::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Worksheets::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT Worksheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type ) {
    return _com_dispatch_method(this, 0x1d5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", Range, Type);
}

inline IDispatchPtr Worksheets::GetItem ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline HRESULT Worksheets::Move ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

inline IUnknownPtr Worksheets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline HRESULT Worksheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
}

inline HRESULT Worksheets::PrintPreview ( const _variant_t & EnableChanges ) {
    return _com_dispatch_method(this, 0x119, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &EnableChanges);
}

inline HRESULT Worksheets::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

inline HPageBreaksPtr Worksheets::GetHPageBreaks ( ) {
    struct HPageBreaks * _result = 0;
    _com_dispatch_method(this, 0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HPageBreaksPtr(_result, false);
}

inline VPageBreaksPtr Worksheets::GetVPageBreaks ( ) {
    struct VPageBreaks * _result = 0;
    _com_dispatch_method(this, 0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return VPageBreaksPtr(_result, false);
}

inline _variant_t Worksheets::GetVisible ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Worksheets::PutVisible ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline IDispatchPtr Worksheets::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline HRESULT Worksheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    return _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
}

//
// dispinterface PageSetup wrapper method implementations
//

inline _ApplicationPtr PageSetup::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PageSetup::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PageSetup::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL PageSetup::GetBlackAndWhite ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3f1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutBlackAndWhite ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3f1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double PageSetup::GetBottomMargin ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x3ea, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutBottomMargin ( double _arg1 ) {
    _com_dispatch_method(this, 0x3ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _bstr_t PageSetup::GetCenterFooter ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3f2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PageSetup::PutCenterFooter ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3f2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t PageSetup::GetCenterHeader ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PageSetup::PutCenterHeader ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3f3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL PageSetup::GetCenterHorizontally ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3ed, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutCenterHorizontally ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PageSetup::GetCenterVertically ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutCenterVertically ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum XlObjectSize PageSetup::GetChartSize ( ) {
    enum XlObjectSize _result;
    _com_dispatch_method(this, 0x3f4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutChartSize ( enum XlObjectSize _arg1 ) {
    _com_dispatch_method(this, 0x3f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL PageSetup::GetDraft ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3fc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutDraft ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long PageSetup::GetFirstPageNumber ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3f0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutFirstPageNumber ( long _arg1 ) {
    _com_dispatch_method(this, 0x3f0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t PageSetup::GetFitToPagesTall ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PageSetup::PutFitToPagesTall ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t PageSetup::GetFitToPagesWide ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3f6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PageSetup::PutFitToPagesWide ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline double PageSetup::GetFooterMargin ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x3f7, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutFooterMargin ( double _arg1 ) {
    _com_dispatch_method(this, 0x3f7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double PageSetup::GetHeaderMargin ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x3f8, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutHeaderMargin ( double _arg1 ) {
    _com_dispatch_method(this, 0x3f8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _bstr_t PageSetup::GetLeftFooter ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3f9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PageSetup::PutLeftFooter ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t PageSetup::GetLeftHeader ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3fa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PageSetup::PutLeftHeader ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline double PageSetup::GetLeftMargin ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x3e7, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutLeftMargin ( double _arg1 ) {
    _com_dispatch_method(this, 0x3e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline enum XlOrder PageSetup::GetOrder ( ) {
    enum XlOrder _result;
    _com_dispatch_method(this, 0xc0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutOrder ( enum XlOrder _arg1 ) {
    _com_dispatch_method(this, 0xc0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlPageOrientation PageSetup::GetOrientation ( ) {
    enum XlPageOrientation _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutOrientation ( enum XlPageOrientation _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlPaperSize PageSetup::GetPaperSize ( ) {
    enum XlPaperSize _result;
    _com_dispatch_method(this, 0x3ef, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutPaperSize ( enum XlPaperSize _arg1 ) {
    _com_dispatch_method(this, 0x3ef, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t PageSetup::GetPrintArea ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3fb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PageSetup::PutPrintArea ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL PageSetup::GetPrintGridlines ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3ec, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutPrintGridlines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3ec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PageSetup::GetPrintHeadings ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3eb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutPrintHeadings ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL PageSetup::GetPrintNotes ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3fd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutPrintNotes ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t PageSetup::GetPrintQuality ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3fe, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline void PageSetup::PutPrintQuality ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x3fe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

inline _bstr_t PageSetup::GetPrintTitleColumns ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3ff, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PageSetup::PutPrintTitleColumns ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3ff, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t PageSetup::GetPrintTitleRows ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x400, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PageSetup::PutPrintTitleRows ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x400, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t PageSetup::GetRightFooter ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x401, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PageSetup::PutRightFooter ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x401, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t PageSetup::GetRightHeader ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x402, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PageSetup::PutRightHeader ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x402, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline double PageSetup::GetRightMargin ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x3e8, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutRightMargin ( double _arg1 ) {
    _com_dispatch_method(this, 0x3e8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double PageSetup::GetTopMargin ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x3e9, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutTopMargin ( double _arg1 ) {
    _com_dispatch_method(this, 0x3e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _variant_t PageSetup::GetZoom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x297, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void PageSetup::PutZoom ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x297, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline enum XlPrintLocation PageSetup::GetPrintComments ( ) {
    enum XlPrintLocation _result;
    _com_dispatch_method(this, 0x5f4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void PageSetup::PutPrintComments ( enum XlPrintLocation _arg1 ) {
    _com_dispatch_method(this, 0x5f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface Names wrapper method implementations
//

inline _ApplicationPtr Names::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Names::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Names::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline NamePtr Names::Add ( const _variant_t & Name, const _variant_t & RefersTo, const _variant_t & Visible, const _variant_t & MacroType, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & NameLocal, const _variant_t & RefersToLocal, const _variant_t & CategoryLocal, const _variant_t & RefersToR1C1, const _variant_t & RefersToR1C1Local ) {
    struct Name * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Name, &RefersTo, &Visible, &MacroType, &ShortcutKey, &Category, &NameLocal, &RefersToLocal, &CategoryLocal, &RefersToR1C1, &RefersToR1C1Local);
    return NamePtr(_result, false);
}

inline NamePtr Names::Item ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo ) {
    struct Name * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c", &Index, &IndexLocal, &RefersTo);
    return NamePtr(_result, false);
}

inline NamePtr Names::_Default ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo ) {
    struct Name * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c", &Index, &IndexLocal, &RefersTo);
    return NamePtr(_result, false);
}

inline long Names::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IUnknownPtr Names::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Name wrapper method implementations
//

inline _ApplicationPtr Name::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Name::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Name::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Name::Get_Default ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline long Name::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t Name::GetCategory ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3a6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Name::PutCategory ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Name::GetCategoryLocal ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3a7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Name::PutCategoryLocal ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3a7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline HRESULT Name::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline enum XlXLMMacroType Name::GetMacroType ( ) {
    enum XlXLMMacroType _result;
    _com_dispatch_method(this, 0x3a8, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Name::PutMacroType ( enum XlXLMMacroType _arg1 ) {
    _com_dispatch_method(this, 0x3a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t Name::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Name::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Name::GetRefersTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3aa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Name::PutRefersTo ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t Name::GetShortcutKey ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x255, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Name::PutShortcutKey ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x255, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Name::GetValue ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Name::PutValue ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL Name::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Name::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Name::GetNameLocal ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3a9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Name::PutNameLocal ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3a9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Name::GetRefersToLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3ab, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Name::PutRefersToLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Name::GetRefersToR1C1 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3ac, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Name::PutRefersToR1C1 ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3ac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Name::GetRefersToR1C1Local ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3ad, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Name::PutRefersToR1C1Local ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline RangePtr Name::GetRefersToRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x488, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

//
// dispinterface ChartObject wrapper method implementations
//

inline _ApplicationPtr ChartObject::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ChartObject::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ChartObject::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr ChartObject::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t ChartObject::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ChartObject::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ChartObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t ChartObject::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ChartObject::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr ChartObject::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ChartObject::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObject::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double ChartObject::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartObject::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long ChartObject::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double ChartObject::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartObject::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL ChartObject::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObject::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t ChartObject::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ChartObject::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t ChartObject::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ChartObject::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t ChartObject::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void ChartObject::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL ChartObject::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObject::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t ChartObject::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t ChartObject::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double ChartObject::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartObject::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline RangePtr ChartObject::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline VARIANT_BOOL ChartObject::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObject::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double ChartObject::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartObject::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline long ChartObject::GetZOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapeRangePtr ChartObject::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline _variant_t ChartObject::Activate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _ChartPtr ChartObject::GetChart ( ) {
    struct _Chart * _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ChartPtr(_result, false);
}

inline VARIANT_BOOL ChartObject::GetProtectChartObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5f9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObject::PutProtectChartObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL ChartObject::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObject::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline BorderPtr ChartObject::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr ChartObject::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL ChartObject::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObject::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface ChartObjects wrapper method implementations
//

inline _ApplicationPtr ChartObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ChartObjects::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ChartObjects::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t ChartObjects::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ChartObjects::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ChartObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

inline _variant_t ChartObjects::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ChartObjects::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr ChartObjects::Duplicate ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ChartObjects::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObjects::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double ChartObjects::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartObjects::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double ChartObjects::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartObjects::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL ChartObjects::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObjects::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t ChartObjects::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ChartObjects::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t ChartObjects::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void ChartObjects::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL ChartObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObjects::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t ChartObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

inline _variant_t ChartObjects::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double ChartObjects::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartObjects::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL ChartObjects::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObjects::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double ChartObjects::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartObjects::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline ShapeRangePtr ChartObjects::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL ChartObjects::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline BorderPtr ChartObjects::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline InteriorPtr ChartObjects::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL ChartObjects::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartObjects::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline ChartObjectPtr ChartObjects::Add ( double Left, double Top, double Width, double Height ) {
    struct ChartObject * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return ChartObjectPtr(_result, false);
}

inline long ChartObjects::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline GroupObjectPtr ChartObjects::Group ( ) {
    struct GroupObject * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr ChartObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr ChartObjects::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Mailer wrapper method implementations
//

inline _ApplicationPtr Mailer::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Mailer::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Mailer::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Mailer::GetBCCRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3d7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Mailer::PutBCCRecipients ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Mailer::GetCCRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3d6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Mailer::PutCCRecipients ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Mailer::GetEnclosures ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3d8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Mailer::PutEnclosures ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL Mailer::GetReceived ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3da, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline DATE Mailer::GetSendDateTime ( ) {
    DATE _result = 0;
    _com_dispatch_method(this, 0x3db, DISPATCH_PROPERTYGET, VT_DATE, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t Mailer::GetSender ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3dc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t Mailer::GetSubject ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x3b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Mailer::PutSubject ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Mailer::GetToRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3d5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Mailer::PutToRecipients ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Mailer::GetWhichAddress ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x3ce, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Mailer::PutWhichAddress ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface CustomViews wrapper method implementations
//

inline _ApplicationPtr CustomViews::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator CustomViews::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr CustomViews::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long CustomViews::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline CustomViewPtr CustomViews::Item ( const _variant_t & ViewName ) {
    struct CustomView * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &ViewName);
    return CustomViewPtr(_result, false);
}

inline CustomViewPtr CustomViews::Add ( _bstr_t ViewName, const _variant_t & PrintSettings, const _variant_t & RowColSettings ) {
    struct CustomView * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c\x080c", (BSTR)ViewName, &PrintSettings, &RowColSettings);
    return CustomViewPtr(_result, false);
}

inline CustomViewPtr CustomViews::Get_Default ( const _variant_t & ViewName ) {
    struct CustomView * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &ViewName);
    return CustomViewPtr(_result, false);
}

inline IUnknownPtr CustomViews::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface CustomView wrapper method implementations
//

inline _ApplicationPtr CustomView::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator CustomView::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr CustomView::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t CustomView::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL CustomView::GetPrintSettings ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x629, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL CustomView::GetRowColSettings ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x62a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline HRESULT CustomView::Show ( ) {
    return _com_dispatch_method(this, 0x1f0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT CustomView::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface FormatConditions wrapper method implementations
//

inline _ApplicationPtr FormatConditions::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator FormatConditions::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr FormatConditions::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long FormatConditions::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline FormatConditionPtr FormatConditions::Item ( const _variant_t & Index ) {
    struct FormatCondition * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return FormatConditionPtr(_result, false);
}

inline FormatConditionPtr FormatConditions::Add ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    struct FormatCondition * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c", Type, &Operator, &Formula1, &Formula2);
    return FormatConditionPtr(_result, false);
}

inline FormatConditionPtr FormatConditions::Get_Default ( const _variant_t & Index ) {
    struct FormatCondition * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return FormatConditionPtr(_result, false);
}

inline IUnknownPtr FormatConditions::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline HRESULT FormatConditions::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface FormatCondition wrapper method implementations
//

inline _ApplicationPtr FormatCondition::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator FormatCondition::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr FormatCondition::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT FormatCondition::Modify ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    return _com_dispatch_method(this, 0x62d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x080c\x080c\x080c", Type, &Operator, &Formula1, &Formula2);
}

inline long FormatCondition::GetType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long FormatCondition::GetOperator ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x31d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t FormatCondition::GetFormula1 ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x62b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t FormatCondition::GetFormula2 ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x62c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline InteriorPtr FormatCondition::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline BordersPtr FormatCondition::GetBorders ( ) {
    struct Borders * _result = 0;
    _com_dispatch_method(this, 0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BordersPtr(_result, false);
}

inline FontPtr FormatCondition::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline HRESULT FormatCondition::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface Comments wrapper method implementations
//

inline _ApplicationPtr Comments::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Comments::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Comments::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Comments::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline CommentPtr Comments::Item ( long Index ) {
    struct Comment * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return CommentPtr(_result, false);
}

inline CommentPtr Comments::Get_Default ( long Index ) {
    struct Comment * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return CommentPtr(_result, false);
}

inline IUnknownPtr Comments::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Comment wrapper method implementations
//

inline _ApplicationPtr Comment::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Comment::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Comment::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Comment::GetAuthor ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x23e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline ShapePtr Comment::GetShape ( ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x62e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

inline VARIANT_BOOL Comment::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Comment::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Comment::Text ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Overwrite ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x080c\x080c\x080c", &Text, &Start, &Overwrite);
    return _bstr_t(_result, false);
}

inline HRESULT Comment::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline CommentPtr Comment::Next ( ) {
    struct Comment * _result = 0;
    _com_dispatch_method(this, 0x1f6, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return CommentPtr(_result, false);
}

inline CommentPtr Comment::Previous ( ) {
    struct Comment * _result = 0;
    _com_dispatch_method(this, 0x1f7, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return CommentPtr(_result, false);
}

//
// dispinterface RefreshEvents wrapper method implementations
//

inline HRESULT RefreshEvents::BeforeRefresh ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x63c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

inline HRESULT RefreshEvents::AfterRefresh ( VARIANT_BOOL Success ) {
    return _com_dispatch_method(this, 0x63d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b", Success);
}

//
// dispinterface _QueryTable wrapper method implementations
//

inline _ApplicationPtr _QueryTable::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator _QueryTable::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr _QueryTable::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t _QueryTable::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void _QueryTable::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL _QueryTable::GetFieldNames ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x630, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutFieldNames ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x630, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetRowNumbers ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x631, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutRowNumbers ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x631, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetFillAdjacentFormulas ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x632, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutFillAdjacentFormulas ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x632, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetHasAutoFormat ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2b7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutHasAutoFormat ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetRefreshOnFileOpen ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5c7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutRefreshOnFileOpen ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetRefreshing ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x633, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL _QueryTable::GetFetchedRowOverflow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x634, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL _QueryTable::GetBackgroundQuery ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x593, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutBackgroundQuery ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x593, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline HRESULT _QueryTable::CancelRefresh ( ) {
    return _com_dispatch_method(this, 0x635, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline enum XlCellInsertionMode _QueryTable::GetRefreshStyle ( ) {
    enum XlCellInsertionMode _result;
    _com_dispatch_method(this, 0x636, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutRefreshStyle ( enum XlCellInsertionMode _arg1 ) {
    _com_dispatch_method(this, 0x636, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetEnableRefresh ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5c5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutEnableRefresh ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetSavePassword ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5c9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutSavePassword ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline RangePtr _QueryTable::GetDestination ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x2a9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _variant_t _QueryTable::GetConnection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x598, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void _QueryTable::PutConnection ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x598, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t _QueryTable::GetSql ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5c8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void _QueryTable::PutSql ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _bstr_t _QueryTable::GetPostText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x637, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void _QueryTable::PutPostText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x637, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline RangePtr _QueryTable::GetResultRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x638, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline HRESULT _QueryTable::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL _QueryTable::Refresh ( const _variant_t & BackgroundQuery ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x589, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x080c", &BackgroundQuery);
    return _result;
}

inline ParametersPtr _QueryTable::GetParameters ( ) {
    struct Parameters * _result = 0;
    _com_dispatch_method(this, 0x639, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ParametersPtr(_result, false);
}

inline IDispatchPtr _QueryTable::GetRecordset ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x48d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline void _QueryTable::PutRefRecordset ( IDispatch * _arg1 ) {
    _com_dispatch_method(this, 0x48d, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetSaveData ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2b4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutSaveData ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2b4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetTablesOnlyFromHTML ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x63a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutTablesOnlyFromHTML ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x63a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetEnableEditing ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x63b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutEnableEditing ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x63b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum XlPlatform _QueryTable::GetTextFilePlatform ( ) {
    enum XlPlatform _result;
    _com_dispatch_method(this, 0x73f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutTextFilePlatform ( enum XlPlatform _arg1 ) {
    _com_dispatch_method(this, 0x73f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long _QueryTable::GetTextFileStartRow ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x740, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutTextFileStartRow ( long _arg1 ) {
    _com_dispatch_method(this, 0x740, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlTextParsingType _QueryTable::GetTextFileParseType ( ) {
    enum XlTextParsingType _result;
    _com_dispatch_method(this, 0x741, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutTextFileParseType ( enum XlTextParsingType _arg1 ) {
    _com_dispatch_method(this, 0x741, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlTextQualifier _QueryTable::GetTextFileTextQualifier ( ) {
    enum XlTextQualifier _result;
    _com_dispatch_method(this, 0x742, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutTextFileTextQualifier ( enum XlTextQualifier _arg1 ) {
    _com_dispatch_method(this, 0x742, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetTextFileConsecutiveDelimiter ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x743, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutTextFileConsecutiveDelimiter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x743, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetTextFileTabDelimiter ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x744, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutTextFileTabDelimiter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x744, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetTextFileSemicolonDelimiter ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x745, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutTextFileSemicolonDelimiter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x745, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetTextFileCommaDelimiter ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x746, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutTextFileCommaDelimiter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x746, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetTextFileSpaceDelimiter ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x747, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutTextFileSpaceDelimiter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x747, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t _QueryTable::GetTextFileOtherDelimiter ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x748, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void _QueryTable::PutTextFileOtherDelimiter ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x748, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t _QueryTable::GetTextFileColumnDataTypes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x749, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void _QueryTable::PutTextFileColumnDataTypes ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x749, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t _QueryTable::GetTextFileFixedColumnWidths ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x74a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void _QueryTable::PutTextFileFixedColumnWidths ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x74a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL _QueryTable::GetPreserveColumnInfo ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x74b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutPreserveColumnInfo ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x74b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetPreserveFormatting ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5dc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutPreserveFormatting ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetAdjustColumnWidth ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x74c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutAdjustColumnWidth ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x74c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t _QueryTable::GetCommandText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x725, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void _QueryTable::PutCommandText ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x725, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline enum XlCmdType _QueryTable::GetCommandType ( ) {
    enum XlCmdType _result;
    _com_dispatch_method(this, 0x726, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutCommandType ( enum XlCmdType _arg1 ) {
    _com_dispatch_method(this, 0x726, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetTextFilePromptOnRefresh ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x74d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutTextFilePromptOnRefresh ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x74d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum xlQueryType _QueryTable::GetQueryType ( ) {
    enum xlQueryType _result;
    _com_dispatch_method(this, 0x727, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL _QueryTable::GetMaintainConnection ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x728, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutMaintainConnection ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x728, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t _QueryTable::GetTextFileDecimalSeparator ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x74e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void _QueryTable::PutTextFileDecimalSeparator ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x74e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t _QueryTable::GetTextFileThousandsSeparator ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x74f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void _QueryTable::PutTextFileThousandsSeparator ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x74f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long _QueryTable::GetRefreshPeriod ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x729, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutRefreshPeriod ( long _arg1 ) {
    _com_dispatch_method(this, 0x729, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline HRESULT _QueryTable::ResetTimer ( ) {
    return _com_dispatch_method(this, 0x72a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline enum xlWebSelectionType _QueryTable::GetWebSelectionType ( ) {
    enum xlWebSelectionType _result;
    _com_dispatch_method(this, 0x750, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutWebSelectionType ( enum xlWebSelectionType _arg1 ) {
    _com_dispatch_method(this, 0x750, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum xlWebFormatting _QueryTable::GetWebFormatting ( ) {
    enum xlWebFormatting _result;
    _com_dispatch_method(this, 0x751, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutWebFormatting ( enum xlWebFormatting _arg1 ) {
    _com_dispatch_method(this, 0x751, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t _QueryTable::GetWebTables ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x752, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void _QueryTable::PutWebTables ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x752, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL _QueryTable::GetWebPreFormattedTextToColumns ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x753, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutWebPreFormattedTextToColumns ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x753, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetWebSingleBlockTextImport ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x754, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutWebSingleBlockTextImport ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x754, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetWebDisableDateRecognition ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x755, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutWebDisableDateRecognition ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x755, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL _QueryTable::GetWebConsecutiveDelimitersAsOne ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x756, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void _QueryTable::PutWebConsecutiveDelimitersAsOne ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x756, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface QueryTables wrapper method implementations
//

inline _ApplicationPtr QueryTables::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator QueryTables::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr QueryTables::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long QueryTables::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _QueryTablePtr QueryTables::Add ( const _variant_t & Connection, struct Range * Destination, const _variant_t & Sql ) {
    struct _QueryTable * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c\x0009\x080c", &Connection, Destination, &Sql);
    return _QueryTablePtr(_result, false);
}

inline _QueryTablePtr QueryTables::Item ( const _variant_t & Index ) {
    struct _QueryTable * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return _QueryTablePtr(_result, false);
}

inline _QueryTablePtr QueryTables::Get_Default ( const _variant_t & Index ) {
    struct _QueryTable * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return _QueryTablePtr(_result, false);
}

inline IUnknownPtr QueryTables::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Parameter wrapper method implementations
//

inline _ApplicationPtr Parameter::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Parameter::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Parameter::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline enum XlParameterDataType Parameter::GetDataType ( ) {
    enum XlParameterDataType _result;
    _com_dispatch_method(this, 0x2d2, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Parameter::PutDataType ( enum XlParameterDataType _arg1 ) {
    _com_dispatch_method(this, 0x2d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlParameterType Parameter::GetType ( ) {
    enum XlParameterType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t Parameter::GetPromptString ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x63f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t Parameter::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline RangePtr Parameter::GetSourceRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x640, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline _bstr_t Parameter::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Parameter::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline HRESULT Parameter::SetParam ( enum XlParameterType Type, const _variant_t & Value ) {
    return _com_dispatch_method(this, 0x641, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x000c", Type, &Value);
}

inline VARIANT_BOOL Parameter::GetRefreshOnChange ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x757, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Parameter::PutRefreshOnChange ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x757, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Parameters wrapper method implementations
//

inline _ApplicationPtr Parameters::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Parameters::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Parameters::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline ParameterPtr Parameters::Add ( _bstr_t Name, const _variant_t & iDataType ) {
    struct Parameter * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c", (BSTR)Name, &iDataType);
    return ParameterPtr(_result, false);
}

inline long Parameters::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ParameterPtr Parameters::Item ( const _variant_t & Index ) {
    struct Parameter * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ParameterPtr(_result, false);
}

inline ParameterPtr Parameters::Get_Default ( const _variant_t & Index ) {
    struct Parameter * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ParameterPtr(_result, false);
}

inline HRESULT Parameters::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline IUnknownPtr Parameters::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface ODBCError wrapper method implementations
//

inline _ApplicationPtr ODBCError::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ODBCError::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ODBCError::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t ODBCError::GetSqlState ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x643, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t ODBCError::GetErrorString ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5d2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

//
// dispinterface ODBCErrors wrapper method implementations
//

inline _ApplicationPtr ODBCErrors::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ODBCErrors::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ODBCErrors::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long ODBCErrors::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ODBCErrorPtr ODBCErrors::Item ( long Index ) {
    struct ODBCError * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return ODBCErrorPtr(_result, false);
}

inline ODBCErrorPtr ODBCErrors::Get_Default ( long Index ) {
    struct ODBCError * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return ODBCErrorPtr(_result, false);
}

inline IUnknownPtr ODBCErrors::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Validation wrapper method implementations
//

inline _ApplicationPtr Validation::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Validation::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Validation::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Validation::Add ( enum XlDVType Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    return _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x080c\x080c\x080c\x080c", Type, &AlertStyle, &Operator, &Formula1, &Formula2);
}

inline long Validation::GetAlertStyle ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x645, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL Validation::GetIgnoreBlank ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x646, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Validation::PutIgnoreBlank ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x646, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Validation::GetIMEMode ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x647, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Validation::PutIMEMode ( long _arg1 ) {
    _com_dispatch_method(this, 0x647, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL Validation::GetInCellDropdown ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x648, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Validation::PutInCellDropdown ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x648, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline HRESULT Validation::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline _bstr_t Validation::GetErrorMessage ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x649, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Validation::PutErrorMessage ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x649, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Validation::GetErrorTitle ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x64a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Validation::PutErrorTitle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x64a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Validation::GetInputMessage ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x64b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Validation::PutInputMessage ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x64b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Validation::GetInputTitle ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x64c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Validation::PutInputTitle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x64c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Validation::GetFormula1 ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x62b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t Validation::GetFormula2 ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x62c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline HRESULT Validation::Modify ( const _variant_t & Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    return _com_dispatch_method(this, 0x62d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c", &Type, &AlertStyle, &Operator, &Formula1, &Formula2);
}

inline long Validation::GetOperator ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x31d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL Validation::GetShowError ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x64d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Validation::PutShowError ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x64d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Validation::GetShowInput ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x64e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Validation::PutShowInput ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x64e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Validation::GetType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL Validation::GetValue ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Hyperlinks wrapper method implementations
//

inline _ApplicationPtr Hyperlinks::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Hyperlinks::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Hyperlinks::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Hyperlinks::Add ( IDispatch * Anchor, _bstr_t Address, const _variant_t & SubAddress, const _variant_t & ScreenTip, const _variant_t & TextToDisplay ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0009\x0008\x080c\x080c\x080c", Anchor, (BSTR)Address, &SubAddress, &ScreenTip, &TextToDisplay);
    return IDispatchPtr(_result, false);
}

inline long Hyperlinks::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HyperlinkPtr Hyperlinks::GetItem ( const _variant_t & Index ) {
    struct Hyperlink * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return HyperlinkPtr(_result, false);
}

inline HyperlinkPtr Hyperlinks::Get_Default ( const _variant_t & Index ) {
    struct Hyperlink * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return HyperlinkPtr(_result, false);
}

inline IUnknownPtr Hyperlinks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline HRESULT Hyperlinks::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface Hyperlink wrapper method implementations
//

inline _ApplicationPtr Hyperlink::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Hyperlink::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Hyperlink::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Hyperlink::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline RangePtr Hyperlink::GetRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline ShapePtr Hyperlink::GetShape ( ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x62e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

inline _bstr_t Hyperlink::GetSubAddress ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5bf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Hyperlink::PutSubAddress ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Hyperlink::GetAddress ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0xec, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Hyperlink::PutAddress ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long Hyperlink::GetType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Hyperlink::AddToFavorites ( ) {
    return _com_dispatch_method(this, 0x5c4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT Hyperlink::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT Hyperlink::Follow ( const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo ) {
    return _com_dispatch_method(this, 0x650, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c", &NewWindow, &AddHistory, &ExtraInfo, &Method, &HeaderInfo);
}

inline _bstr_t Hyperlink::GetEmailSubject ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x75b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Hyperlink::PutEmailSubject ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x75b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Hyperlink::GetScreenTip ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x759, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Hyperlink::PutScreenTip ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x759, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Hyperlink::GetTextToDisplay ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x75a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Hyperlink::PutTextToDisplay ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x75a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline HRESULT Hyperlink::CreateNewDocument ( _bstr_t Filename, VARIANT_BOOL EditNow, VARIANT_BOOL Overwrite ) {
    return _com_dispatch_method(this, 0x75c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x000b\x000b", (BSTR)Filename, EditNow, Overwrite);
}

//
// interface IDocEvents wrapper method implementations
//

inline HRESULT IDocEvents::SelectionChange ( struct Range * Target ) {
    HRESULT _hr = raw_SelectionChange(Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDocEvents::BeforeDoubleClick ( struct Range * Target, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeDoubleClick(Target, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDocEvents::BeforeRightClick ( struct Range * Target, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeRightClick(Target, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDocEvents::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDocEvents::Deactivate ( ) {
    HRESULT _hr = raw_Deactivate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDocEvents::Calculate ( ) {
    HRESULT _hr = raw_Calculate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDocEvents::Change ( struct Range * Target ) {
    HRESULT _hr = raw_Change(Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDocEvents::FollowHyperlink ( struct Hyperlink * Target ) {
    HRESULT _hr = raw_FollowHyperlink(Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWorkbookEvents wrapper method implementations
//

inline HRESULT IWorkbookEvents::Open ( ) {
    HRESULT _hr = raw_Open();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::Deactivate ( ) {
    HRESULT _hr = raw_Deactivate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::BeforeClose ( VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeClose(Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::BeforeSave ( VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeSave(SaveAsUI, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::BeforePrint ( VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforePrint(Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::NewSheet ( IDispatch * Sh ) {
    HRESULT _hr = raw_NewSheet(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::AddinInstall ( ) {
    HRESULT _hr = raw_AddinInstall();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::AddinUninstall ( ) {
    HRESULT _hr = raw_AddinUninstall();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::WindowResize ( struct Window * Wn ) {
    HRESULT _hr = raw_WindowResize(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::WindowActivate ( struct Window * Wn ) {
    HRESULT _hr = raw_WindowActivate(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::WindowDeactivate ( struct Window * Wn ) {
    HRESULT _hr = raw_WindowDeactivate(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target ) {
    HRESULT _hr = raw_SheetSelectionChange(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_SheetBeforeDoubleClick(Sh, Target, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_SheetBeforeRightClick(Sh, Target, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::SheetActivate ( IDispatch * Sh ) {
    HRESULT _hr = raw_SheetActivate(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::SheetDeactivate ( IDispatch * Sh ) {
    HRESULT _hr = raw_SheetDeactivate(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::SheetCalculate ( IDispatch * Sh ) {
    HRESULT _hr = raw_SheetCalculate(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::SheetChange ( IDispatch * Sh, struct Range * Target ) {
    HRESULT _hr = raw_SheetChange(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorkbookEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target ) {
    HRESULT _hr = raw_SheetFollowHyperlink(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface AutoFilter wrapper method implementations
//

inline _ApplicationPtr AutoFilter::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator AutoFilter::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr AutoFilter::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline RangePtr AutoFilter::GetRange ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline FiltersPtr AutoFilter::GetFilters ( ) {
    struct Filters * _result = 0;
    _com_dispatch_method(this, 0x651, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FiltersPtr(_result, false);
}

//
// dispinterface Filters wrapper method implementations
//

inline _ApplicationPtr Filters::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Filters::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Filters::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Filters::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline FilterPtr Filters::Get_Default ( long Index ) {
    struct Filter * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return FilterPtr(_result, false);
}

inline FilterPtr Filters::GetItem ( long Index ) {
    struct Filter * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return FilterPtr(_result, false);
}

inline IUnknownPtr Filters::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Filter wrapper method implementations
//

inline _ApplicationPtr Filter::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Filter::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Filter::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Filter::GetOn ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x652, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline _variant_t Filter::GetCriteria1 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x31c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline enum XlAutoFilterOperator Filter::GetOperator ( ) {
    enum XlAutoFilterOperator _result;
    _com_dispatch_method(this, 0x31d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _variant_t Filter::GetCriteria2 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x31e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface AutoCorrect wrapper method implementations
//

inline _ApplicationPtr AutoCorrect::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator AutoCorrect::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr AutoCorrect::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t AutoCorrect::AddReplacement ( _bstr_t What, _bstr_t Replacement ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x47a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0008\x0008", (BSTR)What, (BSTR)Replacement);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL AutoCorrect::GetCapitalizeNamesOfDays ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x47e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void AutoCorrect::PutCapitalizeNamesOfDays ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x47e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t AutoCorrect::DeleteReplacement ( _bstr_t What ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x47b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0008", (BSTR)What);
    return _variant_t(_result, false);
}

inline _variant_t AutoCorrect::GetReplacementList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x47f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline void AutoCorrect::PutReplacementList ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x47f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

inline VARIANT_BOOL AutoCorrect::GetMSReplaceText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x47c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void AutoCorrect::PutMSReplaceText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x47c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL AutoCorrect::GetTwoInitialCapitals ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x47d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void AutoCorrect::PutTwoInitialCapitals ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x47d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL AutoCorrect::GetCorrectSentenceCap ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x653, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void AutoCorrect::PutCorrectSentenceCap ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x653, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL AutoCorrect::GetCorrectCapsLock ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x654, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void AutoCorrect::PutCorrectCapsLock ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x654, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Border wrapper method implementations
//

inline _ApplicationPtr Border::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Border::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Border::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Border::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Border::PutColor ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Border::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Border::PutColorIndex ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Border::GetLineStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x77, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Border::PutLineStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x77, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Border::GetWeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x78, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Border::PutWeight ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x78, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface Interior wrapper method implementations
//

inline _ApplicationPtr Interior::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Interior::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Interior::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Interior::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Interior::PutColor ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Interior::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Interior::PutColorIndex ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Interior::GetInvertIfNegative ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Interior::PutInvertIfNegative ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Interior::GetPattern ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Interior::PutPattern ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Interior::GetPatternColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x64, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Interior::PutPatternColor ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Interior::GetPatternColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x62, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Interior::PutPatternColorIndex ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x62, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface ChartFillFormat wrapper method implementations
//

inline _ApplicationPtr ChartFillFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ChartFillFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ChartFillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT ChartFillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree ) {
    return _com_dispatch_method(this, 0x655, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004", Style, Variant, Degree);
}

inline HRESULT ChartFillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant ) {
    return _com_dispatch_method(this, 0x658, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", Style, Variant);
}

inline HRESULT ChartFillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture ) {
    return _com_dispatch_method(this, 0x659, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", PresetTexture);
}

inline HRESULT ChartFillFormat::Solid ( ) {
    return _com_dispatch_method(this, 0x65b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ChartFillFormat::Patterned ( enum Office::MsoPatternType Pattern ) {
    return _com_dispatch_method(this, 0x65c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Pattern);
}

inline HRESULT ChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement ) {
    return _com_dispatch_method(this, 0x65d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c", &PictureFile, &PictureFormat, &PictureStackUnit, &PicturePlacement);
}

inline HRESULT ChartFillFormat::UserTextured ( _bstr_t TextureFile ) {
    return _com_dispatch_method(this, 0x662, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)TextureFile);
}

inline HRESULT ChartFillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType ) {
    return _com_dispatch_method(this, 0x664, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003", Style, Variant, PresetGradientType);
}

inline ChartColorFormatPtr ChartFillFormat::GetBackColor ( ) {
    struct ChartColorFormat * _result = 0;
    _com_dispatch_method(this, 0x666, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartColorFormatPtr(_result, false);
}

inline ChartColorFormatPtr ChartFillFormat::GetForeColor ( ) {
    struct ChartColorFormat * _result = 0;
    _com_dispatch_method(this, 0x667, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartColorFormatPtr(_result, false);
}

inline enum Office::MsoGradientColorType ChartFillFormat::GetGradientColorType ( ) {
    enum Office::MsoGradientColorType _result;
    _com_dispatch_method(this, 0x668, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline float ChartFillFormat::GetGradientDegree ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x669, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoGradientStyle ChartFillFormat::GetGradientStyle ( ) {
    enum Office::MsoGradientStyle _result;
    _com_dispatch_method(this, 0x66a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long ChartFillFormat::GetGradientVariant ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x66b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoPatternType ChartFillFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    _com_dispatch_method(this, 0x5f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoPresetGradientType ChartFillFormat::GetPresetGradientType ( ) {
    enum Office::MsoPresetGradientType _result;
    _com_dispatch_method(this, 0x665, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoPresetTexture ChartFillFormat::GetPresetTexture ( ) {
    enum Office::MsoPresetTexture _result;
    _com_dispatch_method(this, 0x65a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t ChartFillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x66c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline enum Office::MsoTextureType ChartFillFormat::GetTextureType ( ) {
    enum Office::MsoTextureType _result;
    _com_dispatch_method(this, 0x66d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoFillType ChartFillFormat::GetType ( ) {
    enum Office::MsoFillType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoTriState ChartFillFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartFillFormat::PutVisible ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface ChartColorFormat wrapper method implementations
//

inline _ApplicationPtr ChartColorFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ChartColorFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ChartColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long ChartColorFormat::GetSchemeColor ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x66e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartColorFormat::PutSchemeColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x66e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ChartColorFormat::GetMSRBG ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x41f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long ChartColorFormat::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long ChartColorFormat::GetType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Axis wrapper method implementations
//

inline _ApplicationPtr Axis::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Axis::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Axis::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Axis::GetAxisBetweenCategories ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutAxisBetweenCategories ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum XlAxisGroup Axis::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    _com_dispatch_method(this, 0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline AxisTitlePtr Axis::GetAxisTitle ( ) {
    struct AxisTitle * _result = 0;
    _com_dispatch_method(this, 0x52, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return AxisTitlePtr(_result, false);
}

inline BorderPtr Axis::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t Axis::GetCategoryNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x9c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Axis::PutCategoryNames ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x9c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline enum XlAxisCrosses Axis::GetCrosses ( ) {
    enum XlAxisCrosses _result;
    _com_dispatch_method(this, 0x2a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutCrosses ( enum XlAxisCrosses _arg1 ) {
    _com_dispatch_method(this, 0x2a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline double Axis::GetCrossesAt ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x2b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutCrossesAt ( double _arg1 ) {
    _com_dispatch_method(this, 0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _variant_t Axis::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL Axis::GetHasMajorGridlines ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutHasMajorGridlines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Axis::GetHasMinorGridlines ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x19, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutHasMinorGridlines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x19, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Axis::GetHasTitle ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x36, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutHasTitle ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x36, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline GridlinesPtr Axis::GetMajorGridlines ( ) {
    struct Gridlines * _result = 0;
    _com_dispatch_method(this, 0x59, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GridlinesPtr(_result, false);
}

inline enum XlTickMark Axis::GetMajorTickMark ( ) {
    enum XlTickMark _result;
    _com_dispatch_method(this, 0x1a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutMajorTickMark ( enum XlTickMark _arg1 ) {
    _com_dispatch_method(this, 0x1a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline double Axis::GetMajorUnit ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x25, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutMajorUnit ( double _arg1 ) {
    _com_dispatch_method(this, 0x25, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Axis::GetMajorUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutMajorUnitIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Axis::GetMaximumScale ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x23, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutMaximumScale ( double _arg1 ) {
    _com_dispatch_method(this, 0x23, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Axis::GetMaximumScaleIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x24, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutMaximumScaleIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x24, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double Axis::GetMinimumScale ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x21, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutMinimumScale ( double _arg1 ) {
    _com_dispatch_method(this, 0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Axis::GetMinimumScaleIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutMinimumScaleIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline GridlinesPtr Axis::GetMinorGridlines ( ) {
    struct Gridlines * _result = 0;
    _com_dispatch_method(this, 0x5a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GridlinesPtr(_result, false);
}

inline enum XlTickMark Axis::GetMinorTickMark ( ) {
    enum XlTickMark _result;
    _com_dispatch_method(this, 0x1b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutMinorTickMark ( enum XlTickMark _arg1 ) {
    _com_dispatch_method(this, 0x1b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline double Axis::GetMinorUnit ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x27, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutMinorUnit ( double _arg1 ) {
    _com_dispatch_method(this, 0x27, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Axis::GetMinorUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x28, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutMinorUnitIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Axis::GetReversePlotOrder ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutReversePlotOrder ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum XlScaleType Axis::GetScaleType ( ) {
    enum XlScaleType _result;
    _com_dispatch_method(this, 0x29, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutScaleType ( enum XlScaleType _arg1 ) {
    _com_dispatch_method(this, 0x29, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t Axis::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline enum XlTickLabelPosition Axis::GetTickLabelPosition ( ) {
    enum XlTickLabelPosition _result;
    _com_dispatch_method(this, 0x1c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutTickLabelPosition ( enum XlTickLabelPosition _arg1 ) {
    _com_dispatch_method(this, 0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline TickLabelsPtr Axis::GetTickLabels ( ) {
    struct TickLabels * _result = 0;
    _com_dispatch_method(this, 0x5b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TickLabelsPtr(_result, false);
}

inline long Axis::GetTickLabelSpacing ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutTickLabelSpacing ( long _arg1 ) {
    _com_dispatch_method(this, 0x1d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Axis::GetTickMarkSpacing ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutTickMarkSpacing ( long _arg1 ) {
    _com_dispatch_method(this, 0x1f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlAxisType Axis::GetType ( ) {
    enum XlAxisType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutType ( enum XlAxisType _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlTimeUnit Axis::GetBaseUnit ( ) {
    enum XlTimeUnit _result;
    _com_dispatch_method(this, 0x66f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutBaseUnit ( enum XlTimeUnit _arg1 ) {
    _com_dispatch_method(this, 0x66f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL Axis::GetBaseUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x670, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutBaseUnitIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x670, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum XlTimeUnit Axis::GetMajorUnitScale ( ) {
    enum XlTimeUnit _result;
    _com_dispatch_method(this, 0x671, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutMajorUnitScale ( enum XlTimeUnit _arg1 ) {
    _com_dispatch_method(this, 0x671, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlTimeUnit Axis::GetMinorUnitScale ( ) {
    enum XlTimeUnit _result;
    _com_dispatch_method(this, 0x672, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutMinorUnitScale ( enum XlTimeUnit _arg1 ) {
    _com_dispatch_method(this, 0x672, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlCategoryType Axis::GetCategoryType ( ) {
    enum XlCategoryType _result;
    _com_dispatch_method(this, 0x673, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutCategoryType ( enum XlCategoryType _arg1 ) {
    _com_dispatch_method(this, 0x673, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline double Axis::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double Axis::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double Axis::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double Axis::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline enum XlDisplayUnit Axis::GetDisplayUnit ( ) {
    enum XlDisplayUnit _result;
    _com_dispatch_method(this, 0x75e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutDisplayUnit ( enum XlDisplayUnit _arg1 ) {
    _com_dispatch_method(this, 0x75e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline double Axis::GetDisplayUnitCustom ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x75f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutDisplayUnitCustom ( double _arg1 ) {
    _com_dispatch_method(this, 0x75f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Axis::GetHasDisplayUnitLabel ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x760, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Axis::PutHasDisplayUnitLabel ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x760, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline DisplayUnitLabelPtr Axis::GetDisplayUnitLabel ( ) {
    struct DisplayUnitLabel * _result = 0;
    _com_dispatch_method(this, 0x761, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DisplayUnitLabelPtr(_result, false);
}

//
// dispinterface ChartTitle wrapper method implementations
//

inline _ApplicationPtr ChartTitle::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ChartTitle::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ChartTitle::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t ChartTitle::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t ChartTitle::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr ChartTitle::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t ChartTitle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline InteriorPtr ChartTitle::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr ChartTitle::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

inline _bstr_t ChartTitle::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ChartTitle::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr ChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline FontPtr ChartTitle::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _variant_t ChartTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void ChartTitle::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline double ChartTitle::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartTitle::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _variant_t ChartTitle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void ChartTitle::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL ChartTitle::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartTitle::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t ChartTitle::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ChartTitle::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline double ChartTitle::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartTitle::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _variant_t ChartTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void ChartTitle::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long ChartTitle::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartTitle::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t ChartTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void ChartTitle::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface AxisTitle wrapper method implementations
//

inline _ApplicationPtr AxisTitle::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator AxisTitle::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr AxisTitle::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t AxisTitle::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t AxisTitle::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr AxisTitle::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t AxisTitle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline InteriorPtr AxisTitle::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr AxisTitle::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

inline _bstr_t AxisTitle::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void AxisTitle::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr AxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline FontPtr AxisTitle::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _variant_t AxisTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void AxisTitle::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline double AxisTitle::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void AxisTitle::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _variant_t AxisTitle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void AxisTitle::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL AxisTitle::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void AxisTitle::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t AxisTitle::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void AxisTitle::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline double AxisTitle::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void AxisTitle::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _variant_t AxisTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void AxisTitle::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long AxisTitle::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void AxisTitle::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t AxisTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void AxisTitle::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface ChartGroup wrapper method implementations
//

inline _ApplicationPtr ChartGroup::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ChartGroup::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ChartGroup::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline enum XlAxisGroup ChartGroup::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    _com_dispatch_method(this, 0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutAxisGroup ( enum XlAxisGroup _arg1 ) {
    _com_dispatch_method(this, 0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ChartGroup::GetDoughnutHoleSize ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x466, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutDoughnutHoleSize ( long _arg1 ) {
    _com_dispatch_method(this, 0x466, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline DownBarsPtr ChartGroup::GetDownBars ( ) {
    struct DownBars * _result = 0;
    _com_dispatch_method(this, 0x8d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DownBarsPtr(_result, false);
}

inline DropLinesPtr ChartGroup::GetDropLines ( ) {
    struct DropLines * _result = 0;
    _com_dispatch_method(this, 0x8e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DropLinesPtr(_result, false);
}

inline long ChartGroup::GetFirstSliceAngle ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutFirstSliceAngle ( long _arg1 ) {
    _com_dispatch_method(this, 0x3f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ChartGroup::GetGapWidth ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x33, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutGapWidth ( long _arg1 ) {
    _com_dispatch_method(this, 0x33, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL ChartGroup::GetHasDropLines ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutHasDropLines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL ChartGroup::GetHasHiLoLines ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutHasHiLoLines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL ChartGroup::GetHasRadarAxisLabels ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x40, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x40, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL ChartGroup::GetHasSeriesLines ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x41, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutHasSeriesLines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x41, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL ChartGroup::GetHasUpDownBars ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x42, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutHasUpDownBars ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x42, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline HiLoLinesPtr ChartGroup::GetHiLoLines ( ) {
    struct HiLoLines * _result = 0;
    _com_dispatch_method(this, 0x8f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HiLoLinesPtr(_result, false);
}

inline long ChartGroup::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long ChartGroup::GetOverlap ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x38, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutOverlap ( long _arg1 ) {
    _com_dispatch_method(this, 0x38, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline TickLabelsPtr ChartGroup::GetRadarAxisLabels ( ) {
    struct TickLabels * _result = 0;
    _com_dispatch_method(this, 0x90, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TickLabelsPtr(_result, false);
}

inline IDispatchPtr ChartGroup::SeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x44, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline SeriesLinesPtr ChartGroup::GetSeriesLines ( ) {
    struct SeriesLines * _result = 0;
    _com_dispatch_method(this, 0x91, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return SeriesLinesPtr(_result, false);
}

inline long ChartGroup::GetSubType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutSubType ( long _arg1 ) {
    _com_dispatch_method(this, 0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ChartGroup::GetType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutType ( long _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline UpBarsPtr ChartGroup::GetUpBars ( ) {
    struct UpBars * _result = 0;
    _com_dispatch_method(this, 0x8c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return UpBarsPtr(_result, false);
}

inline VARIANT_BOOL ChartGroup::GetVaryByCategories ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutVaryByCategories ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum XlSizeRepresents ChartGroup::GetSizeRepresents ( ) {
    enum XlSizeRepresents _result;
    _com_dispatch_method(this, 0x674, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutSizeRepresents ( enum XlSizeRepresents _arg1 ) {
    _com_dispatch_method(this, 0x674, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ChartGroup::GetBubbleScale ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x675, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutBubbleScale ( long _arg1 ) {
    _com_dispatch_method(this, 0x675, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL ChartGroup::GetShowNegativeBubbles ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x676, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x676, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline enum XlChartSplitType ChartGroup::GetSplitType ( ) {
    enum XlChartSplitType _result;
    _com_dispatch_method(this, 0x677, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutSplitType ( enum XlChartSplitType _arg1 ) {
    _com_dispatch_method(this, 0x677, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t ChartGroup::GetSplitValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x678, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void ChartGroup::PutSplitValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x678, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long ChartGroup::GetSecondPlotSize ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x679, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutSecondPlotSize ( long _arg1 ) {
    _com_dispatch_method(this, 0x679, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL ChartGroup::GetHas3DShading ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartGroup::PutHas3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface ChartGroups wrapper method implementations
//

inline _ApplicationPtr ChartGroups::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ChartGroups::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ChartGroups::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long ChartGroups::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ChartGroupPtr ChartGroups::Item ( const _variant_t & Index ) {
    struct ChartGroup * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ChartGroupPtr(_result, false);
}

inline IUnknownPtr ChartGroups::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Axes wrapper method implementations
//

inline _ApplicationPtr Axes::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Axes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Axes::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Axes::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline AxisPtr Axes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup ) {
    struct Axis * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0003", Type, AxisGroup);
    return AxisPtr(_result, false);
}

inline IUnknownPtr Axes::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Points wrapper method implementations
//

inline _ApplicationPtr Points::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Points::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Points::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Points::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline PointPtr Points::Item ( long Index ) {
    struct Point * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return PointPtr(_result, false);
}

inline IUnknownPtr Points::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Point wrapper method implementations
//

inline _ApplicationPtr Point::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Point::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Point::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Point::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x97, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c", Type, &LegendKey, &AutoText);
    return _variant_t(_result, false);
}

inline BorderPtr Point::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t Point::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Point::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline DataLabelPtr Point::GetDataLabel ( ) {
    struct DataLabel * _result = 0;
    _com_dispatch_method(this, 0x9e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DataLabelPtr(_result, false);
}

inline _variant_t Point::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline long Point::GetExplosion ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xb6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutExplosion ( long _arg1 ) {
    _com_dispatch_method(this, 0xb6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL Point::GetHasDataLabel ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutHasDataLabel ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x4d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline InteriorPtr Point::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL Point::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutInvertIfNegative ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Point::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x49, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutMarkerBackgroundColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlColorIndex Point::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Point::GetMarkerForegroundColor ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x4b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutMarkerForegroundColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlColorIndex Point::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Point::GetMarkerSize ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xe7, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutMarkerSize ( long _arg1 ) {
    _com_dispatch_method(this, 0xe7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlMarkerStyle Point::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    _com_dispatch_method(this, 0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutMarkerStyle ( enum XlMarkerStyle _arg1 ) {
    _com_dispatch_method(this, 0x48, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t Point::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline enum XlChartPictureType Point::GetPictureType ( ) {
    enum XlChartPictureType _result;
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutPictureType ( enum XlChartPictureType _arg1 ) {
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Point::GetPictureUnit ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutPictureUnit ( long _arg1 ) {
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t Point::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL Point::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutApplyPictToSides ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Point::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutApplyPictToFront ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Point::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutApplyPictToEnd ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Point::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Point::GetSecondaryPlot ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Point::PutSecondaryPlot ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline ChartFillFormatPtr Point::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

//
// dispinterface Series wrapper method implementations
//

inline _ApplicationPtr Series::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Series::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Series::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t Series::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x97, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c", Type, &LegendKey, &AutoText, &HasLeaderLines);
    return _variant_t(_result, false);
}

inline enum XlAxisGroup Series::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    _com_dispatch_method(this, 0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutAxisGroup ( enum XlAxisGroup _arg1 ) {
    _com_dispatch_method(this, 0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline BorderPtr Series::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t Series::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Series::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline IDispatchPtr Series::DataLabels ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x9d, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline _variant_t Series::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t Series::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x98, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003\x0003\x080c\x080c", Direction, Include, Type, &Amount, &MinusValues);
    return _variant_t(_result, false);
}

inline ErrorBarsPtr Series::GetErrorBars ( ) {
    struct ErrorBars * _result = 0;
    _com_dispatch_method(this, 0x9f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ErrorBarsPtr(_result, false);
}

inline long Series::GetExplosion ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xb6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutExplosion ( long _arg1 ) {
    _com_dispatch_method(this, 0xb6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t Series::GetFormula ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Series::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Series::GetFormulaLocal ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x107, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Series::PutFormulaLocal ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x107, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Series::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x108, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Series::PutFormulaR1C1 ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x108, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t Series::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x109, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Series::PutFormulaR1C1Local ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x109, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL Series::GetHasDataLabels ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutHasDataLabels ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x4e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Series::GetHasErrorBars ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutHasErrorBars ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xa0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline InteriorPtr Series::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr Series::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

inline VARIANT_BOOL Series::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutInvertIfNegative ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Series::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x49, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutMarkerBackgroundColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlColorIndex Series::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Series::GetMarkerForegroundColor ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x4b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutMarkerForegroundColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlColorIndex Series::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Series::GetMarkerSize ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xe7, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutMarkerSize ( long _arg1 ) {
    _com_dispatch_method(this, 0xe7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlMarkerStyle Series::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    _com_dispatch_method(this, 0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutMarkerStyle ( enum XlMarkerStyle _arg1 ) {
    _com_dispatch_method(this, 0x48, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t Series::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Series::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t Series::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline enum XlChartPictureType Series::GetPictureType ( ) {
    enum XlChartPictureType _result;
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutPictureType ( enum XlChartPictureType _arg1 ) {
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Series::GetPictureUnit ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutPictureUnit ( long _arg1 ) {
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Series::GetPlotOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xe4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutPlotOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0xe4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline IDispatchPtr Series::Points ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x46, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline _variant_t Series::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL Series::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutSmooth ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xa3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline IDispatchPtr Series::Trendlines ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x9a, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline long Series::GetType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutType ( long _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlChartType Series::GetChartType ( ) {
    enum XlChartType _result;
    _com_dispatch_method(this, 0x578, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutChartType ( enum XlChartType _arg1 ) {
    _com_dispatch_method(this, 0x578, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline HRESULT Series::ApplyCustomType ( enum XlChartType ChartType ) {
    return _com_dispatch_method(this, 0x579, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", ChartType);
}

inline _variant_t Series::GetValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xa4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Series::PutValues ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xa4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Series::GetXValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x457, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Series::PutXValues ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x457, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t Series::GetBubbleSizes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x680, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Series::PutBubbleSizes ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x680, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline enum XlBarShape Series::GetBarShape ( ) {
    enum XlBarShape _result;
    _com_dispatch_method(this, 0x57b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutBarShape ( enum XlBarShape _arg1 ) {
    _com_dispatch_method(this, 0x57b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL Series::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutApplyPictToSides ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Series::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutApplyPictToFront ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Series::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutApplyPictToEnd ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Series::GetHas3DEffect ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x681, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutHas3DEffect ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x681, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Series::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Series::GetHasLeaderLines ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x572, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Series::PutHasLeaderLines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x572, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline LeaderLinesPtr Series::GetLeaderLines ( ) {
    struct LeaderLines * _result = 0;
    _com_dispatch_method(this, 0x682, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return LeaderLinesPtr(_result, false);
}

//
// dispinterface SeriesCollection wrapper method implementations
//

inline _ApplicationPtr SeriesCollection::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator SeriesCollection::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr SeriesCollection::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline SeriesPtr SeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace ) {
    struct Series * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c\x0003\x080c\x080c\x080c", &Source, Rowcol, &SeriesLabels, &CategoryLabels, &Replace);
    return SeriesPtr(_result, false);
}

inline long SeriesCollection::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _variant_t SeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xe3, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c\x080c", &Source, &Rowcol, &CategoryLabels);
    return _variant_t(_result, false);
}

inline SeriesPtr SeriesCollection::Item ( const _variant_t & Index ) {
    struct Series * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return SeriesPtr(_result, false);
}

inline IUnknownPtr SeriesCollection::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline _variant_t SeriesCollection::Paste ( enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace, const _variant_t & NewSeries ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c\x080c", Rowcol, &SeriesLabels, &CategoryLabels, &Replace, &NewSeries);
    return _variant_t(_result, false);
}

inline SeriesPtr SeriesCollection::NewSeries ( ) {
    struct Series * _result = 0;
    _com_dispatch_method(this, 0x45d, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return SeriesPtr(_result, false);
}

//
// dispinterface DataLabel wrapper method implementations
//

inline _ApplicationPtr DataLabel::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DataLabel::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DataLabel::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t DataLabel::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t DataLabel::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr DataLabel::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t DataLabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline InteriorPtr DataLabel::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr DataLabel::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

inline _bstr_t DataLabel::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DataLabel::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr DataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline FontPtr DataLabel::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _variant_t DataLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataLabel::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline double DataLabel::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DataLabel::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _variant_t DataLabel::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataLabel::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DataLabel::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DataLabel::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t DataLabel::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DataLabel::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline double DataLabel::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DataLabel::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _variant_t DataLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataLabel::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long DataLabel::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DataLabel::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t DataLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataLabel::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DataLabel::GetAutoText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x87, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DataLabel::PutAutoText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x87, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t DataLabel::GetNumberFormat ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DataLabel::PutNumberFormat ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL DataLabel::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DataLabel::PutNumberFormatLinked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DataLabel::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataLabel::PutNumberFormatLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DataLabel::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xab, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DataLabel::PutShowLegendKey ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DataLabel::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataLabel::PutType ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline enum XlDataLabelPosition DataLabel::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DataLabel::PutPosition ( enum XlDataLabelPosition _arg1 ) {
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface DataLabels wrapper method implementations
//

inline _ApplicationPtr DataLabels::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DataLabels::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DataLabels::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t DataLabels::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t DataLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr DataLabels::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t DataLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline InteriorPtr DataLabels::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr DataLabels::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

inline FontPtr DataLabels::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _variant_t DataLabels::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataLabels::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline _variant_t DataLabels::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataLabels::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DataLabels::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DataLabels::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DataLabels::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataLabels::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long DataLabels::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DataLabels::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t DataLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataLabels::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DataLabels::GetAutoText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x87, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DataLabels::PutAutoText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x87, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t DataLabels::GetNumberFormat ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DataLabels::PutNumberFormat ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL DataLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DataLabels::PutNumberFormatLinked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DataLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataLabels::PutNumberFormatLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DataLabels::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xab, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DataLabels::PutShowLegendKey ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t DataLabels::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataLabels::PutType ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline enum XlDataLabelPosition DataLabels::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DataLabels::PutPosition ( enum XlDataLabelPosition _arg1 ) {
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long DataLabels::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline DataLabelPtr DataLabels::Item ( const _variant_t & Index ) {
    struct DataLabel * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return DataLabelPtr(_result, false);
}

inline IUnknownPtr DataLabels::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface LegendEntry wrapper method implementations
//

inline _ApplicationPtr LegendEntry::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator LegendEntry::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr LegendEntry::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t LegendEntry::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline FontPtr LegendEntry::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline long LegendEntry::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline LegendKeyPtr LegendEntry::GetLegendKey ( ) {
    struct LegendKey * _result = 0;
    _com_dispatch_method(this, 0xae, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return LegendKeyPtr(_result, false);
}

inline _variant_t LegendEntry::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t LegendEntry::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void LegendEntry::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline double LegendEntry::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double LegendEntry::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double LegendEntry::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double LegendEntry::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface LegendEntries wrapper method implementations
//

inline _ApplicationPtr LegendEntries::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator LegendEntries::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr LegendEntries::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long LegendEntries::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline LegendEntryPtr LegendEntries::Item ( const _variant_t & Index ) {
    struct LegendEntry * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return LegendEntryPtr(_result, false);
}

inline IUnknownPtr LegendEntries::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface LegendKey wrapper method implementations
//

inline _ApplicationPtr LegendKey::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator LegendKey::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr LegendKey::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline BorderPtr LegendKey::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t LegendKey::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t LegendKey::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline InteriorPtr LegendKey::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr LegendKey::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

inline VARIANT_BOOL LegendKey::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void LegendKey::PutInvertIfNegative ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long LegendKey::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x49, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void LegendKey::PutMarkerBackgroundColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlColorIndex LegendKey::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void LegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long LegendKey::GetMarkerForegroundColor ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x4b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void LegendKey::PutMarkerForegroundColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlColorIndex LegendKey::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void LegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long LegendKey::GetMarkerSize ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xe7, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void LegendKey::PutMarkerSize ( long _arg1 ) {
    _com_dispatch_method(this, 0xe7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlMarkerStyle LegendKey::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    _com_dispatch_method(this, 0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void LegendKey::PutMarkerStyle ( enum XlMarkerStyle _arg1 ) {
    _com_dispatch_method(this, 0x48, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long LegendKey::GetPictureType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void LegendKey::PutPictureType ( long _arg1 ) {
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long LegendKey::GetPictureUnit ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void LegendKey::PutPictureUnit ( long _arg1 ) {
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t LegendKey::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL LegendKey::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void LegendKey::PutSmooth ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xa3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline double LegendKey::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double LegendKey::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double LegendKey::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double LegendKey::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL LegendKey::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void LegendKey::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Trendlines wrapper method implementations
//

inline _ApplicationPtr Trendlines::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Trendlines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Trendlines::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline TrendlinePtr Trendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name ) {
    struct Trendline * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", Type, &Order, &Period, &Forward, &Backward, &Intercept, &DisplayEquation, &DisplayRSquared, &Name);
    return TrendlinePtr(_result, false);
}

inline long Trendlines::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline TrendlinePtr Trendlines::Item ( const _variant_t & Index ) {
    struct Trendline * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return TrendlinePtr(_result, false);
}

inline IUnknownPtr Trendlines::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Trendline wrapper method implementations
//

inline _ApplicationPtr Trendline::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Trendline::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Trendline::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Trendline::GetBackward ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Trendline::PutBackward ( long _arg1 ) {
    _com_dispatch_method(this, 0xb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline BorderPtr Trendline::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t Trendline::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline DataLabelPtr Trendline::GetDataLabel ( ) {
    struct DataLabel * _result = 0;
    _com_dispatch_method(this, 0x9e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DataLabelPtr(_result, false);
}

inline _variant_t Trendline::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline VARIANT_BOOL Trendline::GetDisplayEquation ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xbe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Trendline::PutDisplayEquation ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL Trendline::GetDisplayRSquared ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xbd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Trendline::PutDisplayRSquared ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xbd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Trendline::GetForward ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xbf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Trendline::PutForward ( long _arg1 ) {
    _com_dispatch_method(this, 0xbf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Trendline::GetIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double Trendline::GetIntercept ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0xba, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Trendline::PutIntercept ( double _arg1 ) {
    _com_dispatch_method(this, 0xba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline VARIANT_BOOL Trendline::GetInterceptIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Trendline::PutInterceptIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xbb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t Trendline::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Trendline::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL Trendline::GetNameIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xbc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Trendline::PutNameIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xbc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Trendline::GetOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xc0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Trendline::PutOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0xc0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Trendline::GetPeriod ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Trendline::PutPeriod ( long _arg1 ) {
    _com_dispatch_method(this, 0xb8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t Trendline::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline enum XlTrendlineType Trendline::GetType ( ) {
    enum XlTrendlineType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Trendline::PutType ( enum XlTrendlineType _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface Corners wrapper method implementations
//

inline _ApplicationPtr Corners::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Corners::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Corners::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Corners::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t Corners::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface SeriesLines wrapper method implementations
//

inline _ApplicationPtr SeriesLines::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator SeriesLines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr SeriesLines::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t SeriesLines::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t SeriesLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr SeriesLines::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t SeriesLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface HiLoLines wrapper method implementations
//

inline _ApplicationPtr HiLoLines::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator HiLoLines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr HiLoLines::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t HiLoLines::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t HiLoLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr HiLoLines::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t HiLoLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface Gridlines wrapper method implementations
//

inline _ApplicationPtr Gridlines::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Gridlines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Gridlines::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Gridlines::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t Gridlines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr Gridlines::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t Gridlines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface DropLines wrapper method implementations
//

inline _ApplicationPtr DropLines::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DropLines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DropLines::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t DropLines::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t DropLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr DropLines::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t DropLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface LeaderLines wrapper method implementations
//

inline _ApplicationPtr LeaderLines::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator LeaderLines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr LeaderLines::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline BorderPtr LeaderLines::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline HRESULT LeaderLines::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT LeaderLines::Select ( ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface UpBars wrapper method implementations
//

inline _ApplicationPtr UpBars::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator UpBars::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr UpBars::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t UpBars::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t UpBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr UpBars::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t UpBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline InteriorPtr UpBars::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr UpBars::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

//
// dispinterface DownBars wrapper method implementations
//

inline _ApplicationPtr DownBars::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DownBars::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DownBars::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t DownBars::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t DownBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr DownBars::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t DownBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline InteriorPtr DownBars::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr DownBars::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

//
// dispinterface Floor wrapper method implementations
//

inline _ApplicationPtr Floor::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Floor::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Floor::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Floor::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t Floor::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr Floor::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t Floor::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline InteriorPtr Floor::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr Floor::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

inline _variant_t Floor::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Floor::PutPictureType ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline HRESULT Floor::Paste ( ) {
    return _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface Walls wrapper method implementations
//

inline _ApplicationPtr Walls::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Walls::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Walls::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Walls::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t Walls::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr Walls::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t Walls::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline InteriorPtr Walls::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr Walls::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

inline _variant_t Walls::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Walls::PutPictureType ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline HRESULT Walls::Paste ( ) {
    return _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline _variant_t Walls::GetPictureUnit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Walls::PutPictureUnit ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface TickLabels wrapper method implementations
//

inline _ApplicationPtr TickLabels::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator TickLabels::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr TickLabels::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _variant_t TickLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline FontPtr TickLabels::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t TickLabels::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t TickLabels::GetNumberFormat ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void TickLabels::PutNumberFormat ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL TickLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TickLabels::PutNumberFormatLinked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t TickLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void TickLabels::PutNumberFormatLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline enum XlTickLabelOrientation TickLabels::GetOrientation ( ) {
    enum XlTickLabelOrientation _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void TickLabels::PutOrientation ( enum XlTickLabelOrientation _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t TickLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline long TickLabels::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void TickLabels::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t TickLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void TickLabels::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long TickLabels::GetDepth ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x762, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long TickLabels::GetOffset ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xfe, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void TickLabels::PutOffset ( long _arg1 ) {
    _com_dispatch_method(this, 0xfe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long TickLabels::GetAlignment ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1c5, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void TickLabels::PutAlignment ( long _arg1 ) {
    _com_dispatch_method(this, 0x1c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface PlotArea wrapper method implementations
//

inline _ApplicationPtr PlotArea::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PlotArea::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PlotArea::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t PlotArea::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t PlotArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr PlotArea::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t PlotArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double PlotArea::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void PlotArea::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline InteriorPtr PlotArea::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr PlotArea::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

inline double PlotArea::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void PlotArea::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double PlotArea::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void PlotArea::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double PlotArea::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void PlotArea::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double PlotArea::GetInsideLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x683, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double PlotArea::GetInsideTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x684, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double PlotArea::GetInsideWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x685, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double PlotArea::GetInsideHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x686, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface ChartArea wrapper method implementations
//

inline _ApplicationPtr ChartArea::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ChartArea::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ChartArea::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t ChartArea::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t ChartArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr ChartArea::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t ChartArea::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6f, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ChartArea::ClearContents ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x71, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ChartArea::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline FontPtr ChartArea::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline VARIANT_BOOL ChartArea::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ChartArea::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t ChartArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double ChartArea::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartArea::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline InteriorPtr ChartArea::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr ChartArea::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

inline double ChartArea::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartArea::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double ChartArea::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartArea::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double ChartArea::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void ChartArea::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _variant_t ChartArea::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void ChartArea::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface Legend wrapper method implementations
//

inline _ApplicationPtr Legend::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Legend::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Legend::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Legend::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t Legend::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr Legend::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t Legend::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline FontPtr Legend::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline IDispatchPtr Legend::LegendEntries ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xad, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline enum XlLegendPosition Legend::GetPosition ( ) {
    enum XlLegendPosition _result;
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Legend::PutPosition ( enum XlLegendPosition _arg1 ) {
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL Legend::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Legend::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _variant_t Legend::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x6f, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline double Legend::GetHeight ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Legend::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline InteriorPtr Legend::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr Legend::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

inline double Legend::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Legend::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Legend::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Legend::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline double Legend::GetWidth ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void Legend::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _variant_t Legend::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void Legend::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface ErrorBars wrapper method implementations
//

inline _ApplicationPtr ErrorBars::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ErrorBars::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ErrorBars::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t ErrorBars::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t ErrorBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr ErrorBars::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t ErrorBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline _variant_t ErrorBars::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline enum XlEndStyleCap ErrorBars::GetEndStyle ( ) {
    enum XlEndStyleCap _result;
    _com_dispatch_method(this, 0x464, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ErrorBars::PutEndStyle ( enum XlEndStyleCap _arg1 ) {
    _com_dispatch_method(this, 0x464, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface DataTable wrapper method implementations
//

inline _ApplicationPtr DataTable::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DataTable::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DataTable::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL DataTable::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xab, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DataTable::PutShowLegendKey ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DataTable::GetHasBorderHorizontal ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x687, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DataTable::PutHasBorderHorizontal ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x687, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DataTable::GetHasBorderVertical ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x688, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DataTable::PutHasBorderVertical ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x688, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DataTable::GetHasBorderOutline ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x689, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DataTable::PutHasBorderOutline ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x689, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline BorderPtr DataTable::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline FontPtr DataTable::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline HRESULT DataTable::Select ( ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DataTable::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline _variant_t DataTable::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DataTable::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface Phonetic wrapper method implementations
//

inline _ApplicationPtr Phonetic::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Phonetic::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Phonetic::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Phonetic::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Phonetic::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Phonetic::GetCharacterType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x68a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Phonetic::PutCharacterType ( long _arg1 ) {
    _com_dispatch_method(this, 0x68a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Phonetic::GetAlignment ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1c5, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Phonetic::PutAlignment ( long _arg1 ) {
    _com_dispatch_method(this, 0x1c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline FontPtr Phonetic::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _bstr_t Phonetic::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Phonetic::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface Shape wrapper method implementations
//

inline _ApplicationPtr Shape::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Shape::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Shape::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Shape::Apply ( ) {
    return _com_dispatch_method(this, 0x68b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT Shape::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline ShapePtr Shape::Duplicate ( ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

inline HRESULT Shape::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    return _com_dispatch_method(this, 0x68c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", FlipCmd);
}

inline HRESULT Shape::IncrementLeft ( float Increment ) {
    return _com_dispatch_method(this, 0x68e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

inline HRESULT Shape::IncrementRotation ( float Increment ) {
    return _com_dispatch_method(this, 0x690, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

inline HRESULT Shape::IncrementTop ( float Increment ) {
    return _com_dispatch_method(this, 0x691, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

inline HRESULT Shape::PickUp ( ) {
    return _com_dispatch_method(this, 0x692, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT Shape::RerouteConnections ( ) {
    return _com_dispatch_method(this, 0x693, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT Shape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    return _com_dispatch_method(this, 0x694, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004\x0003\x080c", Factor, RelativeToOriginalSize, &Scale);
}

inline HRESULT Shape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    return _com_dispatch_method(this, 0x698, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004\x0003\x080c", Factor, RelativeToOriginalSize, &Scale);
}

inline HRESULT Shape::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

inline HRESULT Shape::SetShapesDefaultProperties ( ) {
    return _com_dispatch_method(this, 0x699, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline ShapeRangePtr Shape::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline HRESULT Shape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    return _com_dispatch_method(this, 0x26e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", ZOrderCmd);
}

inline AdjustmentsPtr Shape::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    _com_dispatch_method(this, 0x69b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return AdjustmentsPtr(_result, false);
}

inline TextFramePtr Shape::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    _com_dispatch_method(this, 0x69c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TextFramePtr(_result, false);
}

inline enum Office::MsoAutoShapeType Shape::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    _com_dispatch_method(this, 0x69d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Shape::PutAutoShapeType ( enum Office::MsoAutoShapeType _arg1 ) {
    _com_dispatch_method(this, 0x69d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline CalloutFormatPtr Shape::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    _com_dispatch_method(this, 0x69e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CalloutFormatPtr(_result, false);
}

inline long Shape::GetConnectionSiteCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x69f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoTriState Shape::GetConnector ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ConnectorFormatPtr Shape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    _com_dispatch_method(this, 0x6a1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ConnectorFormatPtr(_result, false);
}

inline FillFormatPtr Shape::GetFill ( ) {
    struct FillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FillFormatPtr(_result, false);
}

inline GroupShapesPtr Shape::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    _com_dispatch_method(this, 0x6a2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GroupShapesPtr(_result, false);
}

inline float Shape::GetHeight ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void Shape::PutHeight ( float _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline enum Office::MsoTriState Shape::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a3, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline float Shape::GetLeft ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void Shape::PutLeft ( float _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline LineFormatPtr Shape::GetLine ( ) {
    struct LineFormat * _result = 0;
    _com_dispatch_method(this, 0x331, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return LineFormatPtr(_result, false);
}

inline enum Office::MsoTriState Shape::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Shape::PutLockAspectRatio ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x6a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t Shape::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Shape::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline ShapeNodesPtr Shape::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    _com_dispatch_method(this, 0x6a5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeNodesPtr(_result, false);
}

inline float Shape::GetRotation ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x3b, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void Shape::PutRotation ( float _arg1 ) {
    _com_dispatch_method(this, 0x3b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline PictureFormatPtr Shape::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    _com_dispatch_method(this, 0x65f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PictureFormatPtr(_result, false);
}

inline ShadowFormatPtr Shape::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShadowFormatPtr(_result, false);
}

inline TextEffectFormatPtr Shape::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    _com_dispatch_method(this, 0x6a6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TextEffectFormatPtr(_result, false);
}

inline ThreeDFormatPtr Shape::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    _com_dispatch_method(this, 0x6a7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ThreeDFormatPtr(_result, false);
}

inline float Shape::GetTop ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void Shape::PutTop ( float _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline enum Office::MsoShapeType Shape::GetType ( ) {
    enum Office::MsoShapeType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoTriState Shape::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a8, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _variant_t Shape::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x26d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline enum Office::MsoTriState Shape::GetVisible ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Shape::PutVisible ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline float Shape::GetWidth ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void Shape::PutWidth ( float _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline long Shape::GetZOrderPosition ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6a9, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HyperlinkPtr Shape::GetHyperlink ( ) {
    struct Hyperlink * _result = 0;
    _com_dispatch_method(this, 0x6aa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HyperlinkPtr(_result, false);
}

inline enum Office::MsoBlackWhiteMode Shape::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    _com_dispatch_method(this, 0x6ab, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Shape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode _arg1 ) {
    _com_dispatch_method(this, 0x6ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline IDispatchPtr Shape::GetDrawingObject ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x6ac, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Shape::GetOnAction ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Shape::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline VARIANT_BOOL Shape::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Shape::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline RangePtr Shape::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline RangePtr Shape::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

inline enum XlPlacement Shape::GetPlacement ( ) {
    enum XlPlacement _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Shape::PutPlacement ( enum XlPlacement _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline HRESULT Shape::Copy ( ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT Shape::Cut ( ) {
    return _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT Shape::CopyPicture ( const _variant_t & Appearance, const _variant_t & Format ) {
    return _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Appearance, &Format);
}

inline ControlFormatPtr Shape::GetControlFormat ( ) {
    struct ControlFormat * _result = 0;
    _com_dispatch_method(this, 0x6ad, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ControlFormatPtr(_result, false);
}

inline LinkFormatPtr Shape::GetLinkFormat ( ) {
    struct LinkFormat * _result = 0;
    _com_dispatch_method(this, 0x6ae, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return LinkFormatPtr(_result, false);
}

inline OLEFormatPtr Shape::GetOLEFormat ( ) {
    struct OLEFormat * _result = 0;
    _com_dispatch_method(this, 0x6af, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return OLEFormatPtr(_result, false);
}

inline enum XlFormControl Shape::GetFormControlType ( ) {
    enum XlFormControl _result;
    _com_dispatch_method(this, 0x6b0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t Shape::GetAlternativeText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x763, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Shape::PutAlternativeText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x763, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline Office::ScriptPtr Shape::GetScript ( ) {
    struct Office::Script * _result = 0;
    _com_dispatch_method(this, 0x764, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return Office::ScriptPtr(_result, false);
}

//
// dispinterface Shapes wrapper method implementations
//

inline _ApplicationPtr Shapes::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Shapes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Shapes::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Shapes::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapePtr Shapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::_Default ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapePtr(_result, false);
}

inline IUnknownPtr Shapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline ShapePtr Shapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6b1, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004\x0004\x0004", Type, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6b2, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004\x0004\x0004", Type, BeginX, BeginY, EndX, EndY);
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6b7, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &SafeArrayOfPoints);
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6b9, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004\x0004\x0004", Orientation, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6ba, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0004\x0004\x0004\x0004", BeginX, BeginY, EndX, EndY);
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddPicture ( _bstr_t Filename, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6bb, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x0003\x0003\x0004\x0004\x0004\x0004", (BSTR)Filename, LinkToFile, SaveWithDocument, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6be, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &SafeArrayOfPoints);
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6bf, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004\x0004\x0004", Type, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6c0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0008\x0008\x0004\x0003\x0003\x0004\x0004", PresetTextEffect, (BSTR)Text, (BSTR)FontName, FontSize, FontBold, FontItalic, Left, Top);
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6c6, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004\x0004\x0004", Orientation, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

inline FreeformBuilderPtr Shapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    _com_dispatch_method(this, 0x6c7, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004", EditingType, X1, Y1);
    return FreeformBuilderPtr(_result, false);
}

inline ShapeRangePtr Shapes::GetRange ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapeRangePtr(_result, false);
}

inline HRESULT Shapes::SelectAll ( ) {
    return _com_dispatch_method(this, 0x6c9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline ShapePtr Shapes::AddFormControl ( enum XlFormControl Type, long Left, long Top, long Width, long Height ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6ca, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0003\x0003\x0003\x0003", Type, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddOLEObject ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6cb, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &ClassType, &Filename, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel, &Left, &Top, &Width, &Height);
    return ShapePtr(_result, false);
}

//
// dispinterface ShapeRange wrapper method implementations
//

inline _ApplicationPtr ShapeRange::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ShapeRange::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ShapeRange::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long ShapeRange::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapePtr ShapeRange::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapePtr(_result, false);
}

inline ShapePtr ShapeRange::_Default ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapePtr(_result, false);
}

inline IUnknownPtr ShapeRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline HRESULT ShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo ) {
    return _com_dispatch_method(this, 0x6cc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", AlignCmd, RelativeTo);
}

inline HRESULT ShapeRange::Apply ( ) {
    return _com_dispatch_method(this, 0x68b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ShapeRange::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo ) {
    return _com_dispatch_method(this, 0x6ce, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", DistributeCmd, RelativeTo);
}

inline ShapeRangePtr ShapeRange::Duplicate ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline HRESULT ShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    return _com_dispatch_method(this, 0x68c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", FlipCmd);
}

inline HRESULT ShapeRange::IncrementLeft ( float Increment ) {
    return _com_dispatch_method(this, 0x68e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

inline HRESULT ShapeRange::IncrementRotation ( float Increment ) {
    return _com_dispatch_method(this, 0x690, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

inline HRESULT ShapeRange::IncrementTop ( float Increment ) {
    return _com_dispatch_method(this, 0x691, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

inline ShapePtr ShapeRange::Group ( ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

inline HRESULT ShapeRange::PickUp ( ) {
    return _com_dispatch_method(this, 0x692, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ShapeRange::RerouteConnections ( ) {
    return _com_dispatch_method(this, 0x693, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline ShapePtr ShapeRange::Regroup ( ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6d0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

inline HRESULT ShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    return _com_dispatch_method(this, 0x694, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004\x0003\x080c", Factor, RelativeToOriginalSize, &Scale);
}

inline HRESULT ShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    return _com_dispatch_method(this, 0x698, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004\x0003\x080c", Factor, RelativeToOriginalSize, &Scale);
}

inline HRESULT ShapeRange::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

inline HRESULT ShapeRange::SetShapesDefaultProperties ( ) {
    return _com_dispatch_method(this, 0x699, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline ShapeRangePtr ShapeRange::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

inline HRESULT ShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    return _com_dispatch_method(this, 0x26e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", ZOrderCmd);
}

inline AdjustmentsPtr ShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    _com_dispatch_method(this, 0x69b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return AdjustmentsPtr(_result, false);
}

inline TextFramePtr ShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    _com_dispatch_method(this, 0x69c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TextFramePtr(_result, false);
}

inline enum Office::MsoAutoShapeType ShapeRange::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    _com_dispatch_method(this, 0x69d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType _arg1 ) {
    _com_dispatch_method(this, 0x69d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline CalloutFormatPtr ShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    _com_dispatch_method(this, 0x69e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CalloutFormatPtr(_result, false);
}

inline long ShapeRange::GetConnectionSiteCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x69f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoTriState ShapeRange::GetConnector ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ConnectorFormatPtr ShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    _com_dispatch_method(this, 0x6a1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ConnectorFormatPtr(_result, false);
}

inline FillFormatPtr ShapeRange::GetFill ( ) {
    struct FillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FillFormatPtr(_result, false);
}

inline GroupShapesPtr ShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    _com_dispatch_method(this, 0x6a2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GroupShapesPtr(_result, false);
}

inline float ShapeRange::GetHeight ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void ShapeRange::PutHeight ( float _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline enum Office::MsoTriState ShapeRange::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a3, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline float ShapeRange::GetLeft ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void ShapeRange::PutLeft ( float _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline LineFormatPtr ShapeRange::GetLine ( ) {
    struct LineFormat * _result = 0;
    _com_dispatch_method(this, 0x331, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return LineFormatPtr(_result, false);
}

inline enum Office::MsoTriState ShapeRange::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ShapeRange::PutLockAspectRatio ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x6a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t ShapeRange::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ShapeRange::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline ShapeNodesPtr ShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    _com_dispatch_method(this, 0x6a5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeNodesPtr(_result, false);
}

inline float ShapeRange::GetRotation ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x3b, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void ShapeRange::PutRotation ( float _arg1 ) {
    _com_dispatch_method(this, 0x3b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline PictureFormatPtr ShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    _com_dispatch_method(this, 0x65f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PictureFormatPtr(_result, false);
}

inline ShadowFormatPtr ShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShadowFormatPtr(_result, false);
}

inline TextEffectFormatPtr ShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    _com_dispatch_method(this, 0x6a6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TextEffectFormatPtr(_result, false);
}

inline ThreeDFormatPtr ShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    _com_dispatch_method(this, 0x6a7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ThreeDFormatPtr(_result, false);
}

inline float ShapeRange::GetTop ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void ShapeRange::PutTop ( float _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline enum Office::MsoShapeType ShapeRange::GetType ( ) {
    enum Office::MsoShapeType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoTriState ShapeRange::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a8, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _variant_t ShapeRange::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x26d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline enum Office::MsoTriState ShapeRange::GetVisible ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ShapeRange::PutVisible ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline float ShapeRange::GetWidth ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void ShapeRange::PutWidth ( float _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline long ShapeRange::GetZOrderPosition ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6a9, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoBlackWhiteMode ShapeRange::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    _com_dispatch_method(this, 0x6ab, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode _arg1 ) {
    _com_dispatch_method(this, 0x6ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t ShapeRange::GetAlternativeText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x763, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ShapeRange::PutAlternativeText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x763, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface GroupShapes wrapper method implementations
//

inline _ApplicationPtr GroupShapes::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator GroupShapes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr GroupShapes::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long GroupShapes::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapePtr GroupShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapePtr(_result, false);
}

inline ShapePtr GroupShapes::_Default ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapePtr(_result, false);
}

inline IUnknownPtr GroupShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface TextFrame wrapper method implementations
//

inline _ApplicationPtr TextFrame::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator TextFrame::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr TextFrame::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline float TextFrame::GetMarginBottom ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x6d1, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void TextFrame::PutMarginBottom ( float _arg1 ) {
    _com_dispatch_method(this, 0x6d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline float TextFrame::GetMarginLeft ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x6d2, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void TextFrame::PutMarginLeft ( float _arg1 ) {
    _com_dispatch_method(this, 0x6d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline float TextFrame::GetMarginRight ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x6d3, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void TextFrame::PutMarginRight ( float _arg1 ) {
    _com_dispatch_method(this, 0x6d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline float TextFrame::GetMarginTop ( ) {
    float _result = 0;
    _com_dispatch_method(this, 0x6d4, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void TextFrame::PutMarginTop ( float _arg1 ) {
    _com_dispatch_method(this, 0x6d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline enum Office::MsoTextOrientation TextFrame::GetOrientation ( ) {
    enum Office::MsoTextOrientation _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void TextFrame::PutOrientation ( enum Office::MsoTextOrientation _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline CharactersPtr TextFrame::Characters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline enum XlHAlign TextFrame::GetHorizontalAlignment ( ) {
    enum XlHAlign _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void TextFrame::PutHorizontalAlignment ( enum XlHAlign _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum XlVAlign TextFrame::GetVerticalAlignment ( ) {
    enum XlVAlign _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void TextFrame::PutVerticalAlignment ( enum XlVAlign _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL TextFrame::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextFrame::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long TextFrame::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void TextFrame::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL TextFrame::GetAutoMargins ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void TextFrame::PutAutoMargins ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x6d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface ConnectorFormat wrapper method implementations
//

inline _ApplicationPtr ConnectorFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ConnectorFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ConnectorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, long ConnectionSite ) {
    return _com_dispatch_method(this, 0x6d6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", ConnectedShape, ConnectionSite);
}

inline HRESULT ConnectorFormat::BeginDisconnect ( ) {
    return _com_dispatch_method(this, 0x6d9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, long ConnectionSite ) {
    return _com_dispatch_method(this, 0x6da, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", ConnectedShape, ConnectionSite);
}

inline HRESULT ConnectorFormat::EndDisconnect ( ) {
    return _com_dispatch_method(this, 0x6db, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline enum Office::MsoTriState ConnectorFormat::GetBeginConnected ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6dc, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapePtr ConnectorFormat::GetBeginConnectedShape ( ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6dd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

inline long ConnectorFormat::GetBeginConnectionSite ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6de, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoTriState ConnectorFormat::GetEndConnected ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6df, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline ShapePtr ConnectorFormat::GetEndConnectedShape ( ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

inline long ConnectorFormat::GetEndConnectionSite ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6e1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum Office::MsoConnectorType ConnectorFormat::GetType ( ) {
    enum Office::MsoConnectorType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ConnectorFormat::PutType ( enum Office::MsoConnectorType _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface FreeformBuilder wrapper method implementations
//

inline _ApplicationPtr FreeformBuilder::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator FreeformBuilder::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr FreeformBuilder::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT FreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, const _variant_t & X2, const _variant_t & Y2, const _variant_t & X3, const _variant_t & Y3 ) {
    return _com_dispatch_method(this, 0x6e2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004\x080c\x080c\x080c\x080c", SegmentType, EditingType, X1, Y1, &X2, &Y2, &X3, &Y3);
}

inline ShapePtr FreeformBuilder::ConvertToShape ( ) {
    struct Shape * _result = 0;
    _com_dispatch_method(this, 0x6e6, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

//
// dispinterface ControlFormat wrapper method implementations
//

inline _ApplicationPtr ControlFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ControlFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ControlFormat::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT ControlFormat::AddItem ( _bstr_t Text, const _variant_t & Index ) {
    return _com_dispatch_method(this, 0x353, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x080c", (BSTR)Text, &Index);
}

inline HRESULT ControlFormat::RemoveAllItems ( ) {
    return _com_dispatch_method(this, 0x355, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ControlFormat::RemoveItem ( long Index, const _variant_t & Count ) {
    return _com_dispatch_method(this, 0x354, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x080c", Index, &Count);
}

inline long ControlFormat::GetDropDownLines ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::PutDropDownLines ( long _arg1 ) {
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL ControlFormat::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long ControlFormat::GetLargeChange ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::PutLargeChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t ControlFormat::GetLinkedCell ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ControlFormat::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _variant_t ControlFormat::List ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x35d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

inline long ControlFormat::GetListCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x351, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::PutListCount ( long _arg1 ) {
    _com_dispatch_method(this, 0x351, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _bstr_t ControlFormat::GetListFillRange ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void ControlFormat::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline long ControlFormat::GetListIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::PutListIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL ControlFormat::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long ControlFormat::GetMax ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::PutMax ( long _arg1 ) {
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ControlFormat::GetMin ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::PutMin ( long _arg1 ) {
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ControlFormat::GetMultiSelect ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::PutMultiSelect ( long _arg1 ) {
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL ControlFormat::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long ControlFormat::GetSmallChange ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::PutSmallChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ControlFormat::Get_Default ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long ControlFormat::GetValue ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void ControlFormat::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface OLEFormat wrapper method implementations
//

inline _ApplicationPtr OLEFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator OLEFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr OLEFormat::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT OLEFormat::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline IDispatchPtr OLEFormat::GetObject ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x419, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t OLEFormat::GetProgId ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline HRESULT OLEFormat::Verb ( const _variant_t & Verb ) {
    return _com_dispatch_method(this, 0x25e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Verb);
}

//
// dispinterface LinkFormat wrapper method implementations
//

inline _ApplicationPtr LinkFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator LinkFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr LinkFormat::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL LinkFormat::GetAutoUpdate ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x418, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void LinkFormat::PutAutoUpdate ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x418, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL LinkFormat::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void LinkFormat::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline HRESULT LinkFormat::Update ( ) {
    return _com_dispatch_method(this, 0x2a8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface PublishObjects wrapper method implementations
//

inline _ApplicationPtr PublishObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PublishObjects::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PublishObjects::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline PublishObjectPtr PublishObjects::Add ( enum XlSourceType SourceType, _bstr_t Filename, const _variant_t & Sheet, const _variant_t & Source, const _variant_t & HtmlType, const _variant_t & DivID, const _variant_t & Title ) {
    struct PublishObject * _result = 0;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0008\x080c\x080c\x080c\x080c\x080c", SourceType, (BSTR)Filename, &Sheet, &Source, &HtmlType, &DivID, &Title);
    return PublishObjectPtr(_result, false);
}

inline long PublishObjects::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline PublishObjectPtr PublishObjects::GetItem ( const _variant_t & Index ) {
    struct PublishObject * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PublishObjectPtr(_result, false);
}

inline PublishObjectPtr PublishObjects::Get_Default ( const _variant_t & Index ) {
    struct PublishObject * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PublishObjectPtr(_result, false);
}

inline IUnknownPtr PublishObjects::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

inline HRESULT PublishObjects::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT PublishObjects::Publish ( ) {
    return _com_dispatch_method(this, 0x767, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface OLEDBError wrapper method implementations
//

inline _ApplicationPtr OLEDBError::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator OLEDBError::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr OLEDBError::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t OLEDBError::GetSqlState ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x643, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _bstr_t OLEDBError::GetErrorString ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x5d2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline long OLEDBError::GetNative ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x769, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long OLEDBError::GetNumber ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1c3, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long OLEDBError::GetStage ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface OLEDBErrors wrapper method implementations
//

inline _ApplicationPtr OLEDBErrors::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator OLEDBErrors::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr OLEDBErrors::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long OLEDBErrors::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline OLEDBErrorPtr OLEDBErrors::Item ( long Index ) {
    struct OLEDBError * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return OLEDBErrorPtr(_result, false);
}

inline OLEDBErrorPtr OLEDBErrors::Get_Default ( long Index ) {
    struct OLEDBError * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return OLEDBErrorPtr(_result, false);
}

inline IUnknownPtr OLEDBErrors::_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Phonetics wrapper method implementations
//

inline _ApplicationPtr Phonetics::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Phonetics::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Phonetics::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Phonetics::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long Phonetics::GetStart ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x260, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long Phonetics::GetLength ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x261, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL Phonetics::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Phonetics::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline long Phonetics::GetCharacterType ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x68a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Phonetics::PutCharacterType ( long _arg1 ) {
    _com_dispatch_method(this, 0x68a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline long Phonetics::GetAlignment ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1c5, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void Phonetics::PutAlignment ( long _arg1 ) {
    _com_dispatch_method(this, 0x1c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline FontPtr Phonetics::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline IDispatchPtr Phonetics::GetItem ( long Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return IDispatchPtr(_result, false);
}

inline HRESULT Phonetics::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT Phonetics::Add ( long Start, long Length, _bstr_t Text ) {
    return _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0008", Start, Length, (BSTR)Text);
}

inline _bstr_t Phonetics::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Phonetics::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline IDispatchPtr Phonetics::Get_Default ( long Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr Phonetics::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface PivotLayout wrapper method implementations
//

inline _ApplicationPtr PivotLayout::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PivotLayout::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr PivotLayout::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr PivotLayout::GetColumnFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2c9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr PivotLayout::GetDataFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2cb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr PivotLayout::GetPageFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2ca, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr PivotLayout::GetRowFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2c8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr PivotLayout::GetHiddenFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2c7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr PivotLayout::GetVisibleFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2c6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr PivotLayout::GetPivotFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2ce, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

inline CubeFieldsPtr PivotLayout::GetCubeFields ( ) {
    struct CubeFields * _result = 0;
    _com_dispatch_method(this, 0x72f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CubeFieldsPtr(_result, false);
}

inline PivotCachePtr PivotLayout::GetPivotCache ( ) {
    struct PivotCache * _result = 0;
    _com_dispatch_method(this, 0x5d8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotCachePtr(_result, false);
}

inline PivotTablePtr PivotLayout::GetPivotTable ( ) {
    struct PivotTable * _result = 0;
    _com_dispatch_method(this, 0x2cc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotTablePtr(_result, false);
}

inline _bstr_t PivotLayout::GetInnerDetail ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x2ba, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void PivotLayout::PutInnerDetail ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x2ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline HRESULT PivotLayout::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AppendField ) {
    return _com_dispatch_method(this, 0x2c4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c", &RowFields, &ColumnFields, &PageFields, &AppendField);
}

//
// dispinterface DisplayUnitLabel wrapper method implementations
//

inline _ApplicationPtr DisplayUnitLabel::GetApplication ( ) {
    struct _Application * _result = 0;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DisplayUnitLabel::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr DisplayUnitLabel::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t DisplayUnitLabel::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline _variant_t DisplayUnitLabel::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline BorderPtr DisplayUnitLabel::GetBorder ( ) {
    struct Border * _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

inline _variant_t DisplayUnitLabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline InteriorPtr DisplayUnitLabel::GetInterior ( ) {
    struct Interior * _result = 0;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr DisplayUnitLabel::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

inline _bstr_t DisplayUnitLabel::GetCaption ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DisplayUnitLabel::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline CharactersPtr DisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

inline FontPtr DisplayUnitLabel::GetFont ( ) {
    struct Font * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

inline _variant_t DisplayUnitLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline double DisplayUnitLabel::GetLeft ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DisplayUnitLabel::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _variant_t DisplayUnitLabel::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DisplayUnitLabel::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline VARIANT_BOOL DisplayUnitLabel::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DisplayUnitLabel::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline _bstr_t DisplayUnitLabel::GetText ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DisplayUnitLabel::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline double DisplayUnitLabel::GetTop ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DisplayUnitLabel::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

inline _variant_t DisplayUnitLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DisplayUnitLabel::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

inline long DisplayUnitLabel::GetReadingOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DisplayUnitLabel::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline _variant_t DisplayUnitLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline void DisplayUnitLabel::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// interface IDummy wrapper method implementations
//

inline HRESULT IDummy::_ActiveSheetOrChart ( ) {
    HRESULT _hr = raw__ActiveSheetOrChart();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDummy::MSRBG ( ) {
    HRESULT _hr = raw_MSRBG();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDummy::ChDir ( ) {
    HRESULT _hr = raw_ChDir();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDummy::DoScript ( ) {
    HRESULT _hr = raw_DoScript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDummy::DirectObject ( ) {
    HRESULT _hr = raw_DirectObject();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDummy::RefreshDocument ( ) {
    HRESULT _hr = raw_RefreshDocument();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWindows wrapper method implementations
//

inline _ApplicationPtr IWindows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IWindows::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IWindows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IWindows::Arrange ( enum XlArrangeStyle ArrangeStyle, const _variant_t & ActiveWorkbook, const _variant_t & SyncHorizontal, const _variant_t & SyncVertical ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Arrange(ArrangeStyle, ActiveWorkbook, SyncHorizontal, SyncVertical, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IWindows::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline WindowPtr IWindows::GetItem ( const _variant_t & Index ) {
    struct Window * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

inline IUnknownPtr IWindows::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline WindowPtr IWindows::Get_Default ( const _variant_t & Index ) {
    struct Window * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

//
// interface IWorksheetFunction wrapper method implementations
//

inline _ApplicationPtr IWorksheetFunction::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IWorksheetFunction::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IWorksheetFunction::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IWorksheetFunction::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__WSFunction(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IWorksheetFunction::Count ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Count(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IWorksheetFunction::IsNA ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsNA(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IWorksheetFunction::IsError ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsError(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Sum ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Sum(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Average ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Average(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Min ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Min(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Max ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Max(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Npv ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Npv(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::StDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_StDev(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IWorksheetFunction::Dollar ( double Arg1, const _variant_t & Arg2 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Dollar(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IWorksheetFunction::Fixed ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Fixed(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline double IWorksheetFunction::Pi ( ) {
    double _result = 0;
    HRESULT _hr = raw_Pi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Ln ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Ln(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Log10 ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Log10(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Round ( double Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Round(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IWorksheetFunction::Lookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Lookup(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IWorksheetFunction::Index ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Index(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IWorksheetFunction::Rept ( _bstr_t Arg1, double Arg2 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Rept(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IWorksheetFunction::And ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_And(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IWorksheetFunction::Or ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Or(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::DCount ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_DCount(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::DSum ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_DSum(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::DAverage ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_DAverage(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::DMin ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_DMin(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::DMax ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_DMax(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::DStDev ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_DStDev(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Var ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Var(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::DVar ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_DVar(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IWorksheetFunction::Text ( const _variant_t & Arg1, _bstr_t Arg2 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Text(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IWorksheetFunction::LinEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LinEst(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IWorksheetFunction::Trend ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Trend(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IWorksheetFunction::LogEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LogEst(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IWorksheetFunction::Growth ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Growth(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IWorksheetFunction::Pv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    HRESULT _hr = raw_Pv(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Fv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    HRESULT _hr = raw_Fv(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::NPer ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    HRESULT _hr = raw_NPer(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Pmt ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    HRESULT _hr = raw_Pmt(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Rate ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6 ) {
    double _result = 0;
    HRESULT _hr = raw_Rate(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::MIrr ( const _variant_t & Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_MIrr(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Irr ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Irr(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Match ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_Match(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Weekday ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Weekday(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Search ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_Search(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IWorksheetFunction::Transpose ( const _variant_t & Arg1 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Transpose(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IWorksheetFunction::Atan2 ( double Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Atan2(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Asin ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Asin(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Acos ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Acos(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IWorksheetFunction::Choose ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Choose(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IWorksheetFunction::HLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_HLookup(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IWorksheetFunction::VLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_VLookup(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IWorksheetFunction::Log ( double Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Log(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IWorksheetFunction::Proper ( _bstr_t Arg1 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Proper(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IWorksheetFunction::Trim ( _bstr_t Arg1 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Trim(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IWorksheetFunction::Replace ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Replace(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IWorksheetFunction::Substitute ( _bstr_t Arg1, _bstr_t Arg2, _bstr_t Arg3, const _variant_t & Arg4 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Substitute(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline double IWorksheetFunction::Find ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_Find(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IWorksheetFunction::IsErr ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsErr(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IWorksheetFunction::IsText ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsText(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IWorksheetFunction::IsNumber ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsNumber(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Sln ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_Sln(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Syd ( double Arg1, double Arg2, double Arg3, double Arg4 ) {
    double _result = 0;
    HRESULT _hr = raw_Syd(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Ddb ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    HRESULT _hr = raw_Ddb(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IWorksheetFunction::Clean ( _bstr_t Arg1 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Clean(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline double IWorksheetFunction::MDeterm ( const _variant_t & Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_MDeterm(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IWorksheetFunction::MInverse ( const _variant_t & Arg1 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_MInverse(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IWorksheetFunction::MMult ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_MMult(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IWorksheetFunction::Ipmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 ) {
    double _result = 0;
    HRESULT _hr = raw_Ipmt(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Ppmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 ) {
    double _result = 0;
    HRESULT _hr = raw_Ppmt(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::CountA ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_CountA(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Product ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Product(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Fact ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Fact(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::DProduct ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_DProduct(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IWorksheetFunction::IsNonText ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsNonText(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::StDevP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_StDevP(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::VarP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_VarP(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::DStDevP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_DStDevP(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::DVarP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_DVarP(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IWorksheetFunction::IsLogical ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLogical(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::DCountA ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_DCountA(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IWorksheetFunction::USDollar ( double Arg1, double Arg2 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_USDollar(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline double IWorksheetFunction::FindB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_FindB(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::SearchB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_SearchB(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IWorksheetFunction::ReplaceB ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ReplaceB(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline double IWorksheetFunction::RoundUp ( double Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_RoundUp(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::RoundDown ( double Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_RoundDown(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Rank ( double Arg1, struct Range * Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_Rank(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Days360 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_Days360(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Vdb ( double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, const _variant_t & Arg6, const _variant_t & Arg7 ) {
    double _result = 0;
    HRESULT _hr = raw_Vdb(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Median ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Median(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::SumProduct ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_SumProduct(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Sinh ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Sinh(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Cosh ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Cosh(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Tanh ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Tanh(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Asinh ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Asinh(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Acosh ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Acosh(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Atanh ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Atanh(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IWorksheetFunction::DGet ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_DGet(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IWorksheetFunction::Db ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    HRESULT _hr = raw_Db(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IWorksheetFunction::Frequency ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Frequency(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IWorksheetFunction::AveDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_AveDev(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::BetaDist ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    HRESULT _hr = raw_BetaDist(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::GammaLn ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_GammaLn(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::BetaInv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result = 0;
    HRESULT _hr = raw_BetaInv(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::BinomDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result = 0;
    HRESULT _hr = raw_BinomDist(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::ChiDist ( double Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_ChiDist(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::ChiInv ( double Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_ChiInv(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Combin ( double Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Combin(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Confidence ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_Confidence(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::CritBinom ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_CritBinom(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Even ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Even(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::ExponDist ( double Arg1, double Arg2, VARIANT_BOOL Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_ExponDist(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::FDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_FDist(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::FInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_FInv(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Fisher ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Fisher(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::FisherInv ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_FisherInv(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Floor ( double Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Floor(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::GammaDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result = 0;
    HRESULT _hr = raw_GammaDist(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::GammaInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_GammaInv(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Ceiling ( double Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Ceiling(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::HypGeomDist ( double Arg1, double Arg2, double Arg3, double Arg4 ) {
    double _result = 0;
    HRESULT _hr = raw_HypGeomDist(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::LogNormDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_LogNormDist(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::LogInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_LogInv(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::NegBinomDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_NegBinomDist(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::NormDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result = 0;
    HRESULT _hr = raw_NormDist(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::NormSDist ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_NormSDist(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::NormInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_NormInv(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::NormSInv ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_NormSInv(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Standardize ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_Standardize(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Odd ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Odd(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Permut ( double Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Permut(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Poisson ( double Arg1, double Arg2, VARIANT_BOOL Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_Poisson(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::TDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_TDist(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Weibull ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result = 0;
    HRESULT _hr = raw_Weibull(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::SumXMY2 ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_SumXMY2(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::SumX2MY2 ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_SumX2MY2(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::SumX2PY2 ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_SumX2PY2(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::ChiTest ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_ChiTest(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Correl ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Correl(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Covar ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Covar(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Forecast ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_Forecast(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::FTest ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_FTest(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Intercept ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Intercept(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Pearson ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Pearson(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::RSq ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_RSq(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::StEyx ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_StEyx(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Slope ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Slope(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::TTest ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, double Arg4 ) {
    double _result = 0;
    HRESULT _hr = raw_TTest(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Prob ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, const _variant_t & Arg4 ) {
    double _result = 0;
    HRESULT _hr = raw_Prob(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::DevSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_DevSq(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::GeoMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_GeoMean(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::HarMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_HarMean(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::SumSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_SumSq(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Kurt ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Kurt(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Skew ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Skew(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::ZTest ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_ZTest(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Large ( const _variant_t & Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Large(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Small ( const _variant_t & Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Small(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Quartile ( const _variant_t & Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Quartile(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Percentile ( const _variant_t & Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Percentile(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::PercentRank ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_PercentRank(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Mode ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Mode(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::TrimMean ( const _variant_t & Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_TrimMean(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::TInv ( double Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_TInv(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Power ( double Arg1, double Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_Power(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Radians ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Radians(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Degrees ( double Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_Degrees(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Subtotal ( double Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result = 0;
    HRESULT _hr = raw_Subtotal(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::SumIf ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result = 0;
    HRESULT _hr = raw_SumIf(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::CountIf ( struct Range * Arg1, const _variant_t & Arg2 ) {
    double _result = 0;
    HRESULT _hr = raw_CountIf(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::CountBlank ( struct Range * Arg1 ) {
    double _result = 0;
    HRESULT _hr = raw_CountBlank(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWorksheetFunction::Ispmt ( double Arg1, double Arg2, double Arg3, double Arg4 ) {
    double _result = 0;
    HRESULT _hr = raw_Ispmt(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IWorksheetFunction::Roman ( double Arg1, const _variant_t & Arg2 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Roman(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IWorksheetFunction::Asc ( _bstr_t Arg1 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Asc(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IWorksheetFunction::Dbcs ( _bstr_t Arg1 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Dbcs(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IWorksheetFunction::Phonetic ( struct Range * Arg1 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Phonetic(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Sheets wrapper method implementations
//

inline _ApplicationPtr Sheets::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Sheets::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr Sheets::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Sheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Add(Before, After, Count, Type, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT Sheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long Sheets::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT Sheets::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Sheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type, long lcid ) {
    HRESULT _hr = raw_FillAcrossSheets(Range, Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr Sheets::GetItem ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT Sheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr Sheets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT Sheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Sheets::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Sheets::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HPageBreaksPtr Sheets::GetHPageBreaks ( ) {
    struct HPageBreaks * _result = 0;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

inline VPageBreaksPtr Sheets::GetVPageBreaks ( ) {
    struct VPageBreaks * _result = 0;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

inline _variant_t Sheets::GetVisible ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void Sheets::PutVisible ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr Sheets::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT Sheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHPageBreaks wrapper method implementations
//

inline _ApplicationPtr IHPageBreaks::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IHPageBreaks::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IHPageBreaks::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IHPageBreaks::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HPageBreakPtr IHPageBreaks::GetItem ( long Index ) {
    struct HPageBreak * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreakPtr(_result, false);
}

inline HPageBreakPtr IHPageBreaks::Get_Default ( long Index ) {
    struct HPageBreak * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreakPtr(_result, false);
}

inline IUnknownPtr IHPageBreaks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HPageBreakPtr IHPageBreaks::Add ( IDispatch * Before ) {
    struct HPageBreak * _result = 0;
    HRESULT _hr = raw_Add(Before, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreakPtr(_result, false);
}

//
// interface IVPageBreaks wrapper method implementations
//

inline _ApplicationPtr IVPageBreaks::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IVPageBreaks::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IVPageBreaks::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IVPageBreaks::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VPageBreakPtr IVPageBreaks::GetItem ( long Index ) {
    struct VPageBreak * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreakPtr(_result, false);
}

inline VPageBreakPtr IVPageBreaks::Get_Default ( long Index ) {
    struct VPageBreak * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreakPtr(_result, false);
}

inline IUnknownPtr IVPageBreaks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline VPageBreakPtr IVPageBreaks::Add ( IDispatch * Before ) {
    struct VPageBreak * _result = 0;
    HRESULT _hr = raw_Add(Before, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreakPtr(_result, false);
}

//
// interface IRecentFiles wrapper method implementations
//

inline _ApplicationPtr IRecentFiles::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IRecentFiles::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IRecentFiles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IRecentFiles::GetMaximum ( ) {
    long _result = 0;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRecentFiles::PutMaximum ( long RHS ) {
    HRESULT _hr = put_Maximum(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IRecentFiles::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline RecentFilePtr IRecentFiles::GetItem ( long Index ) {
    struct RecentFile * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecentFilePtr(_result, false);
}

inline RecentFilePtr IRecentFiles::Get_Default ( long Index ) {
    struct RecentFile * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecentFilePtr(_result, false);
}

inline RecentFilePtr IRecentFiles::Add ( _bstr_t Name ) {
    struct RecentFile * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecentFilePtr(_result, false);
}

inline IUnknownPtr IRecentFiles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _Worksheet wrapper method implementations
//

inline _ApplicationPtr _Worksheet::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator _Worksheet::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _Worksheet::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Worksheet::Activate ( long lcid ) {
    HRESULT _hr = raw_Activate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Worksheet::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Worksheet::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Worksheet::GetCodeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _Worksheet::Get_CodeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Worksheet::Put_CodeName ( _bstr_t RHS ) {
    HRESULT _hr = put__CodeName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Worksheet::GetIndex ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Index(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Worksheet::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Worksheet::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Worksheet::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Worksheet::GetNext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t _Worksheet::GetOnDoubleClick ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnDoubleClick(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Worksheet::PutOnDoubleClick ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnDoubleClick(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Worksheet::GetOnSheetActivate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSheetActivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Worksheet::PutOnSheetActivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetActivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Worksheet::GetOnSheetDeactivate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSheetDeactivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Worksheet::PutOnSheetDeactivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetDeactivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PageSetupPtr _Worksheet::GetPageSetup ( ) {
    struct PageSetup * _result = 0;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

inline IDispatchPtr _Worksheet::GetPrevious ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Worksheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Worksheet::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Worksheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid ) {
    HRESULT _hr = raw_Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Worksheet::GetProtectContents ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectContents(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Worksheet::GetProtectDrawingObjects ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectDrawingObjects(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Worksheet::GetProtectionMode ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Worksheet::GetProtectScenarios ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectScenarios(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Worksheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid ) {
    HRESULT _hr = raw_SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Worksheet::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Worksheet::Unprotect ( const _variant_t & Password, long lcid ) {
    HRESULT _hr = raw_Unprotect(Password, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum XlSheetVisibility _Worksheet::GetVisible ( long lcid ) {
    enum XlSheetVisibility _result;
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutVisible ( long lcid, enum XlSheetVisibility RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapesPtr _Worksheet::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

inline VARIANT_BOOL _Worksheet::GetTransitionExpEval ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TransitionExpEval(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutTransitionExpEval ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TransitionExpEval(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Worksheet::Arcs ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Arcs(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _Worksheet::GetAutoFilterMode ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoFilterMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutAutoFilterMode ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoFilterMode(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Worksheet::SetBackgroundPicture ( _bstr_t Filename ) {
    HRESULT _hr = raw_SetBackgroundPicture(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _Worksheet::Buttons ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Buttons(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Worksheet::Calculate ( long lcid ) {
    HRESULT _hr = raw_Calculate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Worksheet::GetEnableCalculation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableCalculation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutEnableCalculation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableCalculation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr _Worksheet::GetCells ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline IDispatchPtr _Worksheet::ChartObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ChartObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Worksheet::CheckBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CheckBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Worksheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid ) {
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline RangePtr _Worksheet::GetCircularReference ( long lcid ) {
    struct Range * _result = 0;
    HRESULT _hr = get_CircularReference(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline HRESULT _Worksheet::ClearArrows ( long lcid ) {
    HRESULT _hr = raw_ClearArrows(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline RangePtr _Worksheet::GetColumns ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline enum XlConsolidationFunction _Worksheet::GetConsolidationFunction ( long lcid ) {
    enum XlConsolidationFunction _result;
    HRESULT _hr = get_ConsolidationFunction(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t _Worksheet::GetConsolidationOptions ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ConsolidationOptions(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _Worksheet::GetConsolidationSources ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ConsolidationSources(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL _Worksheet::GetDisplayAutomaticPageBreaks ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayAutomaticPageBreaks(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutDisplayAutomaticPageBreaks ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayAutomaticPageBreaks(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Worksheet::Drawings ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Drawings(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Worksheet::DrawingObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DrawingObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Worksheet::DropDowns ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DropDowns(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _Worksheet::GetEnableAutoFilter ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAutoFilter(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutEnableAutoFilter ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableAutoFilter(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlEnableSelection _Worksheet::GetEnableSelection ( ) {
    enum XlEnableSelection _result;
    HRESULT _hr = get_EnableSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutEnableSelection ( enum XlEnableSelection RHS ) {
    HRESULT _hr = put_EnableSelection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Worksheet::GetEnableOutlining ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableOutlining(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutEnableOutlining ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableOutlining(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Worksheet::GetEnablePivotTable ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnablePivotTable(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutEnablePivotTable ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnablePivotTable(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Worksheet::Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _Worksheet::_Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL _Worksheet::GetFilterMode ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FilterMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Worksheet::ResetAllPageBreaks ( ) {
    HRESULT _hr = raw_ResetAllPageBreaks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _Worksheet::GroupBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GroupBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Worksheet::GroupObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GroupObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Worksheet::Labels ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Labels(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Worksheet::Lines ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Lines(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Worksheet::ListBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ListBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline NamesPtr _Worksheet::GetNames ( ) {
    struct Names * _result = 0;
    HRESULT _hr = get_Names(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamesPtr(_result, false);
}

inline IDispatchPtr _Worksheet::OLEObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_OLEObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t _Worksheet::GetOnCalculate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnCalculate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Worksheet::PutOnCalculate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnCalculate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Worksheet::GetOnData ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnData(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Worksheet::PutOnData ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnData(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Worksheet::GetOnEntry ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnEntry(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Worksheet::PutOnEntry ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnEntry(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Worksheet::OptionButtons ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_OptionButtons(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline OutlinePtr _Worksheet::GetOutline ( ) {
    struct Outline * _result = 0;
    HRESULT _hr = get_Outline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlinePtr(_result, false);
}

inline IDispatchPtr _Worksheet::Ovals ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Ovals(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Worksheet::Paste ( const _variant_t & Destination, const _variant_t & Link, long lcid ) {
    HRESULT _hr = raw_Paste(Destination, Link, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Worksheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, long lcid ) {
    HRESULT _hr = raw_PasteSpecial(Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _Worksheet::Pictures ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Pictures(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Worksheet::PivotTables ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_PivotTables(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline PivotTablePtr _Worksheet::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection, long lcid ) {
    struct PivotTable * _result = 0;
    HRESULT _hr = raw_PivotTableWizard(SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

inline RangePtr _Worksheet::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Range(Cell1, Cell2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline IDispatchPtr _Worksheet::Rectangles ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Rectangles(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr _Worksheet::GetRows ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline IDispatchPtr _Worksheet::Scenarios ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Scenarios(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t _Worksheet::GetScrollArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScrollArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Worksheet::PutScrollArea ( _bstr_t RHS ) {
    HRESULT _hr = put_ScrollArea(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Worksheet::ScrollBars ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ScrollBars(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Worksheet::ShowAllData ( long lcid ) {
    HRESULT _hr = raw_ShowAllData(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Worksheet::ShowDataForm ( long lcid ) {
    HRESULT _hr = raw_ShowDataForm(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _Worksheet::Spinners ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Spinners(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline double _Worksheet::GetStandardHeight ( long lcid ) {
    double _result = 0;
    HRESULT _hr = get_StandardHeight(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double _Worksheet::GetStandardWidth ( long lcid ) {
    double _result = 0;
    HRESULT _hr = get_StandardWidth(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutStandardWidth ( long lcid, double RHS ) {
    HRESULT _hr = put_StandardWidth(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Worksheet::TextBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_TextBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _Worksheet::GetTransitionFormEntry ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TransitionFormEntry(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutTransitionFormEntry ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TransitionFormEntry(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlSheetType _Worksheet::GetType ( long lcid ) {
    enum XlSheetType _result;
    HRESULT _hr = get_Type(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline RangePtr _Worksheet::GetUsedRange ( long lcid ) {
    struct Range * _result = 0;
    HRESULT _hr = get_UsedRange(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline HPageBreaksPtr _Worksheet::GetHPageBreaks ( ) {
    struct HPageBreaks * _result = 0;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

inline VPageBreaksPtr _Worksheet::GetVPageBreaks ( ) {
    struct VPageBreaks * _result = 0;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

inline QueryTablesPtr _Worksheet::GetQueryTables ( ) {
    struct QueryTables * _result = 0;
    HRESULT _hr = get_QueryTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return QueryTablesPtr(_result, false);
}

inline VARIANT_BOOL _Worksheet::GetDisplayPageBreaks ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutDisplayPageBreaks ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayPageBreaks(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CommentsPtr _Worksheet::GetComments ( ) {
    struct Comments * _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

inline HyperlinksPtr _Worksheet::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

inline HRESULT _Worksheet::ClearCircles ( ) {
    HRESULT _hr = raw_ClearCircles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Worksheet::CircleInvalid ( ) {
    HRESULT _hr = raw_CircleInvalid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _Worksheet::Get_DisplayRightToLeft ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get__DisplayRightToLeft(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::Put_DisplayRightToLeft ( long lcid, long RHS ) {
    HRESULT _hr = put__DisplayRightToLeft(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline AutoFilterPtr _Worksheet::GetAutoFilter ( ) {
    struct AutoFilter * _result = 0;
    HRESULT _hr = get_AutoFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoFilterPtr(_result, false);
}

inline VARIANT_BOOL _Worksheet::GetDisplayRightToLeft ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayRightToLeft(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Worksheet::PutDisplayRightToLeft ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRightToLeft(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::ScriptsPtr _Worksheet::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

inline HRESULT _Worksheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Worksheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript, long lcid ) {
    HRESULT _hr = raw__CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, IgnoreFinalYaa, SpellScript, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IStyle wrapper method implementations
//

inline _ApplicationPtr IStyle::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IStyle::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IStyle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IStyle::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IStyle::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline BordersPtr IStyle::GetBorders ( ) {
    struct Borders * _result = 0;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

inline _variant_t IStyle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr IStyle::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline VARIANT_BOOL IStyle::GetFormulaHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FormulaHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutFormulaHidden ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_FormulaHidden(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlHAlign IStyle::GetHorizontalAlignment ( ) {
    enum XlHAlign _result;
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutHorizontalAlignment ( enum XlHAlign RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IStyle::GetIncludeAlignment ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutIncludeAlignment ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IStyle::GetIncludeBorder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutIncludeBorder ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeBorder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IStyle::GetIncludeFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutIncludeFont ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IStyle::GetIncludeNumber ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutIncludeNumber ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeNumber(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IStyle::GetIncludePatterns ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludePatterns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutIncludePatterns ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludePatterns(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IStyle::GetIncludeProtection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeProtection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutIncludeProtection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeProtection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IStyle::GetIndentLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_IndentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutIndentLevel ( long RHS ) {
    HRESULT _hr = put_IndentLevel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr IStyle::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL IStyle::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IStyle::GetMergeCells ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MergeCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IStyle::PutMergeCells ( const _variant_t & RHS ) {
    HRESULT _hr = put_MergeCells(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IStyle::GetName ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IStyle::GetNameLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IStyle::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IStyle::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IStyle::GetNumberFormatLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IStyle::PutNumberFormatLocal ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlOrientation IStyle::GetOrientation ( ) {
    enum XlOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutOrientation ( enum XlOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IStyle::GetShrinkToFit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShrinkToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutShrinkToFit ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShrinkToFit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IStyle::GetValue ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum XlVAlign IStyle::GetVerticalAlignment ( ) {
    enum XlVAlign _result;
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutVerticalAlignment ( enum XlVAlign RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IStyle::GetWrapText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WrapText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutWrapText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WrapText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IStyle::Get_Default ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get__Default(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IStyle::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IStyle::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IStyles wrapper method implementations
//

inline _ApplicationPtr IStyles::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IStyles::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IStyles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline StylePtr IStyles::Add ( _bstr_t Name, const _variant_t & BasedOn ) {
    struct Style * _result = 0;
    HRESULT _hr = raw_Add(Name, BasedOn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

inline long IStyles::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline StylePtr IStyles::GetItem ( const _variant_t & Index, long lcid ) {
    struct Style * _result = 0;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

inline _variant_t IStyles::Merge ( const _variant_t & Workbook ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Merge(Workbook, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IUnknownPtr IStyles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline StylePtr IStyles::Get_Default ( const _variant_t & Index, long lcid ) {
    struct Style * _result = 0;
    HRESULT _hr = get__Default(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

//
// interface IBorders wrapper method implementations
//

inline _ApplicationPtr IBorders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IBorders::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IBorders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IBorders::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IBorders::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IBorders::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IBorders::PutColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IBorders::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline BorderPtr IBorders::GetItem ( enum XlBordersIndex Index ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IBorders::GetLineStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IBorders::PutLineStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_LineStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUnknownPtr IBorders::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _variant_t IBorders::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IBorders::PutValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IBorders::GetWeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IBorders::PutWeight ( const _variant_t & RHS ) {
    HRESULT _hr = put_Weight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IBorders::Get_Default ( enum XlBordersIndex Index ) {
    struct Border * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

//
// interface IAddIn wrapper method implementations
//

inline _ApplicationPtr IAddIn::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IAddIn::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IAddIn::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IAddIn::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAddIn::GetComments ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAddIn::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IAddIn::GetInstalled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Installed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAddIn::PutInstalled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Installed(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IAddIn::GetKeywords ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Keywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAddIn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAddIn::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAddIn::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAddIn::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAddIns wrapper method implementations
//

inline _ApplicationPtr IAddIns::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IAddIns::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IAddIns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline AddInPtr IAddIns::Add ( _bstr_t Filename, const _variant_t & MSCopyFile ) {
    struct AddIn * _result = 0;
    HRESULT _hr = raw_Add(Filename, MSCopyFile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

inline long IAddIns::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline AddInPtr IAddIns::GetItem ( const _variant_t & Index ) {
    struct AddIn * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

inline IUnknownPtr IAddIns::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline AddInPtr IAddIns::Get_Default ( const _variant_t & Index ) {
    struct AddIn * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

//
// interface IToolbar wrapper method implementations
//

inline _ApplicationPtr IToolbar::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IToolbar::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IToolbar::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IToolbar::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IToolbar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IToolbar::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IToolbar::PutHeight ( long RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IToolbar::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IToolbar::PutLeft ( long RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IToolbar::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IToolbar::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IToolbar::PutPosition ( long RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlToolbarProtection IToolbar::GetProtection ( ) {
    enum XlToolbarProtection _result;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IToolbar::PutProtection ( enum XlToolbarProtection RHS ) {
    HRESULT _hr = put_Protection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IToolbar::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ToolbarButtonsPtr IToolbar::GetToolbarButtons ( ) {
    struct ToolbarButtons * _result = 0;
    HRESULT _hr = get_ToolbarButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarButtonsPtr(_result, false);
}

inline long IToolbar::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IToolbar::PutTop ( long RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IToolbar::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IToolbar::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IToolbar::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IToolbar::PutWidth ( long RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IToolbars wrapper method implementations
//

inline _ApplicationPtr IToolbars::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IToolbars::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IToolbars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ToolbarPtr IToolbars::Add ( const _variant_t & Name ) {
    struct Toolbar * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarPtr(_result, false);
}

inline long IToolbars::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ToolbarPtr IToolbars::Get_Default ( const _variant_t & Index ) {
    struct Toolbar * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarPtr(_result, false);
}

inline ToolbarPtr IToolbars::GetItem ( const _variant_t & Index ) {
    struct Toolbar * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarPtr(_result, false);
}

inline IUnknownPtr IToolbars::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IToolbarButton wrapper method implementations
//

inline _ApplicationPtr IToolbarButton::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IToolbarButton::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IToolbarButton::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IToolbarButton::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IToolbarButton::GetBuiltInFace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltInFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IToolbarButton::PutBuiltInFace ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BuiltInFace(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IToolbarButton::Copy ( struct Toolbar * Toolbar, long Before ) {
    HRESULT _hr = raw_Copy(Toolbar, Before);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IToolbarButton::CopyFace ( ) {
    HRESULT _hr = raw_CopyFace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IToolbarButton::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IToolbarButton::Edit ( ) {
    HRESULT _hr = raw_Edit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IToolbarButton::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IToolbarButton::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IToolbarButton::GetHelpContextID ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IToolbarButton::PutHelpContextID ( long RHS ) {
    HRESULT _hr = put_HelpContextID(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IToolbarButton::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IToolbarButton::PutHelpFile ( _bstr_t RHS ) {
    HRESULT _hr = put_HelpFile(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IToolbarButton::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IToolbarButton::GetIsGap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IToolbarButton::Move ( struct Toolbar * Toolbar, long Before ) {
    HRESULT _hr = raw_Move(Toolbar, Before);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IToolbarButton::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IToolbarButton::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IToolbarButton::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IToolbarButton::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IToolbarButton::PasteFace ( ) {
    HRESULT _hr = raw_PasteFace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IToolbarButton::GetPushed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Pushed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IToolbarButton::PutPushed ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Pushed(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IToolbarButton::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IToolbarButton::GetStatusBar ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IToolbarButton::PutStatusBar ( _bstr_t RHS ) {
    HRESULT _hr = put_StatusBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IToolbarButton::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IToolbarButton::PutWidth ( long RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IToolbarButtons wrapper method implementations
//

inline _ApplicationPtr IToolbarButtons::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IToolbarButtons::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IToolbarButtons::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ToolbarButtonPtr IToolbarButtons::Add ( const _variant_t & Button, const _variant_t & Before, const _variant_t & OnAction, const _variant_t & Pushed, const _variant_t & Enabled, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID ) {
    struct ToolbarButton * _result = 0;
    HRESULT _hr = raw_Add(Button, Before, OnAction, Pushed, Enabled, StatusBar, HelpFile, HelpContextID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarButtonPtr(_result, false);
}

inline long IToolbarButtons::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ToolbarButtonPtr IToolbarButtons::GetItem ( long Index ) {
    struct ToolbarButton * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarButtonPtr(_result, false);
}

inline IUnknownPtr IToolbarButtons::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline ToolbarButtonPtr IToolbarButtons::Get_Default ( long Index ) {
    struct ToolbarButton * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarButtonPtr(_result, false);
}

//
// interface IAreas wrapper method implementations
//

inline _ApplicationPtr IAreas::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IAreas::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IAreas::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IAreas::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline RangePtr IAreas::GetItem ( long Index ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline IUnknownPtr IAreas::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline RangePtr IAreas::Get_Default ( long Index ) {
    struct Range * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

//
// interface IMenuBars wrapper method implementations
//

inline _ApplicationPtr IMenuBars::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IMenuBars::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMenuBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline MenuBarPtr IMenuBars::Add ( const _variant_t & Name ) {
    struct MenuBar * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarPtr(_result, false);
}

inline long IMenuBars::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline MenuBarPtr IMenuBars::Get_Default ( const _variant_t & Index ) {
    struct MenuBar * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarPtr(_result, false);
}

inline MenuBarPtr IMenuBars::GetItem ( const _variant_t & Index ) {
    struct MenuBar * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarPtr(_result, false);
}

inline IUnknownPtr IMenuBars::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMenuBar wrapper method implementations
//

inline _ApplicationPtr IMenuBar::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IMenuBar::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMenuBar::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMenuBar::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IMenuBar::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMenuBar::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMenuBar::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IMenuBar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMenuBar::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline MenusPtr IMenuBar::GetMenus ( ) {
    struct Menus * _result = 0;
    HRESULT _hr = get_Menus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenusPtr(_result, false);
}

inline HRESULT IMenuBar::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMenus wrapper method implementations
//

inline _ApplicationPtr IMenus::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IMenus::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMenus::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline MenuPtr IMenus::Add ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore ) {
    struct Menu * _result = 0;
    HRESULT _hr = raw_Add(Caption, Before, Restore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuPtr(_result, false);
}

inline long IMenus::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline MenuPtr IMenus::Get_Default ( const _variant_t & Index ) {
    struct Menu * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuPtr(_result, false);
}

inline MenuPtr IMenus::GetItem ( const _variant_t & Index ) {
    struct Menu * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuPtr(_result, false);
}

inline IUnknownPtr IMenus::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMenu wrapper method implementations
//

inline _ApplicationPtr IMenu::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IMenu::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMenu::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IMenu::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMenu::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IMenu::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IMenu::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMenu::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMenu::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline MenuItemsPtr IMenu::GetMenuItems ( ) {
    struct MenuItems * _result = 0;
    HRESULT _hr = get_MenuItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuItemsPtr(_result, false);
}

//
// interface IMenuItems wrapper method implementations
//

inline _ApplicationPtr IMenuItems::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IMenuItems::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMenuItems::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline MenuItemPtr IMenuItems::Add ( _bstr_t Caption, const _variant_t & OnAction, const _variant_t & ShortcutKey, const _variant_t & Before, const _variant_t & Restore, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID ) {
    struct MenuItem * _result = 0;
    HRESULT _hr = raw_Add(Caption, OnAction, ShortcutKey, Before, Restore, StatusBar, HelpFile, HelpContextID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuItemPtr(_result, false);
}

inline MenuPtr IMenuItems::AddMenu ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore ) {
    struct Menu * _result = 0;
    HRESULT _hr = raw_AddMenu(Caption, Before, Restore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuPtr(_result, false);
}

inline long IMenuItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMenuItems::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IMenuItems::GetItem ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IMenuItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMenuItem wrapper method implementations
//

inline _ApplicationPtr IMenuItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IMenuItem::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMenuItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IMenuItem::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMenuItem::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMenuItem::GetChecked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Checked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMenuItem::PutChecked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Checked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IMenuItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IMenuItem::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMenuItem::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMenuItem::GetHelpContextID ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMenuItem::PutHelpContextID ( long RHS ) {
    HRESULT _hr = put_HelpContextID(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMenuItem::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMenuItem::PutHelpFile ( _bstr_t RHS ) {
    HRESULT _hr = put_HelpFile(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMenuItem::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMenuItem::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMenuItem::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMenuItem::GetStatusBar ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMenuItem::PutStatusBar ( _bstr_t RHS ) {
    HRESULT _hr = put_StatusBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDrawingObjects wrapper method implementations
//

inline _ApplicationPtr IDrawingObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDrawingObjects::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDrawingObjects::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IDrawingObjects::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawingObjects::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawingObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawingObjects::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawingObjects::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IDrawingObjects::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IDrawingObjects::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDrawingObjects::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDrawingObjects::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawingObjects::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDrawingObjects::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawingObjects::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawingObjects::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawingObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawingObjects::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IDrawingObjects::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawingObjects::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDrawingObjects::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawingObjects::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IDrawingObjects::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _variant_t IDrawingObjects::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawingObjects::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawingObjects::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddItem(Text, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawingObjects::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawingObjects::PutArrowHeadLength ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadLength(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawingObjects::PutArrowHeadStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawingObjects::PutArrowHeadWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawingObjects::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IDrawingObjects::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline VARIANT_BOOL IDrawingObjects::GetCancelButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CancelButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutCancelButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CancelButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDrawingObjects::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawingObjects::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IDrawingObjects::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IDrawingObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IDrawingObjects::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawingObjects::GetDefaultButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DefaultButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutDefaultButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DefaultButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawingObjects::GetDismissButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DismissButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutDismissButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DismissButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawingObjects::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawingObjects::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayVerticalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayVerticalScrollBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawingObjects::GetDropDownLines ( ) {
    long _result = 0;
    HRESULT _hr = get_DropDownLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutDropDownLines ( long RHS ) {
    HRESULT _hr = put_DropDownLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline FontPtr IDrawingObjects::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline VARIANT_BOOL IDrawingObjects::GetHelpButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HelpButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutHelpButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HelpButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawingObjects::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawingObjects::GetInputType ( ) {
    long _result = 0;
    HRESULT _hr = get_InputType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutInputType ( long RHS ) {
    HRESULT _hr = put_InputType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr IDrawingObjects::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline long IDrawingObjects::GetLargeChange ( ) {
    long _result = 0;
    HRESULT _hr = get_LargeChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutLargeChange ( long RHS ) {
    HRESULT _hr = put_LargeChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDrawingObjects::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawingObjects::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::List ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IDrawingObjects::GetListFillRange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawingObjects::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawingObjects::GetListIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutListIndex ( long RHS ) {
    HRESULT _hr = put_ListIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawingObjects::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawingObjects::GetMax ( ) {
    long _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutMax ( long RHS ) {
    HRESULT _hr = put_Max(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawingObjects::GetMin ( ) {
    long _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutMin ( long RHS ) {
    HRESULT _hr = put_Min(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawingObjects::GetMultiLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutMultiLine ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MultiLine(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawingObjects::GetMultiSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutMultiSelect ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MultiSelect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawingObjects::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawingObjects::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveAllItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawingObjects::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveItem(Index, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawingObjects::Reshape ( long Vertex, const _variant_t & Insert, const _variant_t & Left, const _variant_t & Top ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Reshape(Vertex, Insert, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IDrawingObjects::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::Selected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Selected(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IDrawingObjects::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawingObjects::GetSmallChange ( ) {
    long _result = 0;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutSmallChange ( long RHS ) {
    HRESULT _hr = put_SmallChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDrawingObjects::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawingObjects::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IDrawingObjects::Ungroup ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IDrawingObjects::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawingObjects::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawingObjects::Vertices ( const _variant_t & Index1, const _variant_t & Index2 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Vertices(Index1, Index2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IDrawingObjects::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawingObjects::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawingObjects::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDrawingObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline GroupObjectPtr IDrawingObjects::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline _variant_t IDrawingObjects::LinkCombo ( const _variant_t & Link ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LinkCombo(Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IUnknownPtr IDrawingObjects::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPivotCache wrapper method implementations
//

inline _ApplicationPtr IPivotCache::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPivotCache::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPivotCache::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IPivotCache::GetBackgroundQuery ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackgroundQuery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotCache::PutBackgroundQuery ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BackgroundQuery(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPivotCache::GetConnection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Connection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPivotCache::PutConnection ( const _variant_t & RHS ) {
    HRESULT _hr = put_Connection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotCache::GetEnableRefresh ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableRefresh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotCache::PutEnableRefresh ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableRefresh(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPivotCache::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPivotCache::GetMemoryUsed ( ) {
    long _result = 0;
    HRESULT _hr = get_MemoryUsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPivotCache::GetOptimizeCache ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OptimizeCache(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotCache::PutOptimizeCache ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_OptimizeCache(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPivotCache::GetRecordCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RecordCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPivotCache::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline DATE IPivotCache::GetRefreshDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_RefreshDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPivotCache::GetRefreshName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefreshName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IPivotCache::GetRefreshOnFileOpen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RefreshOnFileOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotCache::PutRefreshOnFileOpen ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RefreshOnFileOpen(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPivotCache::GetSql ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Sql(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPivotCache::PutSql ( const _variant_t & RHS ) {
    HRESULT _hr = put_Sql(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotCache::GetSavePassword ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SavePassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotCache::PutSavePassword ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SavePassword(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPivotCache::GetSourceData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SourceData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPivotCache::PutSourceData ( const _variant_t & RHS ) {
    HRESULT _hr = put_SourceData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPivotCache::GetCommandText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CommandText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPivotCache::PutCommandText ( const _variant_t & RHS ) {
    HRESULT _hr = put_CommandText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlCmdType IPivotCache::GetCommandType ( ) {
    enum XlCmdType _result;
    HRESULT _hr = get_CommandType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotCache::PutCommandType ( enum XlCmdType RHS ) {
    HRESULT _hr = put_CommandType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum xlQueryType IPivotCache::GetQueryType ( ) {
    enum xlQueryType _result;
    HRESULT _hr = get_QueryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPivotCache::GetMaintainConnection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MaintainConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotCache::PutMaintainConnection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MaintainConnection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPivotCache::GetRefreshPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_RefreshPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotCache::PutRefreshPeriod ( long RHS ) {
    HRESULT _hr = put_RefreshPeriod(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IPivotCache::GetRecordset ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Recordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline void IPivotCache::PutRefRecordset ( IDispatch * RHS ) {
    HRESULT _hr = putref_Recordset(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPivotCache::ResetTimer ( ) {
    HRESULT _hr = raw_ResetTimer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IPivotCache::GetLocalConnection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LocalConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPivotCache::PutLocalConnection ( const _variant_t & RHS ) {
    HRESULT _hr = put_LocalConnection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PivotTablePtr IPivotCache::CreatePivotTable ( const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData ) {
    struct PivotTable * _result = 0;
    HRESULT _hr = raw_CreatePivotTable(TableDestination, TableName, ReadData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

inline VARIANT_BOOL IPivotCache::GetUseLocalConnection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLocalConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotCache::PutUseLocalConnection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UseLocalConnection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPivotCaches wrapper method implementations
//

inline _ApplicationPtr IPivotCaches::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPivotCaches::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPivotCaches::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IPivotCaches::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline PivotCachePtr IPivotCaches::Item ( const _variant_t & Index ) {
    struct PivotCache * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCachePtr(_result, false);
}

inline PivotCachePtr IPivotCaches::Get_Default ( const _variant_t & Index ) {
    struct PivotCache * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCachePtr(_result, false);
}

inline IUnknownPtr IPivotCaches::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline PivotCachePtr IPivotCaches::Add ( enum XlPivotTableSourceType SourceType, const _variant_t & SourceData ) {
    struct PivotCache * _result = 0;
    HRESULT _hr = raw_Add(SourceType, SourceData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCachePtr(_result, false);
}

//
// interface IPivotFormula wrapper method implementations
//

inline _ApplicationPtr IPivotFormula::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPivotFormula::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPivotFormula::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IPivotFormula::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPivotFormula::Get_Default ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotFormula::Put_Default ( _bstr_t RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotFormula::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotFormula::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotFormula::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotFormula::PutValue ( _bstr_t RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPivotFormula::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotFormula::PutIndex ( long RHS ) {
    HRESULT _hr = put_Index(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPivotFormulas wrapper method implementations
//

inline _ApplicationPtr IPivotFormulas::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPivotFormulas::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPivotFormulas::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IPivotFormulas::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline PivotFormulaPtr IPivotFormulas::Add ( _bstr_t Formula ) {
    struct PivotFormula * _result = 0;
    HRESULT _hr = raw_Add(Formula, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFormulaPtr(_result, false);
}

inline PivotFormulaPtr IPivotFormulas::Item ( const _variant_t & Index ) {
    struct PivotFormula * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFormulaPtr(_result, false);
}

inline PivotFormulaPtr IPivotFormulas::Get_Default ( const _variant_t & Index ) {
    struct PivotFormula * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFormulaPtr(_result, false);
}

inline IUnknownPtr IPivotFormulas::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPivotTables wrapper method implementations
//

inline _ApplicationPtr IPivotTables::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPivotTables::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPivotTables::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IPivotTables::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline PivotTablePtr IPivotTables::Item ( const _variant_t & Index ) {
    struct PivotTable * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

inline IUnknownPtr IPivotTables::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline PivotTablePtr IPivotTables::Add ( struct PivotCache * PivotCache, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData ) {
    struct PivotTable * _result = 0;
    HRESULT _hr = raw_Add(PivotCache, TableDestination, TableName, ReadData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

//
// interface IPivotFields wrapper method implementations
//

inline _ApplicationPtr IPivotFields::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPivotFields::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline PivotTablePtr IPivotFields::GetParent ( ) {
    struct PivotTable * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

inline long IPivotFields::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPivotFields::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IPivotFields::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICalculatedFields wrapper method implementations
//

inline _ApplicationPtr ICalculatedFields::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ICalculatedFields::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ICalculatedFields::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long ICalculatedFields::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline PivotFieldPtr ICalculatedFields::Add ( _bstr_t Name, _bstr_t Formula ) {
    struct PivotField * _result = 0;
    HRESULT _hr = raw_Add(Name, Formula, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

inline PivotFieldPtr ICalculatedFields::Item ( const _variant_t & Index ) {
    struct PivotField * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

inline PivotFieldPtr ICalculatedFields::Get_Default ( const _variant_t & Field ) {
    struct PivotField * _result = 0;
    HRESULT _hr = get__Default(Field, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

inline IUnknownPtr ICalculatedFields::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPivotItem wrapper method implementations
//

inline _ApplicationPtr IPivotItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPivotItem::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline PivotFieldPtr IPivotItem::GetParent ( ) {
    struct PivotField * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

inline _variant_t IPivotItem::GetChildItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChildItems(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IPivotItem::GetDataRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_DataRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _bstr_t IPivotItem::Get_Default ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotItem::Put_Default ( _bstr_t RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IPivotItem::GetLabelRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_LabelRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _bstr_t IPivotItem::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotItem::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PivotItemPtr IPivotItem::GetParentItem ( ) {
    struct PivotItem * _result = 0;
    HRESULT _hr = get_ParentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

inline VARIANT_BOOL IPivotItem::GetParentShowDetail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ParentShowDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPivotItem::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotItem::PutPosition ( long RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotItem::GetShowDetail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotItem::PutShowDetail ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowDetail(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPivotItem::GetSourceName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IPivotItem::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotItem::PutValue ( _bstr_t RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotItem::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotItem::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPivotItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPivotItem::GetIsCalculated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCalculated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPivotItem::GetRecordCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RecordCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPivotItem::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotItem::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotItem::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotItem::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotItem::GetDrilledDown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrilledDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotItem::PutDrilledDown ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DrilledDown(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPivotItems wrapper method implementations
//

inline _ApplicationPtr IPivotItems::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPivotItems::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline PivotFieldPtr IPivotItems::GetParent ( ) {
    struct PivotField * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

inline HRESULT IPivotItems::Add ( _bstr_t Name ) {
    HRESULT _hr = raw_Add(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPivotItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPivotItems::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IPivotItems::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICalculatedItems wrapper method implementations
//

inline _ApplicationPtr ICalculatedItems::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ICalculatedItems::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ICalculatedItems::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long ICalculatedItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline PivotItemPtr ICalculatedItems::Add ( _bstr_t Name, _bstr_t Formula ) {
    struct PivotItem * _result = 0;
    HRESULT _hr = raw_Add(Name, Formula, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

inline PivotItemPtr ICalculatedItems::Item ( const _variant_t & Index ) {
    struct PivotItem * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

inline PivotItemPtr ICalculatedItems::Get_Default ( const _variant_t & Field ) {
    struct PivotItem * _result = 0;
    HRESULT _hr = get__Default(Field, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

inline IUnknownPtr ICalculatedItems::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICharacters wrapper method implementations
//

inline _ApplicationPtr ICharacters::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ICharacters::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ICharacters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t ICharacters::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICharacters::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ICharacters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t ICharacters::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr ICharacters::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _variant_t ICharacters::Insert ( _bstr_t String ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Insert(String, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t ICharacters::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICharacters::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ICharacters::GetPhoneticCharacters ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneticCharacters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICharacters::PutPhoneticCharacters ( _bstr_t RHS ) {
    HRESULT _hr = put_PhoneticCharacters(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDialogs wrapper method implementations
//

inline _ApplicationPtr IDialogs::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDialogs::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDialogs::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IDialogs::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DialogPtr IDialogs::GetItem ( enum XlBuiltInDialog Index ) {
    struct Dialog * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogPtr(_result, false);
}

inline DialogPtr IDialogs::Get_Default ( enum XlBuiltInDialog Index ) {
    struct Dialog * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogPtr(_result, false);
}

inline IUnknownPtr IDialogs::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IDialog wrapper method implementations
//

inline _ApplicationPtr IDialog::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDialog::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDialog::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IDialog::Show ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Show(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISoundNote wrapper method implementations
//

inline _ApplicationPtr ISoundNote::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ISoundNote::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ISoundNote::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t ISoundNote::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISoundNote::Import ( _bstr_t Filename ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Import(Filename, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISoundNote::Play ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Play(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISoundNote::Record ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Record(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IButton wrapper method implementations
//

inline _ApplicationPtr IButton::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IButton::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IButton::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IButton::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IButton::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IButton::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IButton::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IButton::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IButton::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IButton::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IButton::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IButton::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IButton::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButton::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IButton::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IButton::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IButton::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IButton::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButton::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButton::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButton::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButton::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IButton::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IButton::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IButton::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IButton::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IButton::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IButton::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IButton::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IButton::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButton::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButton::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButton::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IButton::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IButton::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr IButton::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t IButton::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IButton::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButton::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButton::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButton::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButton::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButton::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IButton::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IButton::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButton::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButton::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IButton::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButton::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButton::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButton::GetCancelButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CancelButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutCancelButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CancelButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButton::GetDefaultButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DefaultButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutDefaultButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DefaultButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButton::GetDismissButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DismissButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutDismissButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DismissButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButton::GetHelpButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HelpButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButton::PutHelpButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HelpButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButton::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButton::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IButtons wrapper method implementations
//

inline _ApplicationPtr IButtons::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IButtons::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IButtons::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IButtons::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IButtons::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IButtons::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IButtons::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IButtons::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IButtons::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IButtons::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IButtons::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButtons::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IButtons::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IButtons::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButtons::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButtons::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButtons::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButtons::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IButtons::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IButtons::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButtons::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IButtons::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IButtons::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IButtons::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IButtons::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButtons::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButtons::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButtons::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IButtons::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IButtons::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr IButtons::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t IButtons::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IButtons::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButtons::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButtons::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButtons::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButtons::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButtons::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IButtons::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IButtons::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButtons::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButtons::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IButtons::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButtons::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButtons::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButtons::GetCancelButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CancelButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutCancelButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CancelButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButtons::GetDefaultButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DefaultButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutDefaultButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DefaultButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButtons::GetDismissButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DismissButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutDismissButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DismissButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IButtons::GetHelpButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HelpButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IButtons::PutHelpButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HelpButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IButtons::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IButtons::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ButtonPtr IButtons::Add ( double Left, double Top, double Width, double Height ) {
    struct Button * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ButtonPtr(_result, false);
}

inline long IButtons::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IButtons::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IButtons::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IButtons::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICheckBox wrapper method implementations
//

inline _ApplicationPtr ICheckBox::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ICheckBox::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ICheckBox::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr ICheckBox::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t ICheckBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICheckBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICheckBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICheckBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICheckBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr ICheckBox::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ICheckBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBox::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ICheckBox::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBox::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ICheckBox::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ICheckBox::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBox::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ICheckBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBox::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ICheckBox::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICheckBox::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ICheckBox::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICheckBox::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ICheckBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ICheckBox::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ICheckBox::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBox::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ICheckBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICheckBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ICheckBox::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBox::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr ICheckBox::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL ICheckBox::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBox::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ICheckBox::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBox::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ICheckBox::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr ICheckBox::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t ICheckBox::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICheckBox::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr ICheckBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t ICheckBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ICheckBox::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBox::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ICheckBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICheckBox::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ICheckBox::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ICheckBox::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr ICheckBox::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline long ICheckBox::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBox::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ICheckBox::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBox::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr ICheckBox::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline _bstr_t ICheckBox::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICheckBox::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ICheckBox::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ICheckBox::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ICheckBox::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ICheckBox::PutValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICheckBoxes wrapper method implementations
//

inline _ApplicationPtr ICheckBoxes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ICheckBoxes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ICheckBoxes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t ICheckBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICheckBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICheckBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICheckBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICheckBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr ICheckBoxes::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ICheckBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBoxes::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ICheckBoxes::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBoxes::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ICheckBoxes::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBoxes::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ICheckBoxes::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBoxes::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ICheckBoxes::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICheckBoxes::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ICheckBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ICheckBoxes::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ICheckBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBoxes::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ICheckBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICheckBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ICheckBoxes::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBoxes::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ICheckBoxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBoxes::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ICheckBoxes::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBoxes::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ICheckBoxes::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr ICheckBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t ICheckBoxes::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICheckBoxes::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr ICheckBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t ICheckBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ICheckBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBoxes::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ICheckBoxes::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICheckBoxes::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ICheckBoxes::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ICheckBoxes::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr ICheckBoxes::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline long ICheckBoxes::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBoxes::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ICheckBoxes::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICheckBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr ICheckBoxes::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline _bstr_t ICheckBoxes::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICheckBoxes::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ICheckBoxes::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ICheckBoxes::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ICheckBoxes::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ICheckBoxes::PutValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CheckBoxPtr ICheckBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct CheckBox * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CheckBoxPtr(_result, false);
}

inline long ICheckBoxes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr ICheckBoxes::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr ICheckBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr ICheckBoxes::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IOptionButton wrapper method implementations
//

inline _ApplicationPtr IOptionButton::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IOptionButton::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IOptionButton::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IOptionButton::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IOptionButton::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOptionButton::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOptionButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOptionButton::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOptionButton::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IOptionButton::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IOptionButton::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButton::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOptionButton::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButton::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IOptionButton::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IOptionButton::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButton::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOptionButton::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButton::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOptionButton::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOptionButton::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOptionButton::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOptionButton::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOptionButton::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOptionButton::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOptionButton::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButton::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOptionButton::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOptionButton::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IOptionButton::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButton::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IOptionButton::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IOptionButton::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButton::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOptionButton::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButton::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IOptionButton::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IOptionButton::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t IOptionButton::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOptionButton::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IOptionButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IOptionButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IOptionButton::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButton::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOptionButton::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOptionButton::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOptionButton::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOptionButton::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IOptionButton::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline long IOptionButton::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButton::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOptionButton::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButton::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr IOptionButton::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline _bstr_t IOptionButton::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOptionButton::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOptionButton::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOptionButton::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOptionButton::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOptionButton::PutValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline GroupBoxPtr IOptionButton::GetGroupBox ( ) {
    struct GroupBox * _result = 0;
    HRESULT _hr = get_GroupBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupBoxPtr(_result, false);
}

//
// interface IOptionButtons wrapper method implementations
//

inline _ApplicationPtr IOptionButtons::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IOptionButtons::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IOptionButtons::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IOptionButtons::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOptionButtons::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOptionButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOptionButtons::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOptionButtons::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IOptionButtons::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IOptionButtons::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButtons::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOptionButtons::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButtons::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOptionButtons::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButtons::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOptionButtons::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButtons::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOptionButtons::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOptionButtons::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOptionButtons::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOptionButtons::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOptionButtons::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButtons::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOptionButtons::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOptionButtons::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IOptionButtons::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButtons::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOptionButtons::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButtons::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOptionButtons::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButtons::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IOptionButtons::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IOptionButtons::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t IOptionButtons::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOptionButtons::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IOptionButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IOptionButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IOptionButtons::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButtons::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOptionButtons::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOptionButtons::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOptionButtons::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOptionButtons::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IOptionButtons::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline long IOptionButtons::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButtons::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOptionButtons::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOptionButtons::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr IOptionButtons::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline _bstr_t IOptionButtons::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOptionButtons::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOptionButtons::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOptionButtons::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOptionButtons::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOptionButtons::PutValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline GroupBoxPtr IOptionButtons::GetGroupBox ( ) {
    struct GroupBox * _result = 0;
    HRESULT _hr = get_GroupBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupBoxPtr(_result, false);
}

inline OptionButtonPtr IOptionButtons::Add ( double Left, double Top, double Width, double Height ) {
    struct OptionButton * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OptionButtonPtr(_result, false);
}

inline long IOptionButtons::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IOptionButtons::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IOptionButtons::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IOptionButtons::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IEditBox wrapper method implementations
//

inline _ApplicationPtr IEditBox::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IEditBox::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IEditBox::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IEditBox::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IEditBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEditBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEditBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEditBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEditBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IEditBox::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IEditBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IEditBox::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IEditBox::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IEditBox::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEditBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEditBox::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEditBox::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEditBox::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEditBox::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IEditBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IEditBox::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEditBox::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IEditBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEditBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IEditBox::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IEditBox::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IEditBox::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IEditBox::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IEditBox::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IEditBox::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t IEditBox::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEditBox::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IEditBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IEditBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IEditBox::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEditBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEditBox::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEditBox::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayVerticalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayVerticalScrollBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IEditBox::GetInputType ( ) {
    long _result = 0;
    HRESULT _hr = get_InputType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutInputType ( long RHS ) {
    HRESULT _hr = put_InputType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEditBox::GetLinkedObject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IEditBox::GetMultiLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutMultiLine ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MultiLine(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEditBox::GetPasswordEdit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PasswordEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBox::PutPasswordEdit ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PasswordEdit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEditBoxes wrapper method implementations
//

inline _ApplicationPtr IEditBoxes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IEditBoxes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IEditBoxes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IEditBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEditBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEditBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEditBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEditBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IEditBoxes::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IEditBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IEditBoxes::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IEditBoxes::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEditBoxes::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEditBoxes::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEditBoxes::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IEditBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IEditBoxes::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEditBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IEditBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEditBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IEditBoxes::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEditBoxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IEditBoxes::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IEditBoxes::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IEditBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t IEditBoxes::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEditBoxes::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IEditBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IEditBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IEditBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEditBoxes::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEditBoxes::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEditBoxes::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayVerticalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayVerticalScrollBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IEditBoxes::GetInputType ( ) {
    long _result = 0;
    HRESULT _hr = get_InputType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutInputType ( long RHS ) {
    HRESULT _hr = put_InputType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEditBoxes::GetMultiLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutMultiLine ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MultiLine(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEditBoxes::GetPasswordEdit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PasswordEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEditBoxes::PutPasswordEdit ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PasswordEdit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline EditBoxPtr IEditBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct EditBox * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EditBoxPtr(_result, false);
}

inline long IEditBoxes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IEditBoxes::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline _variant_t IEditBoxes::Item ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IUnknownPtr IEditBoxes::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IScrollBar wrapper method implementations
//

inline _ApplicationPtr IScrollBar::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IScrollBar::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IScrollBar::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IScrollBar::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IScrollBar::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IScrollBar::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IScrollBar::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IScrollBar::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IScrollBar::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IScrollBar::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IScrollBar::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IScrollBar::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBar::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IScrollBar::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IScrollBar::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IScrollBar::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IScrollBar::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IScrollBar::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IScrollBar::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IScrollBar::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IScrollBar::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IScrollBar::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IScrollBar::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IScrollBar::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IScrollBar::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IScrollBar::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IScrollBar::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IScrollBar::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBar::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IScrollBar::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline long IScrollBar::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IScrollBar::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IScrollBar::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IScrollBar::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBar::GetMax ( ) {
    long _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutMax ( long RHS ) {
    HRESULT _hr = put_Max(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBar::GetMin ( ) {
    long _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutMin ( long RHS ) {
    HRESULT _hr = put_Min(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBar::GetSmallChange ( ) {
    long _result = 0;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutSmallChange ( long RHS ) {
    HRESULT _hr = put_SmallChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBar::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBar::GetLargeChange ( ) {
    long _result = 0;
    HRESULT _hr = get_LargeChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBar::PutLargeChange ( long RHS ) {
    HRESULT _hr = put_LargeChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IScrollBars wrapper method implementations
//

inline _ApplicationPtr IScrollBars::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IScrollBars::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IScrollBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IScrollBars::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IScrollBars::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IScrollBars::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IScrollBars::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IScrollBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IScrollBars::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IScrollBars::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IScrollBars::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IScrollBars::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IScrollBars::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IScrollBars::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IScrollBars::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IScrollBars::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IScrollBars::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IScrollBars::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IScrollBars::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IScrollBars::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IScrollBars::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IScrollBars::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IScrollBars::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBars::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IScrollBars::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline long IScrollBars::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IScrollBars::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IScrollBars::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IScrollBars::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBars::GetMax ( ) {
    long _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutMax ( long RHS ) {
    HRESULT _hr = put_Max(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBars::GetMin ( ) {
    long _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutMin ( long RHS ) {
    HRESULT _hr = put_Min(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBars::GetSmallChange ( ) {
    long _result = 0;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutSmallChange ( long RHS ) {
    HRESULT _hr = put_SmallChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBars::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScrollBars::GetLargeChange ( ) {
    long _result = 0;
    HRESULT _hr = get_LargeChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScrollBars::PutLargeChange ( long RHS ) {
    HRESULT _hr = put_LargeChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ScrollBarPtr IScrollBars::Add ( double Left, double Top, double Width, double Height ) {
    struct ScrollBar * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScrollBarPtr(_result, false);
}

inline long IScrollBars::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IScrollBars::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IScrollBars::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IScrollBars::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IListBox wrapper method implementations
//

inline _ApplicationPtr IListBox::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IListBox::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IListBox::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IListBox::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IListBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IListBox::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IListBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IListBox::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IListBox::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IListBox::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IListBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IListBox::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IListBox::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IListBox::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IListBox::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IListBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IListBox::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IListBox::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IListBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IListBox::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IListBox::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IListBox::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IListBox::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IListBox::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IListBox::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _variant_t IListBox::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddItem(Text, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IListBox::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IListBox::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IListBox::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IListBox::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IListBox::GetLinkedObject ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LinkedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBox::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IListBox::PutList ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_List(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IListBox::GetListCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IListBox::GetListFillRange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IListBox::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IListBox::GetListIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::PutListIndex ( long RHS ) {
    HRESULT _hr = put_ListIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IListBox::GetMultiSelect ( ) {
    long _result = 0;
    HRESULT _hr = get_MultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::PutMultiSelect ( long RHS ) {
    HRESULT _hr = put_MultiSelect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IListBox::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveAllItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBox::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveItem(Index, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBox::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Selected(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IListBox::PutSelected ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_Selected(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IListBox::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBox::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IListBoxes wrapper method implementations
//

inline _ApplicationPtr IListBoxes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IListBoxes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IListBoxes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IListBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IListBoxes::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IListBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IListBoxes::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IListBoxes::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IListBoxes::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IListBoxes::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IListBoxes::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IListBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IListBoxes::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IListBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IListBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IListBoxes::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IListBoxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IListBoxes::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IListBoxes::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IListBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _variant_t IListBoxes::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddItem(Text, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IListBoxes::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IListBoxes::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IListBoxes::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IListBoxes::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IListBoxes::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IListBoxes::PutList ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_List(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IListBoxes::GetListFillRange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IListBoxes::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IListBoxes::GetListIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::PutListIndex ( long RHS ) {
    HRESULT _hr = put_ListIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IListBoxes::GetMultiSelect ( ) {
    long _result = 0;
    HRESULT _hr = get_MultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::PutMultiSelect ( long RHS ) {
    HRESULT _hr = put_MultiSelect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IListBoxes::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveAllItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBoxes::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveItem(Index, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IListBoxes::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Selected(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IListBoxes::PutSelected ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_Selected(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IListBoxes::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IListBoxes::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ListBoxPtr IListBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct ListBox * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListBoxPtr(_result, false);
}

inline long IListBoxes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IListBoxes::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IListBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IListBoxes::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IGroupBox wrapper method implementations
//

inline _ApplicationPtr IGroupBox::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IGroupBox::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IGroupBox::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IGroupBox::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IGroupBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IGroupBox::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IGroupBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBox::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IGroupBox::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBox::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGroupBox::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGroupBox::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBox::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBox::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IGroupBox::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGroupBox::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IGroupBox::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGroupBox::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupBox::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupBox::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBox::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IGroupBox::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBox::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IGroupBox::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IGroupBox::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBox::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IGroupBox::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBox::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGroupBox::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IGroupBox::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t IGroupBox::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGroupBox::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IGroupBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IGroupBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IGroupBox::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBox::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IGroupBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGroupBox::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupBox::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupBox::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupBox::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBox::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupBox::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupBox::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGroupBoxes wrapper method implementations
//

inline _ApplicationPtr IGroupBoxes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IGroupBoxes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IGroupBoxes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IGroupBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IGroupBoxes::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IGroupBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBoxes::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IGroupBoxes::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBoxes::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IGroupBoxes::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBoxes::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupBoxes::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBoxes::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IGroupBoxes::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGroupBoxes::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupBoxes::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBoxes::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IGroupBoxes::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBoxes::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupBoxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBoxes::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IGroupBoxes::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBoxes::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGroupBoxes::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IGroupBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t IGroupBoxes::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGroupBoxes::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IGroupBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IGroupBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IGroupBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBoxes::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IGroupBoxes::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGroupBoxes::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupBoxes::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupBoxes::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupBoxes::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupBoxes::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupBoxes::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline GroupBoxPtr IGroupBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct GroupBox * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupBoxPtr(_result, false);
}

inline long IGroupBoxes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IGroupBoxes::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IGroupBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IGroupBoxes::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IDropDown wrapper method implementations
//

inline _ApplicationPtr IDropDown::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDropDown::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDropDown::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IDropDown::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IDropDown::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDown::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDown::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDown::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDown::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IDropDown::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IDropDown::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDropDown::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDropDown::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IDropDown::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDropDown::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDropDown::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDropDown::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDropDown::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDropDown::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDropDown::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDropDown::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDropDown::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDropDown::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDown::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IDropDown::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IDropDown::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IDropDown::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDropDown::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDropDown::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IDropDown::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _variant_t IDropDown::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddItem(Text, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IDropDown::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDropDown::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDropDown::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDropDown::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDropDown::GetLinkedObject ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LinkedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDown::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDropDown::PutList ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_List(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDropDown::GetListCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IDropDown::GetListFillRange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDropDown::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDropDown::GetListIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::PutListIndex ( long RHS ) {
    HRESULT _hr = put_ListIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDropDown::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveAllItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDown::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveItem(Index, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDown::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Selected(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDropDown::PutSelected ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_Selected(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDropDown::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDropDown::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDropDown::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IDropDown::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline long IDropDown::GetDropDownLines ( ) {
    long _result = 0;
    HRESULT _hr = get_DropDownLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDown::PutDropDownLines ( long RHS ) {
    HRESULT _hr = put_DropDownLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDropDown::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDropDown::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDropDowns wrapper method implementations
//

inline _ApplicationPtr IDropDowns::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDropDowns::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDropDowns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IDropDowns::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDowns::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDowns::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDowns::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDowns::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IDropDowns::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IDropDowns::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDropDowns::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDropDowns::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDropDowns::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDropDowns::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDropDowns::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDropDowns::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDropDowns::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDropDowns::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDropDowns::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDowns::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IDropDowns::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDropDowns::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDropDowns::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDropDowns::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IDropDowns::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _variant_t IDropDowns::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddItem(Text, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IDropDowns::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDropDowns::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDropDowns::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDropDowns::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDropDowns::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDropDowns::PutList ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_List(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDropDowns::GetListFillRange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDropDowns::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDropDowns::GetListIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::PutListIndex ( long RHS ) {
    HRESULT _hr = put_ListIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDropDowns::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveAllItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDowns::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveItem(Index, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDropDowns::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Selected(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDropDowns::PutSelected ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_Selected(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDropDowns::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDropDowns::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDropDowns::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IDropDowns::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline long IDropDowns::GetDropDownLines ( ) {
    long _result = 0;
    HRESULT _hr = get_DropDownLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDropDowns::PutDropDownLines ( long RHS ) {
    HRESULT _hr = put_DropDownLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDropDowns::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDropDowns::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DropDownPtr IDropDowns::Add ( double Left, double Top, double Width, double Height, const _variant_t & Editable ) {
    struct DropDown * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, Editable, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DropDownPtr(_result, false);
}

inline long IDropDowns::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IDropDowns::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IDropDowns::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IDropDowns::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ISpinner wrapper method implementations
//

inline _ApplicationPtr ISpinner::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ISpinner::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ISpinner::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr ISpinner::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t ISpinner::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISpinner::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISpinner::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISpinner::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISpinner::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr ISpinner::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ISpinner::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISpinner::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISpinner::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ISpinner::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISpinner::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISpinner::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISpinner::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISpinner::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISpinner::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISpinner::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISpinner::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISpinner::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISpinner::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISpinner::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ISpinner::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr ISpinner::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL ISpinner::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISpinner::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISpinner::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr ISpinner::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline long ISpinner::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISpinner::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISpinner::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISpinner::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISpinner::GetMax ( ) {
    long _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutMax ( long RHS ) {
    HRESULT _hr = put_Max(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISpinner::GetMin ( ) {
    long _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutMin ( long RHS ) {
    HRESULT _hr = put_Min(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISpinner::GetSmallChange ( ) {
    long _result = 0;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutSmallChange ( long RHS ) {
    HRESULT _hr = put_SmallChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISpinner::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinner::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISpinners wrapper method implementations
//

inline _ApplicationPtr ISpinners::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ISpinners::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ISpinners::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t ISpinners::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISpinners::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISpinners::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISpinners::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISpinners::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr ISpinners::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ISpinners::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISpinners::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISpinners::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISpinners::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISpinners::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISpinners::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISpinners::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISpinners::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISpinners::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISpinners::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISpinners::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ISpinners::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISpinners::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISpinners::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISpinners::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr ISpinners::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline long ISpinners::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISpinners::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISpinners::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISpinners::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISpinners::GetMax ( ) {
    long _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutMax ( long RHS ) {
    HRESULT _hr = put_Max(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISpinners::GetMin ( ) {
    long _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutMin ( long RHS ) {
    HRESULT _hr = put_Min(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISpinners::GetSmallChange ( ) {
    long _result = 0;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutSmallChange ( long RHS ) {
    HRESULT _hr = put_SmallChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISpinners::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpinners::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SpinnerPtr ISpinners::Add ( double Left, double Top, double Width, double Height ) {
    struct Spinner * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SpinnerPtr(_result, false);
}

inline long ISpinners::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr ISpinners::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr ISpinners::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr ISpinners::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IDialogFrame wrapper method implementations
//

inline _ApplicationPtr IDialogFrame::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDialogFrame::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDialogFrame::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IDialogFrame::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IDialogFrame::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogFrame::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDialogFrame::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogFrame::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDialogFrame::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogFrame::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDialogFrame::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialogFrame::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDialogFrame::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialogFrame::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDialogFrame::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IDialogFrame::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogFrame::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDialogFrame::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogFrame::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapeRangePtr IDialogFrame::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t IDialogFrame::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialogFrame::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IDialogFrame::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IDialogFrame::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IDialogFrame::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogFrame::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDialogFrame::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialogFrame::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILabel wrapper method implementations
//

inline _ApplicationPtr ILabel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ILabel::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ILabel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr ILabel::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t ILabel::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILabel::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILabel::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILabel::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr ILabel::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ILabel::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabel::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILabel::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabel::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ILabel::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ILabel::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabel::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ILabel::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabel::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ILabel::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ILabel::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ILabel::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ILabel::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILabel::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILabel::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ILabel::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabel::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILabel::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILabel::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ILabel::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabel::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr ILabel::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL ILabel::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabel::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILabel::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabel::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ILabel::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr ILabel::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t ILabel::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ILabel::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr ILabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t ILabel::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ILabel::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabel::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ILabel::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ILabel::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILabel::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILabel::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILabel::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILabel::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILabels wrapper method implementations
//

inline _ApplicationPtr ILabels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ILabels::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ILabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t ILabels::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILabels::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILabels::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILabels::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr ILabels::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ILabels::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabels::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILabels::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabels::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILabels::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabels::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ILabels::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabels::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ILabels::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ILabels::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILabels::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILabels::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ILabels::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabels::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILabels::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILabels::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ILabels::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabels::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ILabels::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabels::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILabels::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabels::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ILabels::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr ILabels::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t ILabels::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ILabels::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr ILabels::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t ILabels::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ILabels::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILabels::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ILabels::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ILabels::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILabels::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILabels::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILabels::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILabels::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline LabelPtr ILabels::Add ( double Left, double Top, double Width, double Height ) {
    struct Label * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LabelPtr(_result, false);
}

inline long ILabels::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr ILabels::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr ILabels::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr ILabels::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPanes wrapper method implementations
//

inline _ApplicationPtr IPanes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPanes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPanes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IPanes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline PanePtr IPanes::GetItem ( long Index ) {
    struct Pane * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

inline PanePtr IPanes::Get_Default ( long Index ) {
    struct Pane * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

//
// interface IPane wrapper method implementations
//

inline _ApplicationPtr IPane::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPane::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPane::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IPane::Activate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Activate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPane::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IPane::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LargeScroll(Down, Up, ToRight, ToLeft, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IPane::GetScrollColumn ( ) {
    long _result = 0;
    HRESULT _hr = get_ScrollColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPane::PutScrollColumn ( long RHS ) {
    HRESULT _hr = put_ScrollColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPane::GetScrollRow ( ) {
    long _result = 0;
    HRESULT _hr = get_ScrollRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPane::PutScrollRow ( long RHS ) {
    HRESULT _hr = put_ScrollRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPane::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SmallScroll(Down, Up, ToRight, ToLeft, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IPane::GetVisibleRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_VisibleRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline HRESULT IPane::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start ) {
    HRESULT _hr = raw_ScrollIntoView(Left, Top, Width, Height, Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IScenarios wrapper method implementations
//

inline _ApplicationPtr IScenarios::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IScenarios::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IScenarios::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ScenarioPtr IScenarios::Add ( _bstr_t Name, const _variant_t & ChangingCells, const _variant_t & Values, const _variant_t & Comment, const _variant_t & Locked, const _variant_t & Hidden ) {
    struct Scenario * _result = 0;
    HRESULT _hr = raw_Add(Name, ChangingCells, Values, Comment, Locked, Hidden, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScenarioPtr(_result, false);
}

inline long IScenarios::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IScenarios::CreateSummary ( enum XlSummaryReportType ReportType, const _variant_t & ResultCells ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CreateSummary(ReportType, ResultCells, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline ScenarioPtr IScenarios::Item ( const _variant_t & Index ) {
    struct Scenario * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScenarioPtr(_result, false);
}

inline _variant_t IScenarios::Merge ( const _variant_t & Source ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Merge(Source, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IUnknownPtr IScenarios::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IScenario wrapper method implementations
//

inline _ApplicationPtr IScenario::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IScenario::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IScenario::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IScenario::ChangeScenario ( const _variant_t & ChangingCells, const _variant_t & Values ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ChangeScenario(ChangingCells, Values, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IScenario::GetChangingCells ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_ChangingCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _bstr_t IScenario::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IScenario::PutComment ( _bstr_t RHS ) {
    HRESULT _hr = put_Comment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IScenario::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IScenario::GetHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScenario::PutHidden ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Hidden(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IScenario::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IScenario::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IScenario::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IScenario::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IScenario::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IScenario::Show ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IScenario::GetValues ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Values(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IGroupObject wrapper method implementations
//

inline _ApplicationPtr IGroupObject::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IGroupObject::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IGroupObject::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IGroupObject::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IGroupObject::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupObject::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupObject::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupObject::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IGroupObject::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IGroupObject::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IGroupObject::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGroupObject::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGroupObject::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupObject::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IGroupObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGroupObject::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IGroupObject::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGroupObject::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupObject::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObject::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupObject::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupObject::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupObject::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IGroupObject::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IGroupObject::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IGroupObject::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IGroupObject::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGroupObject::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IGroupObject::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IGroupObject::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupObject::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObject::PutArrowHeadLength ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadLength(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupObject::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObject::PutArrowHeadStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupObject::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObject::PutArrowHeadWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupObject::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IGroupObject::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IGroupObject::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IGroupObject::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline FontPtr IGroupObject::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _variant_t IGroupObject::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObject::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr IGroupObject::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline _variant_t IGroupObject::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObject::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupObject::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupObject::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IGroupObject::Ungroup ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IGroupObject::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObject::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGroupObject::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObject::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGroupObjects wrapper method implementations
//

inline _ApplicationPtr IGroupObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IGroupObjects::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IGroupObjects::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IGroupObjects::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupObjects::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupObjects::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupObjects::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IGroupObjects::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IGroupObjects::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IGroupObjects::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IGroupObjects::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupObjects::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IGroupObjects::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGroupObjects::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupObjects::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObjects::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IGroupObjects::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IGroupObjects::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupObjects::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IGroupObjects::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGroupObjects::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IGroupObjects::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IGroupObjects::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupObjects::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObjects::PutArrowHeadLength ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadLength(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupObjects::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObjects::PutArrowHeadStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IGroupObjects::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObjects::PutArrowHeadWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupObjects::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IGroupObjects::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IGroupObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IGroupObjects::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline FontPtr IGroupObjects::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _variant_t IGroupObjects::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObjects::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr IGroupObjects::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline _variant_t IGroupObjects::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObjects::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupObjects::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGroupObjects::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IGroupObjects::Ungroup ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IGroupObjects::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IGroupObjects::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGroupObjects::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGroupObjects::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGroupObjects::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IGroupObjects::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IGroupObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IGroupObjects::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ILine wrapper method implementations
//

inline _ApplicationPtr ILine::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ILine::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ILine::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr ILine::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t ILine::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILine::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILine::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILine::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILine::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr ILine::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ILine::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILine::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILine::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILine::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ILine::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ILine::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILine::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ILine::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILine::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ILine::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ILine::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ILine::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ILine::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILine::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILine::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ILine::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILine::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILine::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILine::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ILine::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILine::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr ILine::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL ILine::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILine::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILine::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILine::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ILine::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr ILine::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _variant_t ILine::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILine::PutArrowHeadLength ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadLength(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILine::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILine::PutArrowHeadStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILine::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILine::PutArrowHeadWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr ILine::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

//
// interface ILines wrapper method implementations
//

inline _ApplicationPtr ILines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ILines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ILines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t ILines::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILines::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILines::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILines::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr ILines::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ILines::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILines::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILines::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILines::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILines::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILines::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ILines::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILines::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ILines::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ILines::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILines::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILines::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ILines::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILines::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILines::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILines::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ILines::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILines::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ILines::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILines::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILines::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILines::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ILines::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr ILines::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _variant_t ILines::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILines::PutArrowHeadLength ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadLength(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILines::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILines::PutArrowHeadStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILines::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILines::PutArrowHeadWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr ILines::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline LinePtr ILines::Add ( double X1, double Y1, double X2, double Y2 ) {
    struct Line * _result = 0;
    HRESULT _hr = raw_Add(X1, Y1, X2, Y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinePtr(_result, false);
}

inline long ILines::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr ILines::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr ILines::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr ILines::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IRectangle wrapper method implementations
//

inline _ApplicationPtr IRectangle::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IRectangle::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IRectangle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IRectangle::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRectangle::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRectangle::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRectangle::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRectangle::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRectangle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IRectangle::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IRectangle::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IRectangle::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IRectangle::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IRectangle::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRectangle::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IRectangle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRectangle::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IRectangle::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRectangle::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRectangle::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRectangle::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRectangle::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRectangle::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRectangle::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IRectangle::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IRectangle::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IRectangle::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IRectangle::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IRectangle::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IRectangle::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IRectangle::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRectangle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRectangle::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRectangle::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IRectangle::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRectangle::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IRectangle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IRectangle::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr IRectangle::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t IRectangle::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRectangle::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRectangle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRectangle::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRectangle::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRectangle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRectangle::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IRectangle::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRectangle::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRectangle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRectangle::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IRectangle::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IRectangle::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr IRectangle::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL IRectangle::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRectangle::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangle::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRectangles wrapper method implementations
//

inline _ApplicationPtr IRectangles::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IRectangles::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IRectangles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IRectangles::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRectangles::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRectangles::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRectangles::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRectangles::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IRectangles::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IRectangles::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IRectangles::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IRectangles::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRectangles::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IRectangles::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRectangles::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRectangles::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRectangles::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRectangles::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRectangles::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRectangles::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IRectangles::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRectangles::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IRectangles::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IRectangles::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IRectangles::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IRectangles::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRectangles::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRectangles::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRectangles::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IRectangles::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRectangles::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IRectangles::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IRectangles::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr IRectangles::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t IRectangles::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRectangles::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRectangles::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRectangles::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRectangles::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRectangles::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRectangles::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IRectangles::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRectangles::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRectangles::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRectangles::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IRectangles::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IRectangles::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr IRectangles::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL IRectangles::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRectangles::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRectangles::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RectanglePtr IRectangles::Add ( double Left, double Top, double Width, double Height ) {
    struct Rectangle * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RectanglePtr(_result, false);
}

inline long IRectangles::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IRectangles::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IRectangles::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IRectangles::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IOval wrapper method implementations
//

inline _ApplicationPtr IOval::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IOval::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IOval::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IOval::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IOval::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOval::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOval::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOval::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOval::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IOval::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IOval::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOval::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IOval::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IOval::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOval::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOval::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOval::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOval::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOval::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOval::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOval::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOval::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOval::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOval::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IOval::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IOval::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IOval::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOval::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IOval::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IOval::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IOval::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOval::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOval::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOval::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOval::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOval::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IOval::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IOval::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr IOval::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t IOval::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOval::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOval::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOval::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOval::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOval::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOval::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOval::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOval::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOval::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOval::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IOval::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IOval::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr IOval::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL IOval::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOval::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IOvals wrapper method implementations
//

inline _ApplicationPtr IOvals::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IOvals::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IOvals::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IOvals::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOvals::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOvals::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOvals::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOvals::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IOvals::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IOvals::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOvals::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOvals::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOvals::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOvals::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOvals::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOvals::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOvals::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOvals::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOvals::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOvals::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IOvals::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOvals::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOvals::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IOvals::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IOvals::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IOvals::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOvals::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOvals::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOvals::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOvals::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOvals::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IOvals::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IOvals::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr IOvals::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t IOvals::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOvals::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOvals::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOvals::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOvals::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOvals::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOvals::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOvals::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOvals::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOvals::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOvals::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IOvals::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IOvals::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr IOvals::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL IOvals::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOvals::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline OvalPtr IOvals::Add ( double Left, double Top, double Width, double Height ) {
    struct Oval * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OvalPtr(_result, false);
}

inline long IOvals::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IOvals::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IOvals::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IOvals::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IArc wrapper method implementations
//

inline _ApplicationPtr IArc::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IArc::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IArc::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IArc::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IArc::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IArc::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IArc::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IArc::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IArc::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IArc::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IArc::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArc::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IArc::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArc::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IArc::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IArc::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArc::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IArc::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArc::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IArc::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IArc::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IArc::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IArc::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IArc::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IArc::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IArc::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArc::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IArc::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IArc::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IArc::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArc::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IArc::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IArc::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArc::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IArc::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArc::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IArc::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IArc::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IArc::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArc::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IArc::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IArc::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IArc::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArc::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IArc::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IArc::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IArc::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IArc::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr IArc::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t IArc::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IArc::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IArc::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IArc::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IArc::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArc::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IArc::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IArc::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IArc::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IArc::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IArc::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IArc::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IArc::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArc::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IArc::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr IArc::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

//
// interface IArcs wrapper method implementations
//

inline _ApplicationPtr IArcs::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IArcs::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IArcs::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IArcs::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IArcs::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IArcs::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IArcs::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IArcs::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IArcs::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IArcs::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArcs::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IArcs::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArcs::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IArcs::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArcs::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IArcs::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArcs::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IArcs::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IArcs::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IArcs::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IArcs::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IArcs::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArcs::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IArcs::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IArcs::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IArcs::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArcs::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IArcs::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArcs::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IArcs::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArcs::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IArcs::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IArcs::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IArcs::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArcs::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IArcs::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IArcs::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IArcs::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArcs::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IArcs::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IArcs::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IArcs::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IArcs::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr IArcs::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t IArcs::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IArcs::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IArcs::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IArcs::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IArcs::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArcs::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IArcs::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IArcs::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IArcs::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IArcs::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IArcs::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IArcs::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IArcs::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IArcs::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IArcs::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr IArcs::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ArcPtr IArcs::Add ( double X1, double Y1, double X2, double Y2 ) {
    struct Arc * _result = 0;
    HRESULT _hr = raw_Add(X1, Y1, X2, Y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ArcPtr(_result, false);
}

inline long IArcs::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IArcs::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IArcs::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IArcs::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IOLEObject wrapper method implementations
//

inline _ApplicationPtr _IOLEObject::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator _IOLEObject::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IOLEObject::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr _IOLEObject::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t _IOLEObject::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _IOLEObject::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _IOLEObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _IOLEObject::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _IOLEObject::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr _IOLEObject::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _IOLEObject::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IOLEObject::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double _IOLEObject::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IOLEObject::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _IOLEObject::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double _IOLEObject::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IOLEObject::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IOLEObject::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IOLEObject::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _IOLEObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IOLEObject::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _IOLEObject::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IOLEObject::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _IOLEObject::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void _IOLEObject::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IOLEObject::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IOLEObject::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _IOLEObject::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _IOLEObject::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double _IOLEObject::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IOLEObject::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr _IOLEObject::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL _IOLEObject::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IOLEObject::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double _IOLEObject::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IOLEObject::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _IOLEObject::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr _IOLEObject::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline BorderPtr _IOLEObject::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr _IOLEObject::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL _IOLEObject::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IOLEObject::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _IOLEObject::Activate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Activate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL _IOLEObject::GetAutoLoad ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoLoad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IOLEObject::PutAutoLoad ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoLoad(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IOLEObject::GetAutoUpdate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IOLEObject::PutAutoUpdate ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoUpdate(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _IOLEObject::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t _IOLEObject::GetOLEType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OLEType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t _IOLEObject::GetSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IOLEObject::PutSourceName ( _bstr_t RHS ) {
    HRESULT _hr = put_SourceName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _IOLEObject::Update ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _IOLEObject::Verb ( enum XlOLEVerb Verb ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Verb(Verb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t _IOLEObject::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IOLEObject::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _IOLEObject::GetListFillRange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IOLEObject::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _IOLEObject::GetProgId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _IOLEObject::GetAltHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IOLEObject::PutAltHTML ( _bstr_t RHS ) {
    HRESULT _hr = put_AltHTML(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITextBox wrapper method implementations
//

inline _ApplicationPtr ITextBox::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ITextBox::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ITextBox::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr ITextBox::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t ITextBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ITextBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ITextBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ITextBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ITextBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr ITextBox::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ITextBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ITextBox::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITextBox::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ITextBox::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITextBox::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITextBox::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITextBox::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITextBox::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITextBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ITextBox::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextBox::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITextBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ITextBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ITextBox::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr ITextBox::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL ITextBox::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ITextBox::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITextBox::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr ITextBox::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL ITextBox::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITextBox::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ITextBox::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextBox::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITextBox::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITextBox::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr ITextBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t ITextBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr ITextBox::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t ITextBox::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITextBox::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITextBox::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ITextBox::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextBox::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITextBox::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ITextBox::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITextBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITextBox::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITextBox::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ITextBox::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITextBox::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr ITextBox::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr ITextBox::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL ITextBox::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextBox::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBox::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITextBoxes wrapper method implementations
//

inline _ApplicationPtr ITextBoxes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ITextBoxes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ITextBoxes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t ITextBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ITextBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ITextBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ITextBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ITextBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr ITextBoxes::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ITextBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ITextBoxes::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ITextBoxes::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextBoxes::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITextBoxes::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITextBoxes::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITextBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ITextBoxes::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITextBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ITextBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ITextBoxes::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextBoxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ITextBoxes::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITextBoxes::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr ITextBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL ITextBoxes::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITextBoxes::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ITextBoxes::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextBoxes::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITextBoxes::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITextBoxes::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr ITextBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t ITextBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr ITextBoxes::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t ITextBoxes::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITextBoxes::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITextBoxes::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ITextBoxes::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITextBoxes::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ITextBoxes::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITextBoxes::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITextBoxes::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITextBoxes::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ITextBoxes::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITextBoxes::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr ITextBoxes::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr ITextBoxes::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL ITextBoxes::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextBoxes::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextBoxes::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TextBoxPtr ITextBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct TextBox * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextBoxPtr(_result, false);
}

inline long ITextBoxes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr ITextBoxes::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr ITextBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr ITextBoxes::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPictures wrapper method implementations
//

inline _ApplicationPtr IPictures::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPictures::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPictures::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IPictures::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IPictures::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IPictures::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IPictures::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IPictures::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IPictures::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IPictures::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPictures::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPictures::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPictures::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPictures::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPictures::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPictures::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPictures::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPictures::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPictures::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPictures::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPictures::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPictures::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPictures::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPictures::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IPictures::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IPictures::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPictures::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPictures::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPictures::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPictures::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPictures::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPictures::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IPictures::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline BorderPtr IPictures::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr IPictures::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL IPictures::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPictures::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPictures::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPictures::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PicturePtr IPictures::Add ( double Left, double Top, double Width, double Height ) {
    struct Picture * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

inline long IPictures::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IPictures::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline PicturePtr IPictures::Insert ( _bstr_t Filename, const _variant_t & Converter ) {
    struct Picture * _result = 0;
    HRESULT _hr = raw_Insert(Filename, Converter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

inline IDispatchPtr IPictures::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IPictures::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline PicturePtr IPictures::Paste ( const _variant_t & Link ) {
    struct Picture * _result = 0;
    HRESULT _hr = raw_Paste(Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

//
// interface IDrawing wrapper method implementations
//

inline _ApplicationPtr IDrawing::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDrawing::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDrawing::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IDrawing::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IDrawing::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawing::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawing::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawing::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawing::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IDrawing::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IDrawing::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDrawing::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawing::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IDrawing::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawing::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDrawing::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawing::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDrawing::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawing::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawing::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawing::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawing::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawing::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawing::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IDrawing::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IDrawing::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IDrawing::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDrawing::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawing::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IDrawing::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IDrawing::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawing::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawing::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawing::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDrawing::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawing::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IDrawing::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IDrawing::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr IDrawing::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t IDrawing::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawing::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawing::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawing::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawing::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawing::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawing::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDrawing::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawing::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawing::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawing::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawing::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IDrawing::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr IDrawing::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL IDrawing::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawing::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawing::AddVertex ( double Left, double Top ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddVertex(Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawing::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Reshape(Vertex, Insert, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawing::GetVertices ( const _variant_t & Index1, const _variant_t & Index2 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(Index1, Index2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IDrawings wrapper method implementations
//

inline _ApplicationPtr IDrawings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDrawings::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDrawings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IDrawings::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawings::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawings::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawings::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawings::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IDrawings::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IDrawings::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDrawings::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDrawings::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawings::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDrawings::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawings::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawings::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawings::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawings::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawings::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDrawings::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IDrawings::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawings::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDrawings::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawings::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IDrawings::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IDrawings::GetAddIndent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawings::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawings::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawings::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDrawings::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawings::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IDrawings::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IDrawings::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr IDrawings::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t IDrawings::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawings::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawings::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawings::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDrawings::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawings::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawings::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDrawings::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDrawings::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawings::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDrawings::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDrawings::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IDrawings::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr IDrawings::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL IDrawings::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDrawings::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDrawings::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Reshape(Vertex, Insert, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline DrawingPtr IDrawings::Add ( double X1, double Y1, double X2, double Y2, VARIANT_BOOL Closed ) {
    struct Drawing * _result = 0;
    HRESULT _hr = raw_Add(X1, Y1, X2, Y2, Closed, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DrawingPtr(_result, false);
}

inline long IDrawings::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IDrawings::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IDrawings::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IDrawings::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IRoutingSlip wrapper method implementations
//

inline _ApplicationPtr IRoutingSlip::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IRoutingSlip::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IRoutingSlip::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum XlRoutingSlipDelivery IRoutingSlip::GetDelivery ( ) {
    enum XlRoutingSlipDelivery _result;
    HRESULT _hr = get_Delivery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRoutingSlip::PutDelivery ( enum XlRoutingSlipDelivery RHS ) {
    HRESULT _hr = put_Delivery(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRoutingSlip::GetMessage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRoutingSlip::PutMessage ( const _variant_t & RHS ) {
    HRESULT _hr = put_Message(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRoutingSlip::GetRecipients ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Recipients(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRoutingSlip::PutRecipients ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_Recipients(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRoutingSlip::Reset ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Reset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IRoutingSlip::GetReturnWhenDone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReturnWhenDone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRoutingSlip::PutReturnWhenDone ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ReturnWhenDone(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlRoutingSlipStatus IRoutingSlip::GetStatus ( ) {
    enum XlRoutingSlipStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IRoutingSlip::GetSubject ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRoutingSlip::PutSubject ( const _variant_t & RHS ) {
    HRESULT _hr = put_Subject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRoutingSlip::GetTrackStatus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TrackStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRoutingSlip::PutTrackStatus ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TrackStatus(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IOutline wrapper method implementations
//

inline _ApplicationPtr IOutline::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IOutline::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IOutline::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IOutline::GetAutomaticStyles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOutline::PutAutomaticStyles ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutomaticStyles(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOutline::ShowLevels ( const _variant_t & RowLevels, const _variant_t & ColumnLevels ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ShowLevels(RowLevels, ColumnLevels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum XlSummaryColumn IOutline::GetSummaryColumn ( ) {
    enum XlSummaryColumn _result;
    HRESULT _hr = get_SummaryColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOutline::PutSummaryColumn ( enum XlSummaryColumn RHS ) {
    HRESULT _hr = put_SummaryColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlSummaryRow IOutline::GetSummaryRow ( ) {
    enum XlSummaryRow _result;
    HRESULT _hr = get_SummaryRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOutline::PutSummaryRow ( enum XlSummaryRow RHS ) {
    HRESULT _hr = put_SummaryRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IModule wrapper method implementations
//

inline _ApplicationPtr IModule::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IModule::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IModule::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IModule::Activate ( long lcid ) {
    HRESULT _hr = raw_Activate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IModule::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IModule::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IModule::GetCodeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IModule::Get_CodeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IModule::Put_CodeName ( _bstr_t RHS ) {
    HRESULT _hr = put__CodeName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IModule::GetIndex ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Index(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IModule::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IModule::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IModule::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IModule::GetNext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IModule::GetOnDoubleClick ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnDoubleClick(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IModule::PutOnDoubleClick ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnDoubleClick(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IModule::GetOnSheetActivate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSheetActivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IModule::PutOnSheetActivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetActivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IModule::GetOnSheetDeactivate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSheetDeactivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IModule::PutOnSheetDeactivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetDeactivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PageSetupPtr IModule::GetPageSetup ( ) {
    struct PageSetup * _result = 0;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

inline IDispatchPtr IModule::GetPrevious ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IModule::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IModule::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid ) {
    HRESULT _hr = raw_Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IModule::GetProtectContents ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectContents(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IModule::GetProtectionMode ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IModule::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid ) {
    HRESULT _hr = raw_SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IModule::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IModule::Unprotect ( const _variant_t & Password, long lcid ) {
    HRESULT _hr = raw_Unprotect(Password, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum XlSheetVisibility IModule::GetVisible ( long lcid ) {
    enum XlSheetVisibility _result;
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IModule::PutVisible ( long lcid, enum XlSheetVisibility RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapesPtr IModule::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

inline _variant_t IModule::InsertFile ( const _variant_t & Filename, const _variant_t & Merge ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_InsertFile(Filename, Merge, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IModules wrapper method implementations
//

inline _ApplicationPtr IModules::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IModules::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IModules::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ModulePtr IModules::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count ) {
    struct Module * _result = 0;
    HRESULT _hr = raw_Add(Before, After, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ModulePtr(_result, false);
}

inline HRESULT IModules::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IModules::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IModules::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IModules::GetItem ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IModules::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IModules::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IModules::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IModules::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HPageBreaksPtr IModules::GetHPageBreaks ( ) {
    struct HPageBreaks * _result = 0;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

inline VPageBreaksPtr IModules::GetVPageBreaks ( ) {
    struct VPageBreaks * _result = 0;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

inline _variant_t IModules::GetVisible ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IModules::PutVisible ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IModules::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IModules::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDialogSheet wrapper method implementations
//

inline _ApplicationPtr IDialogSheet::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDialogSheet::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDialogSheet::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IDialogSheet::Activate ( long lcid ) {
    HRESULT _hr = raw_Activate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialogSheet::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialogSheet::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IDialogSheet::GetCodeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDialogSheet::Get_CodeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialogSheet::Put_CodeName ( _bstr_t RHS ) {
    HRESULT _hr = put__CodeName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDialogSheet::GetIndex ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Index(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IDialogSheet::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IDialogSheet::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialogSheet::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IDialogSheet::GetNext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IDialogSheet::GetOnDoubleClick ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnDoubleClick(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialogSheet::PutOnDoubleClick ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnDoubleClick(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDialogSheet::GetOnSheetActivate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSheetActivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialogSheet::PutOnSheetActivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetActivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDialogSheet::GetOnSheetDeactivate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSheetDeactivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialogSheet::PutOnSheetDeactivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetDeactivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PageSetupPtr IDialogSheet::GetPageSetup ( ) {
    struct PageSetup * _result = 0;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::GetPrevious ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IDialogSheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialogSheet::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialogSheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid ) {
    HRESULT _hr = raw_Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IDialogSheet::GetProtectContents ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectContents(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDialogSheet::GetProtectDrawingObjects ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectDrawingObjects(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDialogSheet::GetProtectionMode ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDialogSheet::GetProtectScenarios ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectScenarios(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IDialogSheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid ) {
    HRESULT _hr = raw_SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialogSheet::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialogSheet::Unprotect ( const _variant_t & Password, long lcid ) {
    HRESULT _hr = raw_Unprotect(Password, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum XlSheetVisibility IDialogSheet::GetVisible ( long lcid ) {
    enum XlSheetVisibility _result;
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogSheet::PutVisible ( long lcid, enum XlSheetVisibility RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapesPtr IDialogSheet::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::Arcs ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Arcs(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::Buttons ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Buttons(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IDialogSheet::GetEnableCalculation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableCalculation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogSheet::PutEnableCalculation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableCalculation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IDialogSheet::ChartObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ChartObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::CheckBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CheckBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IDialogSheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid ) {
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IDialogSheet::GetDisplayAutomaticPageBreaks ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayAutomaticPageBreaks(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogSheet::PutDisplayAutomaticPageBreaks ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayAutomaticPageBreaks(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IDialogSheet::Drawings ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Drawings(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::DrawingObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DrawingObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::DropDowns ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DropDowns(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IDialogSheet::GetEnableAutoFilter ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAutoFilter(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogSheet::PutEnableAutoFilter ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableAutoFilter(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlEnableSelection IDialogSheet::GetEnableSelection ( ) {
    enum XlEnableSelection _result;
    HRESULT _hr = get_EnableSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogSheet::PutEnableSelection ( enum XlEnableSelection RHS ) {
    HRESULT _hr = put_EnableSelection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDialogSheet::GetEnableOutlining ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableOutlining(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogSheet::PutEnableOutlining ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableOutlining(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDialogSheet::GetEnablePivotTable ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnablePivotTable(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogSheet::PutEnablePivotTable ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnablePivotTable(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDialogSheet::Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IDialogSheet::_Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IDialogSheet::ResetAllPageBreaks ( ) {
    HRESULT _hr = raw_ResetAllPageBreaks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IDialogSheet::GroupBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GroupBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::GroupObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GroupObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::Labels ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Labels(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::Lines ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Lines(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::ListBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ListBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline NamesPtr IDialogSheet::GetNames ( ) {
    struct Names * _result = 0;
    HRESULT _hr = get_Names(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamesPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::OLEObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_OLEObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::OptionButtons ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_OptionButtons(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::Ovals ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Ovals(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IDialogSheet::Paste ( const _variant_t & Destination, const _variant_t & Link, long lcid ) {
    HRESULT _hr = raw_Paste(Destination, Link, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialogSheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, long lcid ) {
    HRESULT _hr = raw_PasteSpecial(Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IDialogSheet::Pictures ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Pictures(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::Rectangles ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Rectangles(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IDialogSheet::GetScrollArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScrollArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialogSheet::PutScrollArea ( _bstr_t RHS ) {
    HRESULT _hr = put_ScrollArea(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IDialogSheet::ScrollBars ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ScrollBars(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::Spinners ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Spinners(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDialogSheet::TextBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_TextBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HPageBreaksPtr IDialogSheet::GetHPageBreaks ( ) {
    struct HPageBreaks * _result = 0;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

inline VPageBreaksPtr IDialogSheet::GetVPageBreaks ( ) {
    struct VPageBreaks * _result = 0;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

inline QueryTablesPtr IDialogSheet::GetQueryTables ( ) {
    struct QueryTables * _result = 0;
    HRESULT _hr = get_QueryTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return QueryTablesPtr(_result, false);
}

inline VARIANT_BOOL IDialogSheet::GetDisplayPageBreaks ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogSheet::PutDisplayPageBreaks ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayPageBreaks(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CommentsPtr IDialogSheet::GetComments ( ) {
    struct Comments * _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

inline HyperlinksPtr IDialogSheet::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

inline HRESULT IDialogSheet::ClearCircles ( ) {
    HRESULT _hr = raw_ClearCircles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialogSheet::CircleInvalid ( ) {
    HRESULT _hr = raw_CircleInvalid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IDialogSheet::Get_DisplayRightToLeft ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get__DisplayRightToLeft(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogSheet::Put_DisplayRightToLeft ( long lcid, long RHS ) {
    HRESULT _hr = put__DisplayRightToLeft(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline AutoFilterPtr IDialogSheet::GetAutoFilter ( ) {
    struct AutoFilter * _result = 0;
    HRESULT _hr = get_AutoFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoFilterPtr(_result, false);
}

inline VARIANT_BOOL IDialogSheet::GetDisplayRightToLeft ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayRightToLeft(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialogSheet::PutDisplayRightToLeft ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRightToLeft(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::ScriptsPtr IDialogSheet::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

inline HRESULT IDialogSheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialogSheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript, long lcid ) {
    HRESULT _hr = raw__CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, IgnoreFinalYaa, SpellScript, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IDialogSheet::GetDefaultButton ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDialogSheet::PutDefaultButton ( const _variant_t & RHS ) {
    HRESULT _hr = put_DefaultButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DialogFramePtr IDialogSheet::GetDialogFrame ( ) {
    struct DialogFrame * _result = 0;
    HRESULT _hr = get_DialogFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogFramePtr(_result, false);
}

inline IDispatchPtr IDialogSheet::EditBoxes ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_EditBoxes(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IDialogSheet::GetFocus ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Focus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDialogSheet::PutFocus ( const _variant_t & RHS ) {
    HRESULT _hr = put_Focus(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDialogSheet::Hide ( const _variant_t & Cancel ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Hide(Cancel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IDialogSheet::Show ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDialogSheets wrapper method implementations
//

inline _ApplicationPtr IDialogSheets::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDialogSheets::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDialogSheets::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline DialogSheetPtr IDialogSheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count ) {
    struct DialogSheet * _result = 0;
    HRESULT _hr = raw_Add(Before, After, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogSheetPtr(_result, false);
}

inline HRESULT IDialogSheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IDialogSheets::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IDialogSheets::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IDialogSheets::GetItem ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IDialogSheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IDialogSheets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IDialogSheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialogSheets::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialogSheets::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HPageBreaksPtr IDialogSheets::GetHPageBreaks ( ) {
    struct HPageBreaks * _result = 0;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

inline VPageBreaksPtr IDialogSheets::GetVPageBreaks ( ) {
    struct VPageBreaks * _result = 0;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

inline _variant_t IDialogSheets::GetVisible ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDialogSheets::PutVisible ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IDialogSheets::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IDialogSheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWorksheets wrapper method implementations
//

inline _ApplicationPtr IWorksheets::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IWorksheets::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IWorksheets::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IWorksheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Add(Before, After, Count, Type, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IWorksheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IWorksheets::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IWorksheets::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorksheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type, long lcid ) {
    HRESULT _hr = raw_FillAcrossSheets(Range, Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IWorksheets::GetItem ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IWorksheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IWorksheets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IWorksheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorksheets::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWorksheets::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HPageBreaksPtr IWorksheets::GetHPageBreaks ( ) {
    struct HPageBreaks * _result = 0;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

inline VPageBreaksPtr IWorksheets::GetVPageBreaks ( ) {
    struct VPageBreaks * _result = 0;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

inline _variant_t IWorksheets::GetVisible ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IWorksheets::PutVisible ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IWorksheets::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IWorksheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPageSetup wrapper method implementations
//

inline _ApplicationPtr IPageSetup::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPageSetup::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPageSetup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IPageSetup::GetBlackAndWhite ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BlackAndWhite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutBlackAndWhite ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BlackAndWhite(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPageSetup::GetBottomMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_BottomMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutBottomMargin ( double RHS ) {
    HRESULT _hr = put_BottomMargin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPageSetup::GetCenterFooter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CenterFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPageSetup::PutCenterFooter ( _bstr_t RHS ) {
    HRESULT _hr = put_CenterFooter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPageSetup::GetCenterHeader ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CenterHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPageSetup::PutCenterHeader ( _bstr_t RHS ) {
    HRESULT _hr = put_CenterHeader(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPageSetup::GetCenterHorizontally ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CenterHorizontally(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutCenterHorizontally ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CenterHorizontally(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPageSetup::GetCenterVertically ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CenterVertically(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutCenterVertically ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CenterVertically(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlObjectSize IPageSetup::GetChartSize ( ) {
    enum XlObjectSize _result;
    HRESULT _hr = get_ChartSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutChartSize ( enum XlObjectSize RHS ) {
    HRESULT _hr = put_ChartSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPageSetup::GetDraft ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Draft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutDraft ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Draft(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPageSetup::GetFirstPageNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutFirstPageNumber ( long RHS ) {
    HRESULT _hr = put_FirstPageNumber(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPageSetup::GetFitToPagesTall ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FitToPagesTall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPageSetup::PutFitToPagesTall ( const _variant_t & RHS ) {
    HRESULT _hr = put_FitToPagesTall(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPageSetup::GetFitToPagesWide ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FitToPagesWide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPageSetup::PutFitToPagesWide ( const _variant_t & RHS ) {
    HRESULT _hr = put_FitToPagesWide(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPageSetup::GetFooterMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_FooterMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutFooterMargin ( double RHS ) {
    HRESULT _hr = put_FooterMargin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPageSetup::GetHeaderMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_HeaderMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutHeaderMargin ( double RHS ) {
    HRESULT _hr = put_HeaderMargin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPageSetup::GetLeftFooter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LeftFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPageSetup::PutLeftFooter ( _bstr_t RHS ) {
    HRESULT _hr = put_LeftFooter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPageSetup::GetLeftHeader ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LeftHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPageSetup::PutLeftHeader ( _bstr_t RHS ) {
    HRESULT _hr = put_LeftHeader(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPageSetup::GetLeftMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_LeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutLeftMargin ( double RHS ) {
    HRESULT _hr = put_LeftMargin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlOrder IPageSetup::GetOrder ( ) {
    enum XlOrder _result;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutOrder ( enum XlOrder RHS ) {
    HRESULT _hr = put_Order(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlPageOrientation IPageSetup::GetOrientation ( ) {
    enum XlPageOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutOrientation ( enum XlPageOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlPaperSize IPageSetup::GetPaperSize ( ) {
    enum XlPaperSize _result;
    HRESULT _hr = get_PaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutPaperSize ( enum XlPaperSize RHS ) {
    HRESULT _hr = put_PaperSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPageSetup::GetPrintArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrintArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPageSetup::PutPrintArea ( _bstr_t RHS ) {
    HRESULT _hr = put_PrintArea(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPageSetup::GetPrintGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutPrintGridlines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintGridlines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPageSetup::GetPrintHeadings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintHeadings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutPrintHeadings ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintHeadings(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPageSetup::GetPrintNotes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutPrintNotes ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintNotes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPageSetup::GetPrintQuality ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PrintQuality(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPageSetup::PutPrintQuality ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_PrintQuality(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPageSetup::GetPrintTitleColumns ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrintTitleColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPageSetup::PutPrintTitleColumns ( _bstr_t RHS ) {
    HRESULT _hr = put_PrintTitleColumns(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPageSetup::GetPrintTitleRows ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrintTitleRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPageSetup::PutPrintTitleRows ( _bstr_t RHS ) {
    HRESULT _hr = put_PrintTitleRows(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPageSetup::GetRightFooter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPageSetup::PutRightFooter ( _bstr_t RHS ) {
    HRESULT _hr = put_RightFooter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPageSetup::GetRightHeader ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPageSetup::PutRightHeader ( _bstr_t RHS ) {
    HRESULT _hr = put_RightHeader(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPageSetup::GetRightMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_RightMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutRightMargin ( double RHS ) {
    HRESULT _hr = put_RightMargin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPageSetup::GetTopMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_TopMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutTopMargin ( double RHS ) {
    HRESULT _hr = put_TopMargin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPageSetup::GetZoom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPageSetup::PutZoom ( const _variant_t & RHS ) {
    HRESULT _hr = put_Zoom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlPrintLocation IPageSetup::GetPrintComments ( ) {
    enum XlPrintLocation _result;
    HRESULT _hr = get_PrintComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPageSetup::PutPrintComments ( enum XlPrintLocation RHS ) {
    HRESULT _hr = put_PrintComments(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface INames wrapper method implementations
//

inline _ApplicationPtr INames::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator INames::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr INames::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline NamePtr INames::Add ( const _variant_t & Name, const _variant_t & RefersTo, const _variant_t & Visible, const _variant_t & MacroType, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & NameLocal, const _variant_t & RefersToLocal, const _variant_t & CategoryLocal, const _variant_t & RefersToR1C1, const _variant_t & RefersToR1C1Local ) {
    struct Name * _result = 0;
    HRESULT _hr = raw_Add(Name, RefersTo, Visible, MacroType, ShortcutKey, Category, NameLocal, RefersToLocal, CategoryLocal, RefersToR1C1, RefersToR1C1Local, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamePtr(_result, false);
}

inline NamePtr INames::Item ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo, long lcid ) {
    struct Name * _result = 0;
    HRESULT _hr = raw_Item(Index, IndexLocal, RefersTo, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamePtr(_result, false);
}

inline NamePtr INames::_Default ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo, long lcid ) {
    struct Name * _result = 0;
    HRESULT _hr = raw__Default(Index, IndexLocal, RefersTo, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamePtr(_result, false);
}

inline long INames::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr INames::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IName wrapper method implementations
//

inline _ApplicationPtr IName::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IName::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IName::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IName::Get_Default ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IName::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IName::GetCategory ( long lcidIn ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(lcidIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IName::PutCategory ( long lcidIn, _bstr_t RHS ) {
    HRESULT _hr = put_Category(lcidIn, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IName::GetCategoryLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CategoryLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IName::PutCategoryLocal ( _bstr_t RHS ) {
    HRESULT _hr = put_CategoryLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IName::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum XlXLMMacroType IName::GetMacroType ( ) {
    enum XlXLMMacroType _result;
    HRESULT _hr = get_MacroType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IName::PutMacroType ( enum XlXLMMacroType RHS ) {
    HRESULT _hr = put_MacroType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IName::GetName ( long lcidIn ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(lcidIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IName::PutName ( long lcidIn, _bstr_t RHS ) {
    HRESULT _hr = put_Name(lcidIn, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IName::GetRefersTo ( long lcidIn ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RefersTo(lcidIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IName::PutRefersTo ( long lcidIn, const _variant_t & RHS ) {
    HRESULT _hr = put_RefersTo(lcidIn, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IName::GetShortcutKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortcutKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IName::PutShortcutKey ( _bstr_t RHS ) {
    HRESULT _hr = put_ShortcutKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IName::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IName::PutValue ( _bstr_t RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IName::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IName::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IName::GetNameLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IName::PutNameLocal ( _bstr_t RHS ) {
    HRESULT _hr = put_NameLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IName::GetRefersToLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RefersToLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IName::PutRefersToLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_RefersToLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IName::GetRefersToR1C1 ( long lcidIn ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RefersToR1C1(lcidIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IName::PutRefersToR1C1 ( long lcidIn, const _variant_t & RHS ) {
    HRESULT _hr = put_RefersToR1C1(lcidIn, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IName::GetRefersToR1C1Local ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RefersToR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IName::PutRefersToR1C1Local ( const _variant_t & RHS ) {
    HRESULT _hr = put_RefersToR1C1Local(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IName::GetRefersToRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_RefersToRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

//
// interface IChartObjects wrapper method implementations
//

inline _ApplicationPtr IChartObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IChartObjects::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IChartObjects::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IChartObjects::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IChartObjects::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IChartObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IChartObjects::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IChartObjects::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IChartObjects::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IChartObjects::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObjects::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IChartObjects::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObjects::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IChartObjects::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObjects::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartObjects::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObjects::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IChartObjects::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IChartObjects::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IChartObjects::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IChartObjects::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObjects::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IChartObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IChartObjects::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IChartObjects::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObjects::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartObjects::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObjects::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IChartObjects::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObjects::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapeRangePtr IChartObjects::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL IChartObjects::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObjects::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IChartObjects::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr IChartObjects::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL IChartObjects::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObjects::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ChartObjectPtr IChartObjects::Add ( double Left, double Top, double Width, double Height ) {
    struct ChartObject * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartObjectPtr(_result, false);
}

inline long IChartObjects::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IChartObjects::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IChartObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IChartObjects::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMailer wrapper method implementations
//

inline _ApplicationPtr IMailer::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IMailer::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMailer::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IMailer::GetBCCRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BCCRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMailer::PutBCCRecipients ( const _variant_t & RHS ) {
    HRESULT _hr = put_BCCRecipients(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IMailer::GetCCRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CCRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMailer::PutCCRecipients ( const _variant_t & RHS ) {
    HRESULT _hr = put_CCRecipients(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IMailer::GetEnclosures ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Enclosures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMailer::PutEnclosures ( const _variant_t & RHS ) {
    HRESULT _hr = put_Enclosures(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMailer::GetReceived ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Received(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE IMailer::GetSendDateTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_SendDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMailer::GetSender ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Sender(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMailer::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMailer::PutSubject ( _bstr_t RHS ) {
    HRESULT _hr = put_Subject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IMailer::GetToRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ToRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMailer::PutToRecipients ( const _variant_t & RHS ) {
    HRESULT _hr = put_ToRecipients(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IMailer::GetWhichAddress ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_WhichAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMailer::PutWhichAddress ( const _variant_t & RHS ) {
    HRESULT _hr = put_WhichAddress(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomViews wrapper method implementations
//

inline _ApplicationPtr ICustomViews::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ICustomViews::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ICustomViews::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long ICustomViews::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline CustomViewPtr ICustomViews::Item ( const _variant_t & ViewName ) {
    struct CustomView * _result = 0;
    HRESULT _hr = raw_Item(ViewName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomViewPtr(_result, false);
}

inline CustomViewPtr ICustomViews::Add ( _bstr_t ViewName, const _variant_t & PrintSettings, const _variant_t & RowColSettings ) {
    struct CustomView * _result = 0;
    HRESULT _hr = raw_Add(ViewName, PrintSettings, RowColSettings, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomViewPtr(_result, false);
}

inline CustomViewPtr ICustomViews::Get_Default ( const _variant_t & ViewName ) {
    struct CustomView * _result = 0;
    HRESULT _hr = get__Default(ViewName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomViewPtr(_result, false);
}

inline IUnknownPtr ICustomViews::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICustomView wrapper method implementations
//

inline _ApplicationPtr ICustomView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ICustomView::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ICustomView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t ICustomView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ICustomView::GetPrintSettings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ICustomView::GetRowColSettings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RowColSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ICustomView::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICustomView::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFormatConditions wrapper method implementations
//

inline _ApplicationPtr IFormatConditions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IFormatConditions::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IFormatConditions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IFormatConditions::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline FormatConditionPtr IFormatConditions::Item ( const _variant_t & Index ) {
    struct FormatCondition * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormatConditionPtr(_result, false);
}

inline FormatConditionPtr IFormatConditions::Add ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    struct FormatCondition * _result = 0;
    HRESULT _hr = raw_Add(Type, Operator, Formula1, Formula2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormatConditionPtr(_result, false);
}

inline FormatConditionPtr IFormatConditions::Get_Default ( const _variant_t & Index ) {
    struct FormatCondition * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormatConditionPtr(_result, false);
}

inline IUnknownPtr IFormatConditions::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IFormatConditions::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFormatCondition wrapper method implementations
//

inline _ApplicationPtr IFormatCondition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IFormatCondition::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IFormatCondition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IFormatCondition::Modify ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    HRESULT _hr = raw_Modify(Type, Operator, Formula1, Formula2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFormatCondition::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IFormatCondition::GetOperator ( ) {
    long _result = 0;
    HRESULT _hr = get_Operator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IFormatCondition::GetFormula1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IFormatCondition::GetFormula2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline InteriorPtr IFormatCondition::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline BordersPtr IFormatCondition::GetBorders ( ) {
    struct Borders * _result = 0;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

inline FontPtr IFormatCondition::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline HRESULT IFormatCondition::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IComments wrapper method implementations
//

inline _ApplicationPtr IComments::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IComments::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IComments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IComments::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline CommentPtr IComments::Item ( long Index ) {
    struct Comment * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

inline CommentPtr IComments::Get_Default ( long Index ) {
    struct Comment * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

inline IUnknownPtr IComments::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IComment wrapper method implementations
//

inline _ApplicationPtr IComment::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IComment::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IComment::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IComment::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline ShapePtr IComment::GetShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline VARIANT_BOOL IComment::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComment::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComment::Text ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Overwrite ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Text(Text, Start, Overwrite, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IComment::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline CommentPtr IComment::Next ( ) {
    struct Comment * _result = 0;
    HRESULT _hr = raw_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

inline CommentPtr IComment::Previous ( ) {
    struct Comment * _result = 0;
    HRESULT _hr = raw_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

//
// interface _IQueryTable wrapper method implementations
//

inline _ApplicationPtr _IQueryTable::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator _IQueryTable::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IQueryTable::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t _IQueryTable::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IQueryTable::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetFieldNames ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FieldNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutFieldNames ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_FieldNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetRowNumbers ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RowNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutRowNumbers ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RowNumbers(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetFillAdjacentFormulas ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillAdjacentFormulas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutFillAdjacentFormulas ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_FillAdjacentFormulas(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetHasAutoFormat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasAutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutHasAutoFormat ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasAutoFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetRefreshOnFileOpen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RefreshOnFileOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutRefreshOnFileOpen ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RefreshOnFileOpen(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetRefreshing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Refreshing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IQueryTable::GetFetchedRowOverflow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FetchedRowOverflow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IQueryTable::GetBackgroundQuery ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackgroundQuery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutBackgroundQuery ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BackgroundQuery(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _IQueryTable::CancelRefresh ( ) {
    HRESULT _hr = raw_CancelRefresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum XlCellInsertionMode _IQueryTable::GetRefreshStyle ( ) {
    enum XlCellInsertionMode _result;
    HRESULT _hr = get_RefreshStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutRefreshStyle ( enum XlCellInsertionMode RHS ) {
    HRESULT _hr = put_RefreshStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetEnableRefresh ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableRefresh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutEnableRefresh ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableRefresh(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetSavePassword ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SavePassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutSavePassword ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SavePassword(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr _IQueryTable::GetDestination ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Destination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t _IQueryTable::GetConnection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Connection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void _IQueryTable::PutConnection ( const _variant_t & RHS ) {
    HRESULT _hr = put_Connection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _IQueryTable::GetSql ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Sql(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void _IQueryTable::PutSql ( const _variant_t & RHS ) {
    HRESULT _hr = put_Sql(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _IQueryTable::GetPostText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PostText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IQueryTable::PutPostText ( _bstr_t RHS ) {
    HRESULT _hr = put_PostText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr _IQueryTable::GetResultRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_ResultRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline HRESULT _IQueryTable::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _IQueryTable::Refresh ( const _variant_t & BackgroundQuery ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Refresh(BackgroundQuery, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ParametersPtr _IQueryTable::GetParameters ( ) {
    struct Parameters * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParametersPtr(_result, false);
}

inline IDispatchPtr _IQueryTable::GetRecordset ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Recordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline void _IQueryTable::PutRefRecordset ( IDispatch * RHS ) {
    HRESULT _hr = putref_Recordset(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetSaveData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutSaveData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SaveData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetTablesOnlyFromHTML ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TablesOnlyFromHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutTablesOnlyFromHTML ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TablesOnlyFromHTML(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetEnableEditing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableEditing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutEnableEditing ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableEditing(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlPlatform _IQueryTable::GetTextFilePlatform ( ) {
    enum XlPlatform _result;
    HRESULT _hr = get_TextFilePlatform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutTextFilePlatform ( enum XlPlatform RHS ) {
    HRESULT _hr = put_TextFilePlatform(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _IQueryTable::GetTextFileStartRow ( ) {
    long _result = 0;
    HRESULT _hr = get_TextFileStartRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutTextFileStartRow ( long RHS ) {
    HRESULT _hr = put_TextFileStartRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlTextParsingType _IQueryTable::GetTextFileParseType ( ) {
    enum XlTextParsingType _result;
    HRESULT _hr = get_TextFileParseType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutTextFileParseType ( enum XlTextParsingType RHS ) {
    HRESULT _hr = put_TextFileParseType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlTextQualifier _IQueryTable::GetTextFileTextQualifier ( ) {
    enum XlTextQualifier _result;
    HRESULT _hr = get_TextFileTextQualifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutTextFileTextQualifier ( enum XlTextQualifier RHS ) {
    HRESULT _hr = put_TextFileTextQualifier(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetTextFileConsecutiveDelimiter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextFileConsecutiveDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutTextFileConsecutiveDelimiter ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFileConsecutiveDelimiter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetTextFileTabDelimiter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextFileTabDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutTextFileTabDelimiter ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFileTabDelimiter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetTextFileSemicolonDelimiter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextFileSemicolonDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutTextFileSemicolonDelimiter ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFileSemicolonDelimiter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetTextFileCommaDelimiter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextFileCommaDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutTextFileCommaDelimiter ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFileCommaDelimiter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetTextFileSpaceDelimiter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextFileSpaceDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutTextFileSpaceDelimiter ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFileSpaceDelimiter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _IQueryTable::GetTextFileOtherDelimiter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextFileOtherDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IQueryTable::PutTextFileOtherDelimiter ( _bstr_t RHS ) {
    HRESULT _hr = put_TextFileOtherDelimiter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _IQueryTable::GetTextFileColumnDataTypes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextFileColumnDataTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void _IQueryTable::PutTextFileColumnDataTypes ( const _variant_t & RHS ) {
    HRESULT _hr = put_TextFileColumnDataTypes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _IQueryTable::GetTextFileFixedColumnWidths ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextFileFixedColumnWidths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void _IQueryTable::PutTextFileFixedColumnWidths ( const _variant_t & RHS ) {
    HRESULT _hr = put_TextFileFixedColumnWidths(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetPreserveColumnInfo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreserveColumnInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutPreserveColumnInfo ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PreserveColumnInfo(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetPreserveFormatting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreserveFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutPreserveFormatting ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PreserveFormatting(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetAdjustColumnWidth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdjustColumnWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutAdjustColumnWidth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AdjustColumnWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _IQueryTable::GetCommandText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CommandText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void _IQueryTable::PutCommandText ( const _variant_t & RHS ) {
    HRESULT _hr = put_CommandText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlCmdType _IQueryTable::GetCommandType ( ) {
    enum XlCmdType _result;
    HRESULT _hr = get_CommandType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutCommandType ( enum XlCmdType RHS ) {
    HRESULT _hr = put_CommandType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetTextFilePromptOnRefresh ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextFilePromptOnRefresh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutTextFilePromptOnRefresh ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFilePromptOnRefresh(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum xlQueryType _IQueryTable::GetQueryType ( ) {
    enum xlQueryType _result;
    HRESULT _hr = get_QueryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IQueryTable::GetMaintainConnection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MaintainConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutMaintainConnection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MaintainConnection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _IQueryTable::GetTextFileDecimalSeparator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextFileDecimalSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IQueryTable::PutTextFileDecimalSeparator ( _bstr_t RHS ) {
    HRESULT _hr = put_TextFileDecimalSeparator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _IQueryTable::GetTextFileThousandsSeparator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextFileThousandsSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IQueryTable::PutTextFileThousandsSeparator ( _bstr_t RHS ) {
    HRESULT _hr = put_TextFileThousandsSeparator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _IQueryTable::GetRefreshPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_RefreshPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutRefreshPeriod ( long RHS ) {
    HRESULT _hr = put_RefreshPeriod(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _IQueryTable::ResetTimer ( ) {
    HRESULT _hr = raw_ResetTimer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum xlWebSelectionType _IQueryTable::GetWebSelectionType ( ) {
    enum xlWebSelectionType _result;
    HRESULT _hr = get_WebSelectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutWebSelectionType ( enum xlWebSelectionType RHS ) {
    HRESULT _hr = put_WebSelectionType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum xlWebFormatting _IQueryTable::GetWebFormatting ( ) {
    enum xlWebFormatting _result;
    HRESULT _hr = get_WebFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutWebFormatting ( enum xlWebFormatting RHS ) {
    HRESULT _hr = put_WebFormatting(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _IQueryTable::GetWebTables ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WebTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IQueryTable::PutWebTables ( _bstr_t RHS ) {
    HRESULT _hr = put_WebTables(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetWebPreFormattedTextToColumns ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WebPreFormattedTextToColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutWebPreFormattedTextToColumns ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WebPreFormattedTextToColumns(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetWebSingleBlockTextImport ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WebSingleBlockTextImport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutWebSingleBlockTextImport ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WebSingleBlockTextImport(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetWebDisableDateRecognition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WebDisableDateRecognition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutWebDisableDateRecognition ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WebDisableDateRecognition(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _IQueryTable::GetWebConsecutiveDelimitersAsOne ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WebConsecutiveDelimitersAsOne(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IQueryTable::PutWebConsecutiveDelimitersAsOne ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WebConsecutiveDelimitersAsOne(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IQueryTables wrapper method implementations
//

inline _ApplicationPtr IQueryTables::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IQueryTables::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IQueryTables::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IQueryTables::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _QueryTablePtr IQueryTables::Add ( const _variant_t & Connection, struct Range * Destination, const _variant_t & Sql ) {
    struct _QueryTable * _result = 0;
    HRESULT _hr = raw_Add(Connection, Destination, Sql, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _QueryTablePtr(_result, false);
}

inline _QueryTablePtr IQueryTables::Item ( const _variant_t & Index ) {
    struct _QueryTable * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _QueryTablePtr(_result, false);
}

inline _QueryTablePtr IQueryTables::Get_Default ( const _variant_t & Index ) {
    struct _QueryTable * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _QueryTablePtr(_result, false);
}

inline IUnknownPtr IQueryTables::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IParameter wrapper method implementations
//

inline _ApplicationPtr IParameter::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IParameter::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IParameter::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum XlParameterDataType IParameter::GetDataType ( ) {
    enum XlParameterDataType _result;
    HRESULT _hr = get_DataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IParameter::PutDataType ( enum XlParameterDataType RHS ) {
    HRESULT _hr = put_DataType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlParameterType IParameter::GetType ( ) {
    enum XlParameterType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IParameter::GetPromptString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PromptString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IParameter::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IParameter::GetSourceRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_SourceRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _bstr_t IParameter::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IParameter::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IParameter::SetParam ( enum XlParameterType Type, const _variant_t & Value ) {
    HRESULT _hr = raw_SetParam(Type, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IParameter::GetRefreshOnChange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RefreshOnChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IParameter::PutRefreshOnChange ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RefreshOnChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IParameters wrapper method implementations
//

inline _ApplicationPtr IParameters::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IParameters::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IParameters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ParameterPtr IParameters::Add ( _bstr_t Name, const _variant_t & iDataType ) {
    struct Parameter * _result = 0;
    HRESULT _hr = raw_Add(Name, iDataType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParameterPtr(_result, false);
}

inline long IParameters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ParameterPtr IParameters::Item ( const _variant_t & Index ) {
    struct Parameter * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParameterPtr(_result, false);
}

inline ParameterPtr IParameters::Get_Default ( const _variant_t & Index ) {
    struct Parameter * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParameterPtr(_result, false);
}

inline HRESULT IParameters::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IParameters::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IODBCError wrapper method implementations
//

inline _ApplicationPtr IODBCError::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IODBCError::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IODBCError::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IODBCError::GetSqlState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SqlState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IODBCError::GetErrorString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ErrorString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IODBCErrors wrapper method implementations
//

inline _ApplicationPtr IODBCErrors::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IODBCErrors::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IODBCErrors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IODBCErrors::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ODBCErrorPtr IODBCErrors::Item ( long Index ) {
    struct ODBCError * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ODBCErrorPtr(_result, false);
}

inline ODBCErrorPtr IODBCErrors::Get_Default ( long Index ) {
    struct ODBCError * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ODBCErrorPtr(_result, false);
}

inline IUnknownPtr IODBCErrors::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IValidation wrapper method implementations
//

inline _ApplicationPtr IValidation::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IValidation::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IValidation::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IValidation::Add ( enum XlDVType Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    HRESULT _hr = raw_Add(Type, AlertStyle, Operator, Formula1, Formula2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IValidation::GetAlertStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_AlertStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IValidation::GetIgnoreBlank ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IgnoreBlank(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IValidation::PutIgnoreBlank ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IgnoreBlank(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IValidation::GetIMEMode ( ) {
    long _result = 0;
    HRESULT _hr = get_IMEMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IValidation::PutIMEMode ( long RHS ) {
    HRESULT _hr = put_IMEMode(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IValidation::GetInCellDropdown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InCellDropdown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IValidation::PutInCellDropdown ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InCellDropdown(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IValidation::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IValidation::GetErrorMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ErrorMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IValidation::PutErrorMessage ( _bstr_t RHS ) {
    HRESULT _hr = put_ErrorMessage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IValidation::GetErrorTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ErrorTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IValidation::PutErrorTitle ( _bstr_t RHS ) {
    HRESULT _hr = put_ErrorTitle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IValidation::GetInputMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InputMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IValidation::PutInputMessage ( _bstr_t RHS ) {
    HRESULT _hr = put_InputMessage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IValidation::GetInputTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InputTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IValidation::PutInputTitle ( _bstr_t RHS ) {
    HRESULT _hr = put_InputTitle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IValidation::GetFormula1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IValidation::GetFormula2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IValidation::Modify ( const _variant_t & Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    HRESULT _hr = raw_Modify(Type, AlertStyle, Operator, Formula1, Formula2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IValidation::GetOperator ( ) {
    long _result = 0;
    HRESULT _hr = get_Operator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IValidation::GetShowError ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IValidation::PutShowError ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowError(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IValidation::GetShowInput ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowInput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IValidation::PutShowInput ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowInput(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IValidation::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IValidation::GetValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IHyperlinks wrapper method implementations
//

inline _ApplicationPtr IHyperlinks::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IHyperlinks::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IHyperlinks::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IHyperlinks::Add ( IDispatch * Anchor, _bstr_t Address, const _variant_t & SubAddress, const _variant_t & ScreenTip, const _variant_t & TextToDisplay ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Add(Anchor, Address, SubAddress, ScreenTip, TextToDisplay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IHyperlinks::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HyperlinkPtr IHyperlinks::GetItem ( const _variant_t & Index ) {
    struct Hyperlink * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

inline HyperlinkPtr IHyperlinks::Get_Default ( const _variant_t & Index ) {
    struct Hyperlink * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

inline IUnknownPtr IHyperlinks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IHyperlinks::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHyperlink wrapper method implementations
//

inline _ApplicationPtr IHyperlink::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IHyperlink::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IHyperlink::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IHyperlink::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline RangePtr IHyperlink::GetRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline ShapePtr IHyperlink::GetShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline _bstr_t IHyperlink::GetSubAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHyperlink::PutSubAddress ( _bstr_t RHS ) {
    HRESULT _hr = put_SubAddress(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IHyperlink::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHyperlink::PutAddress ( _bstr_t RHS ) {
    HRESULT _hr = put_Address(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IHyperlink::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IHyperlink::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHyperlink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHyperlink::Follow ( const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo ) {
    HRESULT _hr = raw_Follow(NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IHyperlink::GetEmailSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EmailSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHyperlink::PutEmailSubject ( _bstr_t RHS ) {
    HRESULT _hr = put_EmailSubject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IHyperlink::GetScreenTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScreenTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHyperlink::PutScreenTip ( _bstr_t RHS ) {
    HRESULT _hr = put_ScreenTip(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IHyperlink::GetTextToDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextToDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHyperlink::PutTextToDisplay ( _bstr_t RHS ) {
    HRESULT _hr = put_TextToDisplay(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IHyperlink::CreateNewDocument ( _bstr_t Filename, VARIANT_BOOL EditNow, VARIANT_BOOL Overwrite ) {
    HRESULT _hr = raw_CreateNewDocument(Filename, EditNow, Overwrite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAutoFilter wrapper method implementations
//

inline _ApplicationPtr IAutoFilter::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IAutoFilter::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IAutoFilter::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IAutoFilter::GetRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline FiltersPtr IAutoFilter::GetFilters ( ) {
    struct Filters * _result = 0;
    HRESULT _hr = get_Filters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FiltersPtr(_result, false);
}

//
// interface IFilters wrapper method implementations
//

inline _ApplicationPtr IFilters::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IFilters::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IFilters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IFilters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline FilterPtr IFilters::Get_Default ( long Index ) {
    struct Filter * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FilterPtr(_result, false);
}

inline FilterPtr IFilters::GetItem ( long Index ) {
    struct Filter * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FilterPtr(_result, false);
}

inline IUnknownPtr IFilters::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IFilter wrapper method implementations
//

inline _ApplicationPtr IFilter::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IFilter::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IFilter::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IFilter::GetOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_On(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IFilter::GetCriteria1 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Criteria1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum XlAutoFilterOperator IFilter::GetOperator ( ) {
    enum XlAutoFilterOperator _result;
    HRESULT _hr = get_Operator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IFilter::GetCriteria2 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Criteria2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IAutoCorrect wrapper method implementations
//

inline _ApplicationPtr IAutoCorrect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IAutoCorrect::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IAutoCorrect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IAutoCorrect::AddReplacement ( _bstr_t What, _bstr_t Replacement ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddReplacement(What, Replacement, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IAutoCorrect::GetCapitalizeNamesOfDays ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CapitalizeNamesOfDays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAutoCorrect::PutCapitalizeNamesOfDays ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CapitalizeNamesOfDays(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IAutoCorrect::DeleteReplacement ( _bstr_t What ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_DeleteReplacement(What, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IAutoCorrect::GetReplacementList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReplacementList(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IAutoCorrect::PutReplacementList ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_ReplacementList(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAutoCorrect::GetMSReplaceText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MSReplaceText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAutoCorrect::PutMSReplaceText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MSReplaceText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAutoCorrect::GetTwoInitialCapitals ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TwoInitialCapitals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAutoCorrect::PutTwoInitialCapitals ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TwoInitialCapitals(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAutoCorrect::GetCorrectSentenceCap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CorrectSentenceCap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAutoCorrect::PutCorrectSentenceCap ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CorrectSentenceCap(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAutoCorrect::GetCorrectCapsLock ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CorrectCapsLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAutoCorrect::PutCorrectCapsLock ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CorrectCapsLock(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBorder wrapper method implementations
//

inline _ApplicationPtr IBorder::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IBorder::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IBorder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IBorder::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IBorder::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IBorder::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IBorder::PutColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IBorder::GetLineStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IBorder::PutLineStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_LineStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IBorder::GetWeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IBorder::PutWeight ( const _variant_t & RHS ) {
    HRESULT _hr = put_Weight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IInterior wrapper method implementations
//

inline _ApplicationPtr IInterior::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IInterior::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IInterior::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IInterior::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IInterior::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IInterior::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IInterior::PutColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IInterior::GetInvertIfNegative ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IInterior::PutInvertIfNegative ( const _variant_t & RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IInterior::GetPattern ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IInterior::PutPattern ( const _variant_t & RHS ) {
    HRESULT _hr = put_Pattern(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IInterior::GetPatternColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IInterior::PutPatternColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_PatternColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IInterior::GetPatternColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IInterior::PutPatternColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_PatternColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartFillFormat wrapper method implementations
//

inline _ApplicationPtr IChartFillFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IChartFillFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IChartFillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IChartFillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartFillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartFillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartFillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartFillFormat::Patterned ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement ) {
    HRESULT _hr = raw_UserPicture(PictureFile, PictureFormat, PictureStackUnit, PicturePlacement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartFillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChartFillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ChartColorFormatPtr IChartFillFormat::GetBackColor ( ) {
    struct ChartColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartColorFormatPtr(_result, false);
}

inline ChartColorFormatPtr IChartFillFormat::GetForeColor ( ) {
    struct ChartColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartColorFormatPtr(_result, false);
}

inline enum Office::MsoGradientColorType IChartFillFormat::GetGradientColorType ( ) {
    enum Office::MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IChartFillFormat::GetGradientDegree ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoGradientStyle IChartFillFormat::GetGradientStyle ( ) {
    enum Office::MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IChartFillFormat::GetGradientVariant ( ) {
    long _result = 0;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoPatternType IChartFillFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoPresetGradientType IChartFillFormat::GetPresetGradientType ( ) {
    enum Office::MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoPresetTexture IChartFillFormat::GetPresetTexture ( ) {
    enum Office::MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IChartFillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum Office::MsoTextureType IChartFillFormat::GetTextureType ( ) {
    enum Office::MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoFillType IChartFillFormat::GetType ( ) {
    enum Office::MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState IChartFillFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartFillFormat::PutVisible ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartColorFormat wrapper method implementations
//

inline _ApplicationPtr IChartColorFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IChartColorFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IChartColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IChartColorFormat::GetSchemeColor ( ) {
    long _result = 0;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartColorFormat::PutSchemeColor ( long RHS ) {
    HRESULT _hr = put_SchemeColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IChartColorFormat::GetMSRBG ( ) {
    long _result = 0;
    HRESULT _hr = get_MSRBG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IChartColorFormat::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IChartColorFormat::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAxis wrapper method implementations
//

inline _ApplicationPtr IAxis::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IAxis::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IAxis::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IAxis::GetAxisBetweenCategories ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AxisBetweenCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutAxisBetweenCategories ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AxisBetweenCategories(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlAxisGroup IAxis::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline AxisTitlePtr IAxis::GetAxisTitle ( ) {
    struct AxisTitle * _result = 0;
    HRESULT _hr = get_AxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AxisTitlePtr(_result, false);
}

inline BorderPtr IAxis::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IAxis::GetCategoryNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CategoryNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IAxis::PutCategoryNames ( const _variant_t & RHS ) {
    HRESULT _hr = put_CategoryNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlAxisCrosses IAxis::GetCrosses ( ) {
    enum XlAxisCrosses _result;
    HRESULT _hr = get_Crosses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutCrosses ( enum XlAxisCrosses RHS ) {
    HRESULT _hr = put_Crosses(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IAxis::GetCrossesAt ( ) {
    double _result = 0;
    HRESULT _hr = get_CrossesAt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutCrossesAt ( double RHS ) {
    HRESULT _hr = put_CrossesAt(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IAxis::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IAxis::GetHasMajorGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutHasMajorGridlines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasMajorGridlines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAxis::GetHasMinorGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutHasMinorGridlines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasMinorGridlines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAxis::GetHasTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutHasTitle ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasTitle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline GridlinesPtr IAxis::GetMajorGridlines ( ) {
    struct Gridlines * _result = 0;
    HRESULT _hr = get_MajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GridlinesPtr(_result, false);
}

inline enum XlTickMark IAxis::GetMajorTickMark ( ) {
    enum XlTickMark _result;
    HRESULT _hr = get_MajorTickMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutMajorTickMark ( enum XlTickMark RHS ) {
    HRESULT _hr = put_MajorTickMark(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IAxis::GetMajorUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutMajorUnit ( double RHS ) {
    HRESULT _hr = put_MajorUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAxis::GetMajorUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MajorUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutMajorUnitIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MajorUnitIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IAxis::GetMaximumScale ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutMaximumScale ( double RHS ) {
    HRESULT _hr = put_MaximumScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAxis::GetMaximumScaleIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MaximumScaleIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutMaximumScaleIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MaximumScaleIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IAxis::GetMinimumScale ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutMinimumScale ( double RHS ) {
    HRESULT _hr = put_MinimumScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAxis::GetMinimumScaleIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MinimumScaleIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutMinimumScaleIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MinimumScaleIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline GridlinesPtr IAxis::GetMinorGridlines ( ) {
    struct Gridlines * _result = 0;
    HRESULT _hr = get_MinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GridlinesPtr(_result, false);
}

inline enum XlTickMark IAxis::GetMinorTickMark ( ) {
    enum XlTickMark _result;
    HRESULT _hr = get_MinorTickMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutMinorTickMark ( enum XlTickMark RHS ) {
    HRESULT _hr = put_MinorTickMark(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IAxis::GetMinorUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutMinorUnit ( double RHS ) {
    HRESULT _hr = put_MinorUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAxis::GetMinorUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MinorUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutMinorUnitIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MinorUnitIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAxis::GetReversePlotOrder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReversePlotOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutReversePlotOrder ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ReversePlotOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlScaleType IAxis::GetScaleType ( ) {
    enum XlScaleType _result;
    HRESULT _hr = get_ScaleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutScaleType ( enum XlScaleType RHS ) {
    HRESULT _hr = put_ScaleType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IAxis::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum XlTickLabelPosition IAxis::GetTickLabelPosition ( ) {
    enum XlTickLabelPosition _result;
    HRESULT _hr = get_TickLabelPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutTickLabelPosition ( enum XlTickLabelPosition RHS ) {
    HRESULT _hr = put_TickLabelPosition(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TickLabelsPtr IAxis::GetTickLabels ( ) {
    struct TickLabels * _result = 0;
    HRESULT _hr = get_TickLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TickLabelsPtr(_result, false);
}

inline long IAxis::GetTickLabelSpacing ( ) {
    long _result = 0;
    HRESULT _hr = get_TickLabelSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutTickLabelSpacing ( long RHS ) {
    HRESULT _hr = put_TickLabelSpacing(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IAxis::GetTickMarkSpacing ( ) {
    long _result = 0;
    HRESULT _hr = get_TickMarkSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutTickMarkSpacing ( long RHS ) {
    HRESULT _hr = put_TickMarkSpacing(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlAxisType IAxis::GetType ( ) {
    enum XlAxisType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutType ( enum XlAxisType RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlTimeUnit IAxis::GetBaseUnit ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_BaseUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutBaseUnit ( enum XlTimeUnit RHS ) {
    HRESULT _hr = put_BaseUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAxis::GetBaseUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BaseUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutBaseUnitIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BaseUnitIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlTimeUnit IAxis::GetMajorUnitScale ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_MajorUnitScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutMajorUnitScale ( enum XlTimeUnit RHS ) {
    HRESULT _hr = put_MajorUnitScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlTimeUnit IAxis::GetMinorUnitScale ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_MinorUnitScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutMinorUnitScale ( enum XlTimeUnit RHS ) {
    HRESULT _hr = put_MinorUnitScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlCategoryType IAxis::GetCategoryType ( ) {
    enum XlCategoryType _result;
    HRESULT _hr = get_CategoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutCategoryType ( enum XlCategoryType RHS ) {
    HRESULT _hr = put_CategoryType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IAxis::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IAxis::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IAxis::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IAxis::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum XlDisplayUnit IAxis::GetDisplayUnit ( ) {
    enum XlDisplayUnit _result;
    HRESULT _hr = get_DisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutDisplayUnit ( enum XlDisplayUnit RHS ) {
    HRESULT _hr = put_DisplayUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IAxis::GetDisplayUnitCustom ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayUnitCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutDisplayUnitCustom ( double RHS ) {
    HRESULT _hr = put_DisplayUnitCustom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAxis::GetHasDisplayUnitLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDisplayUnitLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxis::PutHasDisplayUnitLabel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDisplayUnitLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DisplayUnitLabelPtr IAxis::GetDisplayUnitLabel ( ) {
    struct DisplayUnitLabel * _result = 0;
    HRESULT _hr = get_DisplayUnitLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DisplayUnitLabelPtr(_result, false);
}

//
// interface IChartTitle wrapper method implementations
//

inline _ApplicationPtr IChartTitle::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IChartTitle::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IChartTitle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IChartTitle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IChartTitle::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IChartTitle::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IChartTitle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline InteriorPtr IChartTitle::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr IChartTitle::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

inline _bstr_t IChartTitle::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IChartTitle::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline FontPtr IChartTitle::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _variant_t IChartTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IChartTitle::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IChartTitle::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartTitle::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IChartTitle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IChartTitle::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartTitle::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartTitle::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IChartTitle::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IChartTitle::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IChartTitle::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartTitle::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IChartTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IChartTitle::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IChartTitle::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartTitle::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IChartTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IChartTitle::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAxisTitle wrapper method implementations
//

inline _ApplicationPtr IAxisTitle::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IAxisTitle::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IAxisTitle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IAxisTitle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IAxisTitle::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IAxisTitle::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IAxisTitle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline InteriorPtr IAxisTitle::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr IAxisTitle::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

inline _bstr_t IAxisTitle::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IAxisTitle::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IAxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline FontPtr IAxisTitle::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _variant_t IAxisTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IAxisTitle::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IAxisTitle::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxisTitle::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IAxisTitle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IAxisTitle::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IAxisTitle::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxisTitle::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IAxisTitle::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IAxisTitle::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IAxisTitle::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxisTitle::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IAxisTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IAxisTitle::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IAxisTitle::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAxisTitle::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IAxisTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IAxisTitle::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartGroup wrapper method implementations
//

inline _ApplicationPtr IChartGroup::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IChartGroup::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IChartGroup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum XlAxisGroup IChartGroup::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutAxisGroup ( enum XlAxisGroup RHS ) {
    HRESULT _hr = put_AxisGroup(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IChartGroup::GetDoughnutHoleSize ( ) {
    long _result = 0;
    HRESULT _hr = get_DoughnutHoleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutDoughnutHoleSize ( long RHS ) {
    HRESULT _hr = put_DoughnutHoleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DownBarsPtr IChartGroup::GetDownBars ( ) {
    struct DownBars * _result = 0;
    HRESULT _hr = get_DownBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DownBarsPtr(_result, false);
}

inline DropLinesPtr IChartGroup::GetDropLines ( ) {
    struct DropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DropLinesPtr(_result, false);
}

inline long IChartGroup::GetFirstSliceAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstSliceAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutFirstSliceAngle ( long RHS ) {
    HRESULT _hr = put_FirstSliceAngle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IChartGroup::GetGapWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_GapWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutGapWidth ( long RHS ) {
    HRESULT _hr = put_GapWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartGroup::GetHasDropLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutHasDropLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDropLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartGroup::GetHasHiLoLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasHiLoLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutHasHiLoLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasHiLoLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartGroup::GetHasRadarAxisLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasRadarAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasRadarAxisLabels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartGroup::GetHasSeriesLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasSeriesLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutHasSeriesLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasSeriesLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartGroup::GetHasUpDownBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasUpDownBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutHasUpDownBars ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasUpDownBars(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HiLoLinesPtr IChartGroup::GetHiLoLines ( ) {
    struct HiLoLines * _result = 0;
    HRESULT _hr = get_HiLoLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HiLoLinesPtr(_result, false);
}

inline long IChartGroup::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IChartGroup::GetOverlap ( ) {
    long _result = 0;
    HRESULT _hr = get_Overlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutOverlap ( long RHS ) {
    HRESULT _hr = put_Overlap(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TickLabelsPtr IChartGroup::GetRadarAxisLabels ( ) {
    struct TickLabels * _result = 0;
    HRESULT _hr = get_RadarAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TickLabelsPtr(_result, false);
}

inline IDispatchPtr IChartGroup::SeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SeriesCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline SeriesLinesPtr IChartGroup::GetSeriesLines ( ) {
    struct SeriesLines * _result = 0;
    HRESULT _hr = get_SeriesLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesLinesPtr(_result, false);
}

inline long IChartGroup::GetSubType ( ) {
    long _result = 0;
    HRESULT _hr = get_SubType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutSubType ( long RHS ) {
    HRESULT _hr = put_SubType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IChartGroup::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutType ( long RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline UpBarsPtr IChartGroup::GetUpBars ( ) {
    struct UpBars * _result = 0;
    HRESULT _hr = get_UpBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UpBarsPtr(_result, false);
}

inline VARIANT_BOOL IChartGroup::GetVaryByCategories ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VaryByCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutVaryByCategories ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_VaryByCategories(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlSizeRepresents IChartGroup::GetSizeRepresents ( ) {
    enum XlSizeRepresents _result;
    HRESULT _hr = get_SizeRepresents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutSizeRepresents ( enum XlSizeRepresents RHS ) {
    HRESULT _hr = put_SizeRepresents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IChartGroup::GetBubbleScale ( ) {
    long _result = 0;
    HRESULT _hr = get_BubbleScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutBubbleScale ( long RHS ) {
    HRESULT _hr = put_BubbleScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartGroup::GetShowNegativeBubbles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowNegativeBubbles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowNegativeBubbles(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlChartSplitType IChartGroup::GetSplitType ( ) {
    enum XlChartSplitType _result;
    HRESULT _hr = get_SplitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutSplitType ( enum XlChartSplitType RHS ) {
    HRESULT _hr = put_SplitType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IChartGroup::GetSplitValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SplitValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IChartGroup::PutSplitValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_SplitValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IChartGroup::GetSecondPlotSize ( ) {
    long _result = 0;
    HRESULT _hr = get_SecondPlotSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutSecondPlotSize ( long RHS ) {
    HRESULT _hr = put_SecondPlotSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartGroup::GetHas3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartGroup::PutHas3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartGroups wrapper method implementations
//

inline _ApplicationPtr IChartGroups::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IChartGroups::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IChartGroups::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IChartGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ChartGroupPtr IChartGroups::Item ( const _variant_t & Index ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

inline IUnknownPtr IChartGroups::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAxes wrapper method implementations
//

inline _ApplicationPtr IAxes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IAxes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IAxes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IAxes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline AxisPtr IAxes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup ) {
    struct Axis * _result = 0;
    HRESULT _hr = raw_Item(Type, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AxisPtr(_result, false);
}

inline IUnknownPtr IAxes::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPoints wrapper method implementations
//

inline _ApplicationPtr IPoints::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPoints::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPoints::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IPoints::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline PointPtr IPoints::Item ( long Index ) {
    struct Point * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PointPtr(_result, false);
}

inline IUnknownPtr IPoints::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPoint wrapper method implementations
//

inline _ApplicationPtr IPoint::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPoint::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPoint::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IPoint::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyDataLabels(Type, LegendKey, AutoText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IPoint::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IPoint::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IPoint::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline DataLabelPtr IPoint::GetDataLabel ( ) {
    struct DataLabel * _result = 0;
    HRESULT _hr = get_DataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

inline _variant_t IPoint::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IPoint::GetExplosion ( ) {
    long _result = 0;
    HRESULT _hr = get_Explosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutExplosion ( long RHS ) {
    HRESULT _hr = put_Explosion(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPoint::GetHasDataLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutHasDataLabel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr IPoint::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL IPoint::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPoint::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlColorIndex IPoint::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPoint::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlColorIndex IPoint::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPoint::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlMarkerStyle IPoint::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPoint::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum XlChartPictureType IPoint::GetPictureType ( ) {
    enum XlChartPictureType _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutPictureType ( enum XlChartPictureType RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPoint::GetPictureUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutPictureUnit ( long RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPoint::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IPoint::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutApplyPictToSides ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToSides(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPoint::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutApplyPictToFront ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToFront(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPoint::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutApplyPictToEnd ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToEnd(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPoint::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPoint::GetSecondaryPlot ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SecondaryPlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPoint::PutSecondaryPlot ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SecondaryPlot(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ChartFillFormatPtr IPoint::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

//
// interface ISeries wrapper method implementations
//

inline _ApplicationPtr ISeries::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ISeries::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ISeries::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t ISeries::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum XlAxisGroup ISeries::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutAxisGroup ( enum XlAxisGroup RHS ) {
    HRESULT _hr = put_AxisGroup(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr ISeries::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t ISeries::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISeries::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr ISeries::DataLabels ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DataLabels(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t ISeries::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISeries::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ErrorBar(Direction, Include, Type, Amount, MinusValues, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline ErrorBarsPtr ISeries::GetErrorBars ( ) {
    struct ErrorBars * _result = 0;
    HRESULT _hr = get_ErrorBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ErrorBarsPtr(_result, false);
}

inline long ISeries::GetExplosion ( ) {
    long _result = 0;
    HRESULT _hr = get_Explosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutExplosion ( long RHS ) {
    HRESULT _hr = put_Explosion(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISeries::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISeries::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISeries::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISeries::PutFormulaLocal ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISeries::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISeries::PutFormulaR1C1 ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaR1C1(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISeries::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISeries::PutFormulaR1C1Local ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaR1C1Local(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISeries::GetHasDataLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutHasDataLabels ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataLabels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISeries::GetHasErrorBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasErrorBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutHasErrorBars ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasErrorBars(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr ISeries::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr ISeries::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

inline VARIANT_BOOL ISeries::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISeries::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlColorIndex ISeries::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISeries::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlColorIndex ISeries::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISeries::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlMarkerStyle ISeries::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISeries::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISeries::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISeries::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum XlChartPictureType ISeries::GetPictureType ( ) {
    enum XlChartPictureType _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutPictureType ( enum XlChartPictureType RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISeries::GetPictureUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutPictureUnit ( long RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISeries::GetPlotOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_PlotOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutPlotOrder ( long RHS ) {
    HRESULT _hr = put_PlotOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr ISeries::Points ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Points(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t ISeries::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ISeries::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutSmooth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Smooth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr ISeries::Trendlines ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Trendlines(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long ISeries::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutType ( long RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlChartType ISeries::GetChartType ( ) {
    enum XlChartType _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutChartType ( enum XlChartType RHS ) {
    HRESULT _hr = put_ChartType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISeries::ApplyCustomType ( enum XlChartType ChartType ) {
    HRESULT _hr = raw_ApplyCustomType(ChartType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t ISeries::GetValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISeries::PutValues ( const _variant_t & RHS ) {
    HRESULT _hr = put_Values(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISeries::GetXValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_XValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISeries::PutXValues ( const _variant_t & RHS ) {
    HRESULT _hr = put_XValues(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISeries::GetBubbleSizes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BubbleSizes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISeries::PutBubbleSizes ( const _variant_t & RHS ) {
    HRESULT _hr = put_BubbleSizes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlBarShape ISeries::GetBarShape ( ) {
    enum XlBarShape _result;
    HRESULT _hr = get_BarShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutBarShape ( enum XlBarShape RHS ) {
    HRESULT _hr = put_BarShape(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISeries::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutApplyPictToSides ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToSides(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISeries::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutApplyPictToFront ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToFront(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISeries::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutApplyPictToEnd ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToEnd(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISeries::GetHas3DEffect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutHas3DEffect ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DEffect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISeries::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISeries::GetHasLeaderLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISeries::PutHasLeaderLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasLeaderLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline LeaderLinesPtr ISeries::GetLeaderLines ( ) {
    struct LeaderLines * _result = 0;
    HRESULT _hr = get_LeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LeaderLinesPtr(_result, false);
}

//
// interface ISeriesCollection wrapper method implementations
//

inline _ApplicationPtr ISeriesCollection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ISeriesCollection::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ISeriesCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline SeriesPtr ISeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace ) {
    struct Series * _result = 0;
    HRESULT _hr = raw_Add(Source, Rowcol, SeriesLabels, CategoryLabels, Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

inline long ISeriesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t ISeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Extend(Source, Rowcol, CategoryLabels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline SeriesPtr ISeriesCollection::Item ( const _variant_t & Index ) {
    struct Series * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

inline IUnknownPtr ISeriesCollection::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _variant_t ISeriesCollection::Paste ( enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace, const _variant_t & NewSeries ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(Rowcol, SeriesLabels, CategoryLabels, Replace, NewSeries, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline SeriesPtr ISeriesCollection::NewSeries ( ) {
    struct Series * _result = 0;
    HRESULT _hr = raw_NewSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

//
// interface IDataLabel wrapper method implementations
//

inline _ApplicationPtr IDataLabel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDataLabel::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDataLabel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IDataLabel::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IDataLabel::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IDataLabel::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IDataLabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline InteriorPtr IDataLabel::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr IDataLabel::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

inline _bstr_t IDataLabel::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDataLabel::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IDataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline FontPtr IDataLabel::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _variant_t IDataLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataLabel::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDataLabel::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabel::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDataLabel::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataLabel::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDataLabel::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabel::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDataLabel::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDataLabel::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDataLabel::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabel::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDataLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataLabel::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDataLabel::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabel::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDataLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataLabel::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDataLabel::GetAutoText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabel::PutAutoText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDataLabel::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDataLabel::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDataLabel::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabel::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDataLabel::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataLabel::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDataLabel::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabel::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDataLabel::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataLabel::PutType ( const _variant_t & RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlDataLabelPosition IDataLabel::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabel::PutPosition ( enum XlDataLabelPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDataLabels wrapper method implementations
//

inline _ApplicationPtr IDataLabels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDataLabels::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDataLabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IDataLabels::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IDataLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IDataLabels::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IDataLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline InteriorPtr IDataLabels::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr IDataLabels::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

inline FontPtr IDataLabels::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _variant_t IDataLabels::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataLabels::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDataLabels::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataLabels::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDataLabels::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabels::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDataLabels::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataLabels::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDataLabels::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabels::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDataLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataLabels::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDataLabels::GetAutoText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabels::PutAutoText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDataLabels::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDataLabels::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDataLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDataLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataLabels::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDataLabels::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabels::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDataLabels::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataLabels::PutType ( const _variant_t & RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlDataLabelPosition IDataLabels::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataLabels::PutPosition ( enum XlDataLabelPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDataLabels::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DataLabelPtr IDataLabels::Item ( const _variant_t & Index ) {
    struct DataLabel * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

inline IUnknownPtr IDataLabels::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ILegendEntry wrapper method implementations
//

inline _ApplicationPtr ILegendEntry::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ILegendEntry::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ILegendEntry::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t ILegendEntry::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr ILegendEntry::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline long ILegendEntry::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LegendKeyPtr ILegendEntry::GetLegendKey ( ) {
    struct LegendKey * _result = 0;
    HRESULT _hr = get_LegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendKeyPtr(_result, false);
}

inline _variant_t ILegendEntry::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILegendEntry::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILegendEntry::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILegendEntry::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ILegendEntry::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ILegendEntry::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ILegendEntry::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILegendEntries wrapper method implementations
//

inline _ApplicationPtr ILegendEntries::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ILegendEntries::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ILegendEntries::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long ILegendEntries::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LegendEntryPtr ILegendEntries::Item ( const _variant_t & Index ) {
    struct LegendEntry * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendEntryPtr(_result, false);
}

inline IUnknownPtr ILegendEntries::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ILegendKey wrapper method implementations
//

inline _ApplicationPtr ILegendKey::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ILegendKey::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ILegendKey::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline BorderPtr ILegendKey::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t ILegendKey::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ILegendKey::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline InteriorPtr ILegendKey::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr ILegendKey::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

inline VARIANT_BOOL ILegendKey::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegendKey::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ILegendKey::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegendKey::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlColorIndex ILegendKey::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ILegendKey::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegendKey::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlColorIndex ILegendKey::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ILegendKey::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegendKey::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlMarkerStyle ILegendKey::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegendKey::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ILegendKey::GetPictureType ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegendKey::PutPictureType ( long RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ILegendKey::GetPictureUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegendKey::PutPictureUnit ( long RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILegendKey::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ILegendKey::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegendKey::PutSmooth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Smooth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILegendKey::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ILegendKey::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ILegendKey::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ILegendKey::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ILegendKey::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegendKey::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITrendlines wrapper method implementations
//

inline _ApplicationPtr ITrendlines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ITrendlines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ITrendlines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline TrendlinePtr ITrendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name ) {
    struct Trendline * _result = 0;
    HRESULT _hr = raw_Add(Type, Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TrendlinePtr(_result, false);
}

inline long ITrendlines::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline TrendlinePtr ITrendlines::Item ( const _variant_t & Index ) {
    struct Trendline * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TrendlinePtr(_result, false);
}

inline IUnknownPtr ITrendlines::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ITrendline wrapper method implementations
//

inline _ApplicationPtr ITrendline::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ITrendline::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ITrendline::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long ITrendline::GetBackward ( ) {
    long _result = 0;
    HRESULT _hr = get_Backward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITrendline::PutBackward ( long RHS ) {
    HRESULT _hr = put_Backward(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr ITrendline::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t ITrendline::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline DataLabelPtr ITrendline::GetDataLabel ( ) {
    struct DataLabel * _result = 0;
    HRESULT _hr = get_DataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

inline _variant_t ITrendline::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ITrendline::GetDisplayEquation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayEquation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITrendline::PutDisplayEquation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayEquation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITrendline::GetDisplayRSquared ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayRSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITrendline::PutDisplayRSquared ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRSquared(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITrendline::GetForward ( ) {
    long _result = 0;
    HRESULT _hr = get_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITrendline::PutForward ( long RHS ) {
    HRESULT _hr = put_Forward(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITrendline::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ITrendline::GetIntercept ( ) {
    double _result = 0;
    HRESULT _hr = get_Intercept(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITrendline::PutIntercept ( double RHS ) {
    HRESULT _hr = put_Intercept(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITrendline::GetInterceptIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InterceptIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITrendline::PutInterceptIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InterceptIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITrendline::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITrendline::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITrendline::GetNameIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NameIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITrendline::PutNameIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NameIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITrendline::GetOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITrendline::PutOrder ( long RHS ) {
    HRESULT _hr = put_Order(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITrendline::GetPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_Period(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITrendline::PutPeriod ( long RHS ) {
    HRESULT _hr = put_Period(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITrendline::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum XlTrendlineType ITrendline::GetType ( ) {
    enum XlTrendlineType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITrendline::PutType ( enum XlTrendlineType RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICorners wrapper method implementations
//

inline _ApplicationPtr ICorners::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ICorners::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ICorners::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t ICorners::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t ICorners::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISeriesLines wrapper method implementations
//

inline _ApplicationPtr ISeriesLines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ISeriesLines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ISeriesLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t ISeriesLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t ISeriesLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr ISeriesLines::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t ISeriesLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IHiLoLines wrapper method implementations
//

inline _ApplicationPtr IHiLoLines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IHiLoLines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IHiLoLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IHiLoLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IHiLoLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IHiLoLines::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IHiLoLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IGridlines wrapper method implementations
//

inline _ApplicationPtr IGridlines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IGridlines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IGridlines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IGridlines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IGridlines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IGridlines::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IGridlines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IDropLines wrapper method implementations
//

inline _ApplicationPtr IDropLines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDropLines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDropLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IDropLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IDropLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IDropLines::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IDropLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ILeaderLines wrapper method implementations
//

inline _ApplicationPtr ILeaderLines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ILeaderLines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ILeaderLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline BorderPtr ILeaderLines::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline HRESULT ILeaderLines::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ILeaderLines::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IUpBars wrapper method implementations
//

inline _ApplicationPtr IUpBars::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IUpBars::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IUpBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IUpBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IUpBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IUpBars::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IUpBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline InteriorPtr IUpBars::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr IUpBars::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

//
// interface IDownBars wrapper method implementations
//

inline _ApplicationPtr IDownBars::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDownBars::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDownBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IDownBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IDownBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IDownBars::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IDownBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline InteriorPtr IDownBars::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr IDownBars::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

//
// interface IFloor wrapper method implementations
//

inline _ApplicationPtr IFloor::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IFloor::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IFloor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IFloor::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IFloor::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IFloor::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IFloor::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline InteriorPtr IFloor::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr IFloor::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

inline _variant_t IFloor::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IFloor::PutPictureType ( const _variant_t & RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IFloor::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWalls wrapper method implementations
//

inline _ApplicationPtr IWalls::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IWalls::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IWalls::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IWalls::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IWalls::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IWalls::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IWalls::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline InteriorPtr IWalls::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr IWalls::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

inline _variant_t IWalls::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IWalls::PutPictureType ( const _variant_t & RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IWalls::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IWalls::GetPictureUnit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IWalls::PutPictureUnit ( const _variant_t & RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITickLabels wrapper method implementations
//

inline _ApplicationPtr ITickLabels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ITickLabels::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ITickLabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t ITickLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr ITickLabels::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t ITickLabels::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ITickLabels::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITickLabels::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITickLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITickLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITickLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ITickLabels::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlTickLabelOrientation ITickLabels::GetOrientation ( ) {
    enum XlTickLabelOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITickLabels::PutOrientation ( enum XlTickLabelOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITickLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long ITickLabels::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITickLabels::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ITickLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ITickLabels::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITickLabels::GetDepth ( ) {
    long _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ITickLabels::GetOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITickLabels::PutOffset ( long RHS ) {
    HRESULT _hr = put_Offset(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITickLabels::GetAlignment ( ) {
    long _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITickLabels::PutAlignment ( long RHS ) {
    HRESULT _hr = put_Alignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPlotArea wrapper method implementations
//

inline _ApplicationPtr IPlotArea::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPlotArea::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPlotArea::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IPlotArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IPlotArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IPlotArea::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IPlotArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IPlotArea::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPlotArea::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr IPlotArea::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr IPlotArea::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

inline double IPlotArea::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPlotArea::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPlotArea::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPlotArea::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPlotArea::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPlotArea::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPlotArea::GetInsideLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IPlotArea::GetInsideTop ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IPlotArea::GetInsideWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IPlotArea::GetInsideHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IChartArea wrapper method implementations
//

inline _ApplicationPtr IChartArea::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IChartArea::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IChartArea::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IChartArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IChartArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IChartArea::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IChartArea::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IChartArea::ClearContents ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearContents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IChartArea::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr IChartArea::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline VARIANT_BOOL IChartArea::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartArea::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IChartArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IChartArea::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartArea::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr IChartArea::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr IChartArea::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

inline double IChartArea::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartArea::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IChartArea::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartArea::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IChartArea::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartArea::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IChartArea::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IChartArea::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILegend wrapper method implementations
//

inline _ApplicationPtr ILegend::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ILegend::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ILegend::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t ILegend::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t ILegend::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr ILegend::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t ILegend::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FontPtr ILegend::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline IDispatchPtr ILegend::LegendEntries ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_LegendEntries(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum XlLegendPosition ILegend::GetPosition ( ) {
    enum XlLegendPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegend::PutPosition ( enum XlLegendPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ILegend::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegend::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILegend::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ILegend::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegend::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline InteriorPtr ILegend::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr ILegend::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

inline double ILegend::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegend::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILegend::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegend::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ILegend::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILegend::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ILegend::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ILegend::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IErrorBars wrapper method implementations
//

inline _ApplicationPtr IErrorBars::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IErrorBars::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IErrorBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IErrorBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IErrorBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IErrorBars::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IErrorBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IErrorBars::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum XlEndStyleCap IErrorBars::GetEndStyle ( ) {
    enum XlEndStyleCap _result;
    HRESULT _hr = get_EndStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IErrorBars::PutEndStyle ( enum XlEndStyleCap RHS ) {
    HRESULT _hr = put_EndStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDataTable wrapper method implementations
//

inline _ApplicationPtr IDataTable::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDataTable::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDataTable::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IDataTable::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataTable::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDataTable::GetHasBorderHorizontal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataTable::PutHasBorderHorizontal ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasBorderHorizontal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDataTable::GetHasBorderVertical ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataTable::PutHasBorderVertical ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasBorderVertical(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDataTable::GetHasBorderOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataTable::PutHasBorderOutline ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasBorderOutline(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IDataTable::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline FontPtr IDataTable::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline HRESULT IDataTable::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDataTable::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IDataTable::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDataTable::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPhonetic wrapper method implementations
//

inline _ApplicationPtr IPhonetic::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPhonetic::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPhonetic::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IPhonetic::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPhonetic::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPhonetic::GetCharacterType ( ) {
    long _result = 0;
    HRESULT _hr = get_CharacterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPhonetic::PutCharacterType ( long RHS ) {
    HRESULT _hr = put_CharacterType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPhonetic::GetAlignment ( ) {
    long _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPhonetic::PutAlignment ( long RHS ) {
    HRESULT _hr = put_Alignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline FontPtr IPhonetic::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _bstr_t IPhonetic::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPhonetic::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IShape wrapper method implementations
//

inline _ApplicationPtr IShape::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IShape::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IShape::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IShape::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapePtr IShape::Duplicate ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline HRESULT IShape::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShape::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShape::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShape::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShape::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShape::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShape::Select ( const _variant_t & Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShape::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapeRangePtr IShape::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline HRESULT IShape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline AdjustmentsPtr IShape::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

inline TextFramePtr IShape::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

inline enum Office::MsoAutoShapeType IShape::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShape::PutAutoShapeType ( enum Office::MsoAutoShapeType RHS ) {
    HRESULT _hr = put_AutoShapeType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CalloutFormatPtr IShape::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

inline long IShape::GetConnectionSiteCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState IShape::GetConnector ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ConnectorFormatPtr IShape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

inline FillFormatPtr IShape::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

inline GroupShapesPtr IShape::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

inline float IShape::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShape::PutHeight ( float RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState IShape::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IShape::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShape::PutLeft ( float RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline LineFormatPtr IShape::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

inline enum Office::MsoTriState IShape::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShape::PutLockAspectRatio ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_LockAspectRatio(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IShape::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IShape::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapeNodesPtr IShape::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

inline float IShape::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShape::PutRotation ( float RHS ) {
    HRESULT _hr = put_Rotation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PictureFormatPtr IShape::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

inline ShadowFormatPtr IShape::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

inline TextEffectFormatPtr IShape::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

inline ThreeDFormatPtr IShape::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

inline float IShape::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShape::PutTop ( float RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoShapeType IShape::GetType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState IShape::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IShape::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum Office::MsoTriState IShape::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShape::PutVisible ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IShape::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShape::PutWidth ( float RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IShape::GetZOrderPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HyperlinkPtr IShape::GetHyperlink ( ) {
    struct Hyperlink * _result = 0;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

inline enum Office::MsoBlackWhiteMode IShape::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode RHS ) {
    HRESULT _hr = put_BlackWhiteMode(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IShape::GetDrawingObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_DrawingObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IShape::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IShape::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IShape::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShape::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IShape::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline RangePtr IShape::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline enum XlPlacement IShape::GetPlacement ( ) {
    enum XlPlacement _result;
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShape::PutPlacement ( enum XlPlacement RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IShape::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShape::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShape::CopyPicture ( const _variant_t & Appearance, const _variant_t & Format ) {
    HRESULT _hr = raw_CopyPicture(Appearance, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ControlFormatPtr IShape::GetControlFormat ( ) {
    struct ControlFormat * _result = 0;
    HRESULT _hr = get_ControlFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ControlFormatPtr(_result, false);
}

inline LinkFormatPtr IShape::GetLinkFormat ( ) {
    struct LinkFormat * _result = 0;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

inline OLEFormatPtr IShape::GetOLEFormat ( ) {
    struct OLEFormat * _result = 0;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

inline enum XlFormControl IShape::GetFormControlType ( ) {
    enum XlFormControl _result;
    HRESULT _hr = get_FormControlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IShape::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IShape::PutAlternativeText ( _bstr_t RHS ) {
    HRESULT _hr = put_AlternativeText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::ScriptPtr IShape::GetScript ( ) {
    struct Office::Script * _result = 0;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptPtr(_result, false);
}

//
// interface IShapes wrapper method implementations
//

inline _ApplicationPtr IShapes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IShapes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IShapes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr IShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IShapes::_Default ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline IUnknownPtr IShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline ShapePtr IShapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IShapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IShapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IShapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IShapes::AddPicture ( _bstr_t Filename, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPicture(Filename, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IShapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IShapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IShapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline FreeformBuilderPtr IShapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

inline ShapeRangePtr IShapes::GetRange ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline HRESULT IShapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapePtr IShapes::AddFormControl ( enum XlFormControl Type, long Left, long Top, long Width, long Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddFormControl(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IShapes::AddOLEObject ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddOLEObject(ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface IShapeRange wrapper method implementations
//

inline _ApplicationPtr IShapeRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IShapeRange::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IShapeRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IShapeRange::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr IShapeRange::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IShapeRange::_Default ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline IUnknownPtr IShapeRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Align(AlignCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShapeRange::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShapeRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Distribute(DistributeCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapeRangePtr IShapeRange::Duplicate ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline HRESULT IShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShapeRange::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShapeRange::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShapeRange::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapePtr IShapeRange::Group ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline HRESULT IShapeRange::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShapeRange::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapePtr IShapeRange::Regroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Regroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline HRESULT IShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShapeRange::Select ( const _variant_t & Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShapeRange::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapeRangePtr IShapeRange::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline HRESULT IShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline AdjustmentsPtr IShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

inline TextFramePtr IShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

inline enum Office::MsoAutoShapeType IShapeRange::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType RHS ) {
    HRESULT _hr = put_AutoShapeType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CalloutFormatPtr IShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

inline long IShapeRange::GetConnectionSiteCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState IShapeRange::GetConnector ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ConnectorFormatPtr IShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

inline FillFormatPtr IShapeRange::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

inline GroupShapesPtr IShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

inline float IShapeRange::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShapeRange::PutHeight ( float RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState IShapeRange::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IShapeRange::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShapeRange::PutLeft ( float RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline LineFormatPtr IShapeRange::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

inline enum Office::MsoTriState IShapeRange::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShapeRange::PutLockAspectRatio ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_LockAspectRatio(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IShapeRange::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IShapeRange::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapeNodesPtr IShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

inline float IShapeRange::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShapeRange::PutRotation ( float RHS ) {
    HRESULT _hr = put_Rotation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PictureFormatPtr IShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

inline ShadowFormatPtr IShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

inline TextEffectFormatPtr IShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

inline ThreeDFormatPtr IShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

inline float IShapeRange::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShapeRange::PutTop ( float RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoShapeType IShapeRange::GetType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState IShapeRange::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IShapeRange::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum Office::MsoTriState IShapeRange::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShapeRange::PutVisible ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IShapeRange::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShapeRange::PutWidth ( float RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IShapeRange::GetZOrderPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoBlackWhiteMode IShapeRange::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode RHS ) {
    HRESULT _hr = put_BlackWhiteMode(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IShapeRange::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IShapeRange::PutAlternativeText ( _bstr_t RHS ) {
    HRESULT _hr = put_AlternativeText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGroupShapes wrapper method implementations
//

inline _ApplicationPtr IGroupShapes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IGroupShapes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IGroupShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IGroupShapes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr IGroupShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr IGroupShapes::_Default ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline IUnknownPtr IGroupShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ITextFrame wrapper method implementations
//

inline _ApplicationPtr ITextFrame::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ITextFrame::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ITextFrame::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline float ITextFrame::GetMarginBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextFrame::PutMarginBottom ( float RHS ) {
    HRESULT _hr = put_MarginBottom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float ITextFrame::GetMarginLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextFrame::PutMarginLeft ( float RHS ) {
    HRESULT _hr = put_MarginLeft(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float ITextFrame::GetMarginRight ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextFrame::PutMarginRight ( float RHS ) {
    HRESULT _hr = put_MarginRight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float ITextFrame::GetMarginTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextFrame::PutMarginTop ( float RHS ) {
    HRESULT _hr = put_MarginTop(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTextOrientation ITextFrame::GetOrientation ( ) {
    enum Office::MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextFrame::PutOrientation ( enum Office::MsoTextOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr ITextFrame::Characters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = raw_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline enum XlHAlign ITextFrame::GetHorizontalAlignment ( ) {
    enum XlHAlign _result;
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextFrame::PutHorizontalAlignment ( enum XlHAlign RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlVAlign ITextFrame::GetVerticalAlignment ( ) {
    enum XlVAlign _result;
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextFrame::PutVerticalAlignment ( enum XlVAlign RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextFrame::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextFrame::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITextFrame::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextFrame::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ITextFrame::GetAutoMargins ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITextFrame::PutAutoMargins ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoMargins(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IConnectorFormat wrapper method implementations
//

inline _ApplicationPtr IConnectorFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IConnectorFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IConnectorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, long ConnectionSite ) {
    HRESULT _hr = raw_BeginConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConnectorFormat::BeginDisconnect ( ) {
    HRESULT _hr = raw_BeginDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConnectorFormat::EndConnect ( struct Shape * ConnectedShape, long ConnectionSite ) {
    HRESULT _hr = raw_EndConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConnectorFormat::EndDisconnect ( ) {
    HRESULT _hr = raw_EndDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoTriState IConnectorFormat::GetBeginConnected ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_BeginConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr IConnectorFormat::GetBeginConnectedShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_BeginConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline long IConnectorFormat::GetBeginConnectionSite ( ) {
    long _result = 0;
    HRESULT _hr = get_BeginConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState IConnectorFormat::GetEndConnected ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_EndConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr IConnectorFormat::GetEndConnectedShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_EndConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline long IConnectorFormat::GetEndConnectionSite ( ) {
    long _result = 0;
    HRESULT _hr = get_EndConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoConnectorType IConnectorFormat::GetType ( ) {
    enum Office::MsoConnectorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IConnectorFormat::PutType ( enum Office::MsoConnectorType RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFreeformBuilder wrapper method implementations
//

inline _ApplicationPtr IFreeformBuilder::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IFreeformBuilder::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IFreeformBuilder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IFreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, const _variant_t & X2, const _variant_t & Y2, const _variant_t & X3, const _variant_t & Y3 ) {
    HRESULT _hr = raw_AddNodes(SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapePtr IFreeformBuilder::ConvertToShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_ConvertToShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface IControlFormat wrapper method implementations
//

inline _ApplicationPtr IControlFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IControlFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IControlFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IControlFormat::AddItem ( _bstr_t Text, const _variant_t & Index ) {
    HRESULT _hr = raw_AddItem(Text, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IControlFormat::RemoveAllItems ( ) {
    HRESULT _hr = raw_RemoveAllItems();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IControlFormat::RemoveItem ( long Index, const _variant_t & Count ) {
    HRESULT _hr = raw_RemoveItem(Index, Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IControlFormat::GetDropDownLines ( ) {
    long _result = 0;
    HRESULT _hr = get_DropDownLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::PutDropDownLines ( long RHS ) {
    HRESULT _hr = put_DropDownLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IControlFormat::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IControlFormat::GetLargeChange ( ) {
    long _result = 0;
    HRESULT _hr = get_LargeChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::PutLargeChange ( long RHS ) {
    HRESULT _hr = put_LargeChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IControlFormat::GetLinkedCell ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IControlFormat::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IControlFormat::List ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IControlFormat::GetListCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::PutListCount ( long RHS ) {
    HRESULT _hr = put_ListCount(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IControlFormat::GetListFillRange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IControlFormat::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IControlFormat::GetListIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::PutListIndex ( long RHS ) {
    HRESULT _hr = put_ListIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IControlFormat::GetLockedText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IControlFormat::GetMax ( ) {
    long _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::PutMax ( long RHS ) {
    HRESULT _hr = put_Max(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IControlFormat::GetMin ( ) {
    long _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::PutMin ( long RHS ) {
    HRESULT _hr = put_Min(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IControlFormat::GetMultiSelect ( ) {
    long _result = 0;
    HRESULT _hr = get_MultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::PutMultiSelect ( long RHS ) {
    HRESULT _hr = put_MultiSelect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IControlFormat::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IControlFormat::GetSmallChange ( ) {
    long _result = 0;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::PutSmallChange ( long RHS ) {
    HRESULT _hr = put_SmallChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IControlFormat::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IControlFormat::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IControlFormat::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IOLEFormat wrapper method implementations
//

inline _ApplicationPtr IOLEFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IOLEFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IOLEFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IOLEFormat::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IOLEFormat::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IOLEFormat::GetProgId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IOLEFormat::Verb ( const _variant_t & Verb ) {
    HRESULT _hr = raw_Verb(Verb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ILinkFormat wrapper method implementations
//

inline _ApplicationPtr ILinkFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ILinkFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ILinkFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL ILinkFormat::GetAutoUpdate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILinkFormat::PutAutoUpdate ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoUpdate(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ILinkFormat::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILinkFormat::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ILinkFormat::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PublishObject wrapper method implementations
//

inline _ApplicationPtr PublishObject::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator PublishObject::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr PublishObject::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT PublishObject::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT PublishObject::Publish ( const _variant_t & Create ) {
    HRESULT _hr = raw_Publish(Create);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t PublishObject::GetDivID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DivID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t PublishObject::GetSheet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Sheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum XlSourceType PublishObject::GetSourceType ( ) {
    enum XlSourceType _result;
    HRESULT _hr = get_SourceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t PublishObject::GetSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Source(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum XlHtmlType PublishObject::GetHtmlType ( ) {
    enum XlHtmlType _result;
    HRESULT _hr = get_HtmlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void PublishObject::PutHtmlType ( enum XlHtmlType RHS ) {
    HRESULT _hr = put_HtmlType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t PublishObject::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void PublishObject::PutTitle ( _bstr_t RHS ) {
    HRESULT _hr = put_Title(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t PublishObject::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void PublishObject::PutFilename ( _bstr_t RHS ) {
    HRESULT _hr = put_Filename(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPublishObjects wrapper method implementations
//

inline _ApplicationPtr IPublishObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPublishObjects::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPublishObjects::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline PublishObjectPtr IPublishObjects::Add ( enum XlSourceType SourceType, _bstr_t Filename, const _variant_t & Sheet, const _variant_t & Source, const _variant_t & HtmlType, const _variant_t & DivID, const _variant_t & Title ) {
    struct PublishObject * _result = 0;
    HRESULT _hr = raw_Add(SourceType, Filename, Sheet, Source, HtmlType, DivID, Title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectPtr(_result, false);
}

inline long IPublishObjects::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline PublishObjectPtr IPublishObjects::GetItem ( const _variant_t & Index ) {
    struct PublishObject * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectPtr(_result, false);
}

inline PublishObjectPtr IPublishObjects::Get_Default ( const _variant_t & Index ) {
    struct PublishObject * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectPtr(_result, false);
}

inline IUnknownPtr IPublishObjects::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IPublishObjects::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPublishObjects::Publish ( ) {
    HRESULT _hr = raw_Publish();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IOLEDBError wrapper method implementations
//

inline _ApplicationPtr IOLEDBError::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IOLEDBError::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IOLEDBError::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IOLEDBError::GetSqlState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SqlState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOLEDBError::GetErrorString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ErrorString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IOLEDBError::GetNative ( ) {
    long _result = 0;
    HRESULT _hr = get_Native(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IOLEDBError::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IOLEDBError::GetStage ( ) {
    long _result = 0;
    HRESULT _hr = get_Stage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IOLEDBErrors wrapper method implementations
//

inline _ApplicationPtr IOLEDBErrors::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IOLEDBErrors::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IOLEDBErrors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IOLEDBErrors::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline OLEDBErrorPtr IOLEDBErrors::Item ( long Index ) {
    struct OLEDBError * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEDBErrorPtr(_result, false);
}

inline OLEDBErrorPtr IOLEDBErrors::Get_Default ( long Index ) {
    struct OLEDBError * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEDBErrorPtr(_result, false);
}

inline IUnknownPtr IOLEDBErrors::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPhonetics wrapper method implementations
//

inline _ApplicationPtr IPhonetics::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPhonetics::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPhonetics::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IPhonetics::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPhonetics::GetStart ( ) {
    long _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPhonetics::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPhonetics::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPhonetics::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPhonetics::GetCharacterType ( ) {
    long _result = 0;
    HRESULT _hr = get_CharacterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPhonetics::PutCharacterType ( long RHS ) {
    HRESULT _hr = put_CharacterType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPhonetics::GetAlignment ( ) {
    long _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPhonetics::PutAlignment ( long RHS ) {
    HRESULT _hr = put_Alignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline FontPtr IPhonetics::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline IDispatchPtr IPhonetics::GetItem ( long Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IPhonetics::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPhonetics::Add ( long Start, long Length, _bstr_t Text ) {
    HRESULT _hr = raw_Add(Start, Length, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPhonetics::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPhonetics::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IPhonetics::Get_Default ( long Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IPhonetics::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface DefaultWebOptions wrapper method implementations
//

inline _ApplicationPtr DefaultWebOptions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator DefaultWebOptions::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr DefaultWebOptions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL DefaultWebOptions::GetRelyOnCSS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RelyOnCSS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutRelyOnCSS ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RelyOnCSS(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL DefaultWebOptions::GetSaveHiddenData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveHiddenData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutSaveHiddenData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SaveHiddenData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL DefaultWebOptions::GetLoadPictures ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LoadPictures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutLoadPictures ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LoadPictures(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL DefaultWebOptions::GetOrganizeInFolder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutOrganizeInFolder ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_OrganizeInFolder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL DefaultWebOptions::GetUpdateLinksOnSave ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpdateLinksOnSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutUpdateLinksOnSave ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UpdateLinksOnSave(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL DefaultWebOptions::GetUseLongFileNames ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutUseLongFileNames ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UseLongFileNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckIfOfficeIsHTMLEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CheckIfOfficeIsHTMLEditor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL DefaultWebOptions::GetDownloadComponents ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DownloadComponents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutDownloadComponents ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DownloadComponents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL DefaultWebOptions::GetRelyOnVML ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutRelyOnVML ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RelyOnVML(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL DefaultWebOptions::GetAllowPNG ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutAllowPNG ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AllowPNG(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoScreenSize DefaultWebOptions::GetScreenSize ( ) {
    enum Office::MsoScreenSize _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutScreenSize ( enum Office::MsoScreenSize RHS ) {
    HRESULT _hr = put_ScreenSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long DefaultWebOptions::GetPixelsPerInch ( ) {
    long _result = 0;
    HRESULT _hr = get_PixelsPerInch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutPixelsPerInch ( long RHS ) {
    HRESULT _hr = put_PixelsPerInch(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t DefaultWebOptions::GetLocationOfComponents ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocationOfComponents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void DefaultWebOptions::PutLocationOfComponents ( _bstr_t RHS ) {
    HRESULT _hr = put_LocationOfComponents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoEncoding DefaultWebOptions::GetEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutEncoding ( enum Office::MsoEncoding RHS ) {
    HRESULT _hr = put_Encoding(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlwaysSaveInDefaultEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AlwaysSaveInDefaultEncoding(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::WebPageFontsPtr DefaultWebOptions::GetFonts ( ) {
    struct Office::WebPageFonts * _result = 0;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::WebPageFontsPtr(_result, false);
}

inline _bstr_t DefaultWebOptions::GetFolderSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface WebOptions wrapper method implementations
//

inline _ApplicationPtr WebOptions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator WebOptions::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr WebOptions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL WebOptions::GetRelyOnCSS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RelyOnCSS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void WebOptions::PutRelyOnCSS ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RelyOnCSS(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL WebOptions::GetOrganizeInFolder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void WebOptions::PutOrganizeInFolder ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_OrganizeInFolder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL WebOptions::GetUseLongFileNames ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void WebOptions::PutUseLongFileNames ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UseLongFileNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL WebOptions::GetDownloadComponents ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DownloadComponents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void WebOptions::PutDownloadComponents ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DownloadComponents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL WebOptions::GetRelyOnVML ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void WebOptions::PutRelyOnVML ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RelyOnVML(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL WebOptions::GetAllowPNG ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void WebOptions::PutAllowPNG ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AllowPNG(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoScreenSize WebOptions::GetScreenSize ( ) {
    enum Office::MsoScreenSize _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void WebOptions::PutScreenSize ( enum Office::MsoScreenSize RHS ) {
    HRESULT _hr = put_ScreenSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long WebOptions::GetPixelsPerInch ( ) {
    long _result = 0;
    HRESULT _hr = get_PixelsPerInch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void WebOptions::PutPixelsPerInch ( long RHS ) {
    HRESULT _hr = put_PixelsPerInch(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t WebOptions::GetLocationOfComponents ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocationOfComponents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void WebOptions::PutLocationOfComponents ( _bstr_t RHS ) {
    HRESULT _hr = put_LocationOfComponents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoEncoding WebOptions::GetEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void WebOptions::PutEncoding ( enum Office::MsoEncoding RHS ) {
    HRESULT _hr = put_Encoding(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t WebOptions::GetFolderSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT WebOptions::UseDefaultFolderSuffix ( ) {
    HRESULT _hr = raw_UseDefaultFolderSuffix();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TreeviewControl wrapper method implementations
//

inline _ApplicationPtr TreeviewControl::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator TreeviewControl::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr TreeviewControl::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t TreeviewControl::GetHidden ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void TreeviewControl::PutHidden ( const _variant_t & RHS ) {
    HRESULT _hr = put_Hidden(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t TreeviewControl::GetDrilled ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Drilled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void TreeviewControl::PutDrilled ( const _variant_t & RHS ) {
    HRESULT _hr = put_Drilled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CubeField wrapper method implementations
//

inline _ApplicationPtr CubeField::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator CubeField::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr CubeField::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum XlCubeFieldType CubeField::GetCubeFieldType ( ) {
    enum XlCubeFieldType _result;
    HRESULT _hr = get_CubeFieldType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t CubeField::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t CubeField::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t CubeField::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum XlPivotFieldOrientation CubeField::GetOrientation ( ) {
    enum XlPivotFieldOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CubeField::PutOrientation ( enum XlPivotFieldOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long CubeField::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CubeField::PutPosition ( long RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TreeviewControlPtr CubeField::GetTreeviewControl ( ) {
    struct TreeviewControl * _result = 0;
    HRESULT _hr = get_TreeviewControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TreeviewControlPtr(_result, false);
}

inline VARIANT_BOOL CubeField::GetDragToColumn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragToColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CubeField::PutDragToColumn ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL CubeField::GetDragToHide ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragToHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CubeField::PutDragToHide ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToHide(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL CubeField::GetDragToPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragToPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CubeField::PutDragToPage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToPage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL CubeField::GetDragToRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragToRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CubeField::PutDragToRow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL CubeField::GetDragToData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragToData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CubeField::PutDragToData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long CubeField::GetHiddenLevels ( ) {
    long _result = 0;
    HRESULT _hr = get_HiddenLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CubeField::PutHiddenLevels ( long RHS ) {
    HRESULT _hr = put_HiddenLevels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPivotField wrapper method implementations
//

inline _ApplicationPtr IPivotField::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPivotField::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPivotField::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum XlPivotFieldCalculation IPivotField::GetCalculation ( ) {
    enum XlPivotFieldCalculation _result;
    HRESULT _hr = get_Calculation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutCalculation ( enum XlPivotFieldCalculation RHS ) {
    HRESULT _hr = put_Calculation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PivotFieldPtr IPivotField::GetChildField ( ) {
    struct PivotField * _result = 0;
    HRESULT _hr = get_ChildField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

inline _variant_t IPivotField::GetChildItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChildItems(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IPivotField::GetCurrentPage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPivotField::PutCurrentPage ( const _variant_t & RHS ) {
    HRESULT _hr = put_CurrentPage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IPivotField::GetDataRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_DataRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline enum XlPivotFieldDataType IPivotField::GetDataType ( ) {
    enum XlPivotFieldDataType _result;
    HRESULT _hr = get_DataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPivotField::Get_Default ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotField::Put_Default ( _bstr_t RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlConsolidationFunction IPivotField::GetFunction ( ) {
    enum XlConsolidationFunction _result;
    HRESULT _hr = get_Function(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutFunction ( enum XlConsolidationFunction RHS ) {
    HRESULT _hr = put_Function(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPivotField::GetGroupLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_GroupLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IPivotField::GetHiddenItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HiddenItems(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IPivotField::GetLabelRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_LabelRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _bstr_t IPivotField::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotField::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotField::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotField::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlPivotFieldOrientation IPivotField::GetOrientation ( ) {
    enum XlPivotFieldOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutOrientation ( enum XlPivotFieldOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotField::GetShowAllItems ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAllItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutShowAllItems ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowAllItems(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PivotFieldPtr IPivotField::GetParentField ( ) {
    struct PivotField * _result = 0;
    HRESULT _hr = get_ParentField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

inline _variant_t IPivotField::GetParentItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ParentItems(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IPivotField::PivotItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PivotItems(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IPivotField::GetPosition ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPivotField::PutPosition ( const _variant_t & RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotField::GetSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IPivotField::GetSubtotals ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Subtotals(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPivotField::PutSubtotals ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_Subtotals(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPivotField::GetBaseField ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BaseField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPivotField::PutBaseField ( const _variant_t & RHS ) {
    HRESULT _hr = put_BaseField(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPivotField::GetBaseItem ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BaseItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPivotField::PutBaseItem ( const _variant_t & RHS ) {
    HRESULT _hr = put_BaseItem(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPivotField::GetTotalLevels ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TotalLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IPivotField::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotField::PutValue ( _bstr_t RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPivotField::GetVisibleItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VisibleItems(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline CalculatedItemsPtr IPivotField::CalculatedItems ( ) {
    struct CalculatedItems * _result = 0;
    HRESULT _hr = raw_CalculatedItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalculatedItemsPtr(_result, false);
}

inline HRESULT IPivotField::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPivotField::GetDragToColumn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragToColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutDragToColumn ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotField::GetDragToHide ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragToHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutDragToHide ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToHide(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotField::GetDragToPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragToPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutDragToPage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToPage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotField::GetDragToRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragToRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutDragToRow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotField::GetDragToData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragToData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutDragToData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotField::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotField::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotField::GetIsCalculated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCalculated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPivotField::GetMemoryUsed ( ) {
    long _result = 0;
    HRESULT _hr = get_MemoryUsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPivotField::GetServerBased ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ServerBased(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutServerBased ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ServerBased(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPivotField::AutoSort ( long Order, _bstr_t Field ) {
    HRESULT _hr = raw_AutoSort(Order, Field);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPivotField::AutoShow ( long Type, long Range, long Count, _bstr_t Field ) {
    HRESULT _hr = raw_AutoShow(Type, Range, Count, Field);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPivotField::GetAutoSortOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_AutoSortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPivotField::GetAutoSortField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AutoSortField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IPivotField::GetAutoShowType ( ) {
    long _result = 0;
    HRESULT _hr = get_AutoShowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPivotField::GetAutoShowRange ( ) {
    long _result = 0;
    HRESULT _hr = get_AutoShowRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPivotField::GetAutoShowCount ( ) {
    long _result = 0;
    HRESULT _hr = get_AutoShowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPivotField::GetAutoShowField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AutoShowField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IPivotField::GetLayoutBlankLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LayoutBlankLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutLayoutBlankLine ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LayoutBlankLine(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum xLSubtototalLocationType IPivotField::GetLayoutSubtotalLocation ( ) {
    enum xLSubtototalLocationType _result;
    HRESULT _hr = get_LayoutSubtotalLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutLayoutSubtotalLocation ( enum xLSubtototalLocationType RHS ) {
    HRESULT _hr = put_LayoutSubtotalLocation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotField::GetLayoutPageBreak ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LayoutPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutLayoutPageBreak ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LayoutPageBreak(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlLayoutFormType IPivotField::GetLayoutForm ( ) {
    enum XlLayoutFormType _result;
    HRESULT _hr = get_LayoutForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutLayoutForm ( enum XlLayoutFormType RHS ) {
    HRESULT _hr = put_LayoutForm(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotField::GetSubtotalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubtotalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotField::PutSubtotalName ( _bstr_t RHS ) {
    HRESULT _hr = put_SubtotalName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotField::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotField::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotField::GetDrilledDown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrilledDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotField::PutDrilledDown ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DrilledDown(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CubeFieldPtr IPivotField::GetCubeField ( ) {
    struct CubeField * _result = 0;
    HRESULT _hr = get_CubeField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CubeFieldPtr(_result, false);
}

inline _bstr_t IPivotField::GetCurrentPageName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentPageName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotField::PutCurrentPageName ( _bstr_t RHS ) {
    HRESULT _hr = put_CurrentPageName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CubeFields wrapper method implementations
//

inline _ApplicationPtr CubeFields::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator CubeFields::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr CubeFields::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long CubeFields::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline CubeFieldPtr CubeFields::GetItem ( const _variant_t & Index ) {
    struct CubeField * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CubeFieldPtr(_result, false);
}

inline CubeFieldPtr CubeFields::Get_Default ( const _variant_t & Index ) {
    struct CubeField * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CubeFieldPtr(_result, false);
}

inline IUnknownPtr CubeFields::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPivotTable wrapper method implementations
//

inline _ApplicationPtr IPivotTable::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPivotTable::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPivotTable::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IPivotTable::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AddToTable ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddFields(RowFields, ColumnFields, PageFields, AddToTable, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IPivotTable::GetColumnFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ColumnFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IPivotTable::GetColumnGrand ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColumnGrand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutColumnGrand ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ColumnGrand(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IPivotTable::GetColumnRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_ColumnRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IPivotTable::ShowPages ( const _variant_t & PageField ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ShowPages(PageField, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IPivotTable::GetDataBodyRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_DataBodyRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline IDispatchPtr IPivotTable::GetDataFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_DataFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IPivotTable::GetDataLabelRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_DataLabelRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _bstr_t IPivotTable::Get_Default ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotTable::Put_Default ( _bstr_t RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotTable::GetHasAutoFormat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasAutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutHasAutoFormat ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasAutoFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IPivotTable::GetHiddenFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_HiddenFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IPivotTable::GetInnerDetail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InnerDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotTable::PutInnerDetail ( _bstr_t RHS ) {
    HRESULT _hr = put_InnerDetail(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotTable::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotTable::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IPivotTable::GetPageFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_PageFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IPivotTable::GetPageRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_PageRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline RangePtr IPivotTable::GetPageRangeCells ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_PageRangeCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline IDispatchPtr IPivotTable::PivotFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_PivotFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline DATE IPivotTable::GetRefreshDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_RefreshDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPivotTable::GetRefreshName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefreshName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IPivotTable::RefreshTable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RefreshTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPivotTable::GetRowFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_RowFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IPivotTable::GetRowGrand ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RowGrand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutRowGrand ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RowGrand(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IPivotTable::GetRowRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_RowRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IPivotTable::GetSaveData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutSaveData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SaveData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IPivotTable::GetSourceData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SourceData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IPivotTable::PutSourceData ( const _variant_t & RHS ) {
    HRESULT _hr = put_SourceData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IPivotTable::GetTableRange1 ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TableRange1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline RangePtr IPivotTable::GetTableRange2 ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TableRange2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _bstr_t IPivotTable::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotTable::PutValue ( _bstr_t RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IPivotTable::GetVisibleFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_VisibleFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IPivotTable::GetCacheIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_CacheIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutCacheIndex ( long RHS ) {
    HRESULT _hr = put_CacheIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CalculatedFieldsPtr IPivotTable::CalculatedFields ( ) {
    struct CalculatedFields * _result = 0;
    HRESULT _hr = raw_CalculatedFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalculatedFieldsPtr(_result, false);
}

inline VARIANT_BOOL IPivotTable::GetDisplayErrorString ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayErrorString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutDisplayErrorString ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayErrorString(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotTable::GetDisplayNullString ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayNullString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutDisplayNullString ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayNullString(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotTable::GetEnableDrilldown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDrilldown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutEnableDrilldown ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableDrilldown(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotTable::GetEnableFieldDialog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableFieldDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutEnableFieldDialog ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableFieldDialog(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotTable::GetEnableWizard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutEnableWizard ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableWizard(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotTable::GetErrorString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ErrorString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotTable::PutErrorString ( _bstr_t RHS ) {
    HRESULT _hr = put_ErrorString(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPivotTable::GetData ( _bstr_t Name ) {
    double _result = 0;
    HRESULT _hr = raw_GetData(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPivotTable::ListFormulas ( ) {
    HRESULT _hr = raw_ListFormulas();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPivotTable::GetManualUpdate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ManualUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutManualUpdate ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ManualUpdate(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotTable::GetMergeLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MergeLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutMergeLabels ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MergeLabels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotTable::GetNullString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NullString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotTable::PutNullString ( _bstr_t RHS ) {
    HRESULT _hr = put_NullString(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PivotCachePtr IPivotTable::PivotCache ( ) {
    struct PivotCache * _result = 0;
    HRESULT _hr = raw_PivotCache(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCachePtr(_result, false);
}

inline PivotFormulasPtr IPivotTable::GetPivotFormulas ( ) {
    struct PivotFormulas * _result = 0;
    HRESULT _hr = get_PivotFormulas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFormulasPtr(_result, false);
}

inline HRESULT IPivotTable::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection ) {
    HRESULT _hr = raw_PivotTableWizard(SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPivotTable::GetSubtotalHiddenPageItems ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubtotalHiddenPageItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutSubtotalHiddenPageItems ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SubtotalHiddenPageItems(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPivotTable::GetPageFieldOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_PageFieldOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutPageFieldOrder ( long RHS ) {
    HRESULT _hr = put_PageFieldOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotTable::GetPageFieldStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PageFieldStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotTable::PutPageFieldStyle ( _bstr_t RHS ) {
    HRESULT _hr = put_PageFieldStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPivotTable::GetPageFieldWrapCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PageFieldWrapCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutPageFieldWrapCount ( long RHS ) {
    HRESULT _hr = put_PageFieldWrapCount(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotTable::GetPreserveFormatting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreserveFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutPreserveFormatting ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PreserveFormatting(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPivotTable::PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode ) {
    HRESULT _hr = raw_PivotSelect(Name, Mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPivotTable::GetPivotSelection ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PivotSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotTable::PutPivotSelection ( _bstr_t RHS ) {
    HRESULT _hr = put_PivotSelection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlPTSelectionMode IPivotTable::GetSelectionMode ( ) {
    enum XlPTSelectionMode _result;
    HRESULT _hr = get_SelectionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutSelectionMode ( enum XlPTSelectionMode RHS ) {
    HRESULT _hr = put_SelectionMode(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotTable::GetTableStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TableStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotTable::PutTableStyle ( _bstr_t RHS ) {
    HRESULT _hr = put_TableStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPivotTable::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotTable::PutTag ( _bstr_t RHS ) {
    HRESULT _hr = put_Tag(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPivotTable::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPivotTable::GetVacatedStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VacatedStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotTable::PutVacatedStyle ( _bstr_t RHS ) {
    HRESULT _hr = put_VacatedStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPivotTable::Format ( enum xlPivotFormatType Format ) {
    HRESULT _hr = raw_Format(Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPivotTable::GetPrintTitles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintTitles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutPrintTitles ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintTitles(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CubeFieldsPtr IPivotTable::GetCubeFields ( ) {
    struct CubeFields * _result = 0;
    HRESULT _hr = get_CubeFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CubeFieldsPtr(_result, false);
}

inline _bstr_t IPivotTable::GetGrandTotalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GrandTotalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotTable::PutGrandTotalName ( _bstr_t RHS ) {
    HRESULT _hr = put_GrandTotalName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotTable::GetSmallGrid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SmallGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutSmallGrid ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SmallGrid(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotTable::GetRepeatItemsOnEachPrintedPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RepeatItemsOnEachPrintedPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutRepeatItemsOnEachPrintedPage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RepeatItemsOnEachPrintedPage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPivotTable::GetTotalsAnnotation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TotalsAnnotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPivotTable::PutTotalsAnnotation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TotalsAnnotation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPivotLayout wrapper method implementations
//

inline _ApplicationPtr IPivotLayout::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IPivotLayout::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IPivotLayout::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IPivotLayout::GetColumnFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ColumnFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IPivotLayout::GetDataFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_DataFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IPivotLayout::GetPageFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_PageFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IPivotLayout::GetRowFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_RowFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IPivotLayout::GetHiddenFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_HiddenFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IPivotLayout::GetVisibleFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_VisibleFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IPivotLayout::GetPivotFields ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_PivotFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline CubeFieldsPtr IPivotLayout::GetCubeFields ( ) {
    struct CubeFields * _result = 0;
    HRESULT _hr = get_CubeFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CubeFieldsPtr(_result, false);
}

inline PivotCachePtr IPivotLayout::GetPivotCache ( ) {
    struct PivotCache * _result = 0;
    HRESULT _hr = get_PivotCache(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCachePtr(_result, false);
}

inline PivotTablePtr IPivotLayout::GetPivotTable ( ) {
    struct PivotTable * _result = 0;
    HRESULT _hr = get_PivotTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

inline _bstr_t IPivotLayout::GetInnerDetail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InnerDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPivotLayout::PutInnerDetail ( _bstr_t RHS ) {
    HRESULT _hr = put_InnerDetail(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPivotLayout::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AppendField ) {
    HRESULT _hr = raw_AddFields(RowFields, ColumnFields, PageFields, AppendField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDisplayUnitLabel wrapper method implementations
//

inline _ApplicationPtr IDisplayUnitLabel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IDisplayUnitLabel::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDisplayUnitLabel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IDisplayUnitLabel::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IDisplayUnitLabel::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BorderPtr IDisplayUnitLabel::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline _variant_t IDisplayUnitLabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline InteriorPtr IDisplayUnitLabel::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline ChartFillFormatPtr IDisplayUnitLabel::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

inline _bstr_t IDisplayUnitLabel::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDisplayUnitLabel::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CharactersPtr IDisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline FontPtr IDisplayUnitLabel::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _variant_t IDisplayUnitLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDisplayUnitLabel::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDisplayUnitLabel::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDisplayUnitLabel::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDisplayUnitLabel::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IDisplayUnitLabel::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDisplayUnitLabel::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDisplayUnitLabel::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDisplayUnitLabel::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IDisplayUnitLabel::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDisplayUnitLabel::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDisplayUnitLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDisplayUnitLabel::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDisplayUnitLabel::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDisplayUnitLabel::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IDisplayUnitLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IDisplayUnitLabel::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWindow wrapper method implementations
//

inline _ApplicationPtr IWindow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IWindow::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IWindow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IWindow::Activate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Activate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IWindow::ActivateNext ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ActivateNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IWindow::ActivatePrevious ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ActivatePrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IWindow::GetActiveCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_ActiveCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _ChartPtr IWindow::GetActiveChart ( ) {
    struct _Chart * _result = 0;
    HRESULT _hr = get_ActiveChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

inline PanePtr IWindow::GetActivePane ( ) {
    struct Pane * _result = 0;
    HRESULT _hr = get_ActivePane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

inline IDispatchPtr IWindow::GetActiveSheet ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ActiveSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IWindow::GetCaption ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IWindow::PutCaption ( const _variant_t & RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWindow::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Close(SaveChanges, Filename, RouteWorkbook, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IWindow::GetDisplayFormulas ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayFormulas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutDisplayFormulas ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayFormulas(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWindow::GetDisplayGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutDisplayGridlines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayGridlines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWindow::GetDisplayHeadings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayHeadings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutDisplayHeadings ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayHeadings(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWindow::GetDisplayHorizontalScrollBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayHorizontalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutDisplayHorizontalScrollBar ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayHorizontalScrollBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWindow::GetDisplayOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutDisplayOutline ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayOutline(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWindow::Get_DisplayRightToLeft ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get__DisplayRightToLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::Put_DisplayRightToLeft ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put__DisplayRightToLeft(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWindow::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayVerticalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayVerticalScrollBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWindow::GetDisplayWorkbookTabs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayWorkbookTabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutDisplayWorkbookTabs ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayWorkbookTabs(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWindow::GetDisplayZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutDisplayZeros ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayZeros(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWindow::GetEnableResize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableResize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutEnableResize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableResize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWindow::GetFreezePanes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FreezePanes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutFreezePanes ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_FreezePanes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IWindow::GetGridlineColor ( ) {
    long _result = 0;
    HRESULT _hr = get_GridlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutGridlineColor ( long RHS ) {
    HRESULT _hr = put_GridlineColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlColorIndex IWindow::GetGridlineColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_GridlineColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutGridlineColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_GridlineColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IWindow::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IWindow::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IWindow::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LargeScroll(Down, Up, ToRight, ToLeft, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IWindow::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline WindowPtr IWindow::NewWindow ( ) {
    struct Window * _result = 0;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

inline _bstr_t IWindow::GetOnWindow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IWindow::PutOnWindow ( _bstr_t RHS ) {
    HRESULT _hr = put_OnWindow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PanesPtr IWindow::GetPanes ( ) {
    struct Panes * _result = 0;
    HRESULT _hr = get_Panes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanesPtr(_result, false);
}

inline _variant_t IWindow::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IWindow::PrintPreview ( const _variant_t & EnableChanges ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PrintPreview(EnableChanges, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IWindow::GetRangeSelection ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_RangeSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline long IWindow::GetScrollColumn ( ) {
    long _result = 0;
    HRESULT _hr = get_ScrollColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutScrollColumn ( long RHS ) {
    HRESULT _hr = put_ScrollColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IWindow::GetScrollRow ( ) {
    long _result = 0;
    HRESULT _hr = get_ScrollRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutScrollRow ( long RHS ) {
    HRESULT _hr = put_ScrollRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IWindow::ScrollWorkbookTabs ( const _variant_t & Sheets, const _variant_t & Position ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ScrollWorkbookTabs(Sheets, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline SheetsPtr IWindow::GetSelectedSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_SelectedSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline IDispatchPtr IWindow::GetSelection ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IWindow::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SmallScroll(Down, Up, ToRight, ToLeft, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IWindow::GetSplit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Split(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutSplit ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Split(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IWindow::GetSplitColumn ( ) {
    long _result = 0;
    HRESULT _hr = get_SplitColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutSplitColumn ( long RHS ) {
    HRESULT _hr = put_SplitColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IWindow::GetSplitHorizontal ( ) {
    double _result = 0;
    HRESULT _hr = get_SplitHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutSplitHorizontal ( double RHS ) {
    HRESULT _hr = put_SplitHorizontal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IWindow::GetSplitRow ( ) {
    long _result = 0;
    HRESULT _hr = get_SplitRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutSplitRow ( long RHS ) {
    HRESULT _hr = put_SplitRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IWindow::GetSplitVertical ( ) {
    double _result = 0;
    HRESULT _hr = get_SplitVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutSplitVertical ( double RHS ) {
    HRESULT _hr = put_SplitVertical(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IWindow::GetTabRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_TabRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutTabRatio ( double RHS ) {
    HRESULT _hr = put_TabRatio(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IWindow::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlWindowType IWindow::GetType ( ) {
    enum XlWindowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWindow::GetUsableHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_UsableHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IWindow::GetUsableWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_UsableWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IWindow::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IWindow::GetVisibleRange ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_VisibleRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline double IWindow::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IWindow::GetWindowNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_WindowNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum XlWindowState IWindow::GetWindowState ( ) {
    enum XlWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutWindowState ( enum XlWindowState RHS ) {
    HRESULT _hr = put_WindowState(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IWindow::GetZoom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IWindow::PutZoom ( const _variant_t & RHS ) {
    HRESULT _hr = put_Zoom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlWindowView IWindow::GetView ( ) {
    enum XlWindowView _result;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutView ( enum XlWindowView RHS ) {
    HRESULT _hr = put_View(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWindow::GetDisplayRightToLeft ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayRightToLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IWindow::PutDisplayRightToLeft ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRightToLeft(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IWindow::PointsToScreenPixelsX ( long Points ) {
    long _result = 0;
    HRESULT _hr = raw_PointsToScreenPixelsX(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IWindow::PointsToScreenPixelsY ( long Points ) {
    long _result = 0;
    HRESULT _hr = raw_PointsToScreenPixelsY(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IWindow::RangeFromPoint ( long x, long y ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_RangeFromPoint(x, y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IWindow::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start ) {
    HRESULT _hr = raw_ScrollIntoView(Left, Top, Width, Height, Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Chart wrapper method implementations
//

inline _ApplicationPtr _Chart::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator _Chart::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _Chart::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Chart::Activate ( long lcid ) {
    HRESULT _hr = raw_Activate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Chart::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Chart::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Chart::GetCodeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _Chart::Get_CodeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Chart::Put_CodeName ( _bstr_t RHS ) {
    HRESULT _hr = put__CodeName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Chart::GetIndex ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Index(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Chart::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Chart::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Chart::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Chart::GetNext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t _Chart::GetOnDoubleClick ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnDoubleClick(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Chart::PutOnDoubleClick ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnDoubleClick(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Chart::GetOnSheetActivate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSheetActivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Chart::PutOnSheetActivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetActivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Chart::GetOnSheetDeactivate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSheetDeactivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Chart::PutOnSheetDeactivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetDeactivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PageSetupPtr _Chart::GetPageSetup ( ) {
    struct PageSetup * _result = 0;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

inline IDispatchPtr _Chart::GetPrevious ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Chart::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Chart::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Chart::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid ) {
    HRESULT _hr = raw_Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Chart::GetProtectContents ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectContents(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Chart::GetProtectDrawingObjects ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectDrawingObjects(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Chart::GetProtectionMode ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Chart::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid ) {
    HRESULT _hr = raw_SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Chart::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Chart::Unprotect ( const _variant_t & Password, long lcid ) {
    HRESULT _hr = raw_Unprotect(Password, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum XlSheetVisibility _Chart::GetVisible ( long lcid ) {
    enum XlSheetVisibility _result;
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutVisible ( long lcid, enum XlSheetVisibility RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapesPtr _Chart::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

inline HRESULT _Chart::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, long lcid ) {
    HRESULT _hr = raw_ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _Chart::Arcs ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Arcs(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ChartGroupPtr _Chart::GetArea3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Area3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

inline IDispatchPtr _Chart::AreaGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_AreaGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Chart::AutoFormat ( long Gallery, const _variant_t & Format ) {
    HRESULT _hr = raw_AutoFormat(Gallery, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Chart::GetAutoScaling ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoScaling(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutAutoScaling ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoScaling(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Chart::Axes ( const _variant_t & Type, enum XlAxisGroup AxisGroup, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Axes(Type, AxisGroup, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Chart::SetBackgroundPicture ( _bstr_t Filename ) {
    HRESULT _hr = raw_SetBackgroundPicture(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ChartGroupPtr _Chart::GetBar3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Bar3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

inline IDispatchPtr _Chart::BarGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_BarGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Chart::Buttons ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Buttons(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ChartAreaPtr _Chart::GetChartArea ( long lcid ) {
    struct ChartArea * _result = 0;
    HRESULT _hr = get_ChartArea(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartAreaPtr(_result, false);
}

inline IDispatchPtr _Chart::ChartGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ChartGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Chart::ChartObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ChartObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ChartTitlePtr _Chart::GetChartTitle ( long lcid ) {
    struct ChartTitle * _result = 0;
    HRESULT _hr = get_ChartTitle(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartTitlePtr(_result, false);
}

inline HRESULT _Chart::ChartWizard ( const _variant_t & Source, const _variant_t & Gallery, const _variant_t & Format, const _variant_t & PlotBy, const _variant_t & CategoryLabels, const _variant_t & SeriesLabels, const _variant_t & HasLegend, const _variant_t & Title, const _variant_t & CategoryTitle, const _variant_t & ValueTitle, const _variant_t & ExtraTitle, long lcid ) {
    HRESULT _hr = raw_ChartWizard(Source, Gallery, Format, PlotBy, CategoryLabels, SeriesLabels, HasLegend, Title, CategoryTitle, ValueTitle, ExtraTitle, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _Chart::CheckBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CheckBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Chart::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid ) {
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ChartGroupPtr _Chart::GetColumn3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Column3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

inline IDispatchPtr _Chart::ColumnGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ColumnGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Chart::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format, enum XlPictureAppearance Size, long lcid ) {
    HRESULT _hr = raw_CopyPicture(Appearance, Format, Size, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline CornersPtr _Chart::GetCorners ( long lcid ) {
    struct Corners * _result = 0;
    HRESULT _hr = get_Corners(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CornersPtr(_result, false);
}

inline HRESULT _Chart::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, enum XlPictureAppearance Size, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU, long lcid ) {
    HRESULT _hr = raw_CreatePublisher(Edition, Appearance, Size, ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline DataTablePtr _Chart::GetDataTable ( ) {
    struct DataTable * _result = 0;
    HRESULT _hr = get_DataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataTablePtr(_result, false);
}

inline long _Chart::GetDepthPercent ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_DepthPercent(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutDepthPercent ( long lcid, long RHS ) {
    HRESULT _hr = put_DepthPercent(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Chart::Deselect ( long lcid ) {
    HRESULT _hr = raw_Deselect(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum XlDisplayBlanksAs _Chart::GetDisplayBlanksAs ( long lcid ) {
    enum XlDisplayBlanksAs _result;
    HRESULT _hr = get_DisplayBlanksAs(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutDisplayBlanksAs ( long lcid, enum XlDisplayBlanksAs RHS ) {
    HRESULT _hr = put_DisplayBlanksAs(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Chart::DoughnutGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DoughnutGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Chart::Drawings ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Drawings(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Chart::DrawingObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DrawingObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Chart::DropDowns ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DropDowns(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _Chart::GetElevation ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Elevation(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutElevation ( long lcid, long RHS ) {
    HRESULT _hr = put_Elevation(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Chart::Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _Chart::_Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline FloorPtr _Chart::GetFloor ( long lcid ) {
    struct Floor * _result = 0;
    HRESULT _hr = get_Floor(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FloorPtr(_result, false);
}

inline long _Chart::GetGapDepth ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_GapDepth(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutGapDepth ( long lcid, long RHS ) {
    HRESULT _hr = put_GapDepth(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Chart::GroupBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GroupBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Chart::GroupObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GroupObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t _Chart::GetHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HasAxis(Index1, Index2, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void _Chart::PutHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_HasAxis(Index1, Index2, lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Chart::GetHasDataTable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutHasDataTable ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataTable(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Chart::GetHasLegend ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLegend(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutHasLegend ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasLegend(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Chart::GetHasTitle ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTitle(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutHasTitle ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasTitle(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Chart::GetHeightPercent ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_HeightPercent(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutHeightPercent ( long lcid, long RHS ) {
    HRESULT _hr = put_HeightPercent(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HyperlinksPtr _Chart::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

inline IDispatchPtr _Chart::Labels ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Labels(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline LegendPtr _Chart::GetLegend ( long lcid ) {
    struct Legend * _result = 0;
    HRESULT _hr = get_Legend(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendPtr(_result, false);
}

inline ChartGroupPtr _Chart::GetLine3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Line3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

inline IDispatchPtr _Chart::LineGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_LineGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Chart::Lines ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Lines(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Chart::ListBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ListBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _ChartPtr _Chart::Location ( enum XlChartLocation Where, const _variant_t & Name ) {
    struct _Chart * _result = 0;
    HRESULT _hr = raw_Location(Where, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

inline IDispatchPtr _Chart::OLEObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_OLEObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Chart::OptionButtons ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_OptionButtons(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Chart::Ovals ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Ovals(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Chart::Paste ( const _variant_t & Type, long lcid ) {
    HRESULT _hr = raw_Paste(Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _Chart::GetPerspective ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Perspective(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutPerspective ( long lcid, long RHS ) {
    HRESULT _hr = put_Perspective(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Chart::Pictures ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Pictures(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ChartGroupPtr _Chart::GetPie3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Pie3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

inline IDispatchPtr _Chart::PieGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_PieGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline PlotAreaPtr _Chart::GetPlotArea ( long lcid ) {
    struct PlotArea * _result = 0;
    HRESULT _hr = get_PlotArea(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlotAreaPtr(_result, false);
}

inline VARIANT_BOOL _Chart::GetPlotVisibleOnly ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlotVisibleOnly(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutPlotVisibleOnly ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PlotVisibleOnly(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Chart::RadarGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_RadarGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Chart::Rectangles ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Rectangles(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t _Chart::GetRightAngleAxes ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RightAngleAxes(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void _Chart::PutRightAngleAxes ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_RightAngleAxes(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Chart::GetRotation ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Rotation(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void _Chart::PutRotation ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Rotation(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Chart::ScrollBars ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ScrollBars(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Chart::SeriesCollection ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SeriesCollection(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _Chart::GetSizeWithWindow ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SizeWithWindow(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutSizeWithWindow ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SizeWithWindow(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Chart::GetShowWindow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutShowWindow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowWindow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Chart::Spinners ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Spinners(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _Chart::GetSubType ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_SubType(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutSubType ( long lcid, long RHS ) {
    HRESULT _hr = put_SubType(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ChartGroupPtr _Chart::GetSurfaceGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_SurfaceGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

inline IDispatchPtr _Chart::TextBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_TextBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _Chart::GetType ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Type(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutType ( long lcid, long RHS ) {
    HRESULT _hr = put_Type(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlChartType _Chart::GetChartType ( ) {
    enum XlChartType _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutChartType ( enum XlChartType RHS ) {
    HRESULT _hr = put_ChartType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Chart::ApplyCustomType ( enum XlChartType ChartType, const _variant_t & TypeName ) {
    HRESULT _hr = raw_ApplyCustomType(ChartType, TypeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline WallsPtr _Chart::GetWalls ( long lcid ) {
    struct Walls * _result = 0;
    HRESULT _hr = get_Walls(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WallsPtr(_result, false);
}

inline VARIANT_BOOL _Chart::GetWallsAndGridlines2D ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WallsAndGridlines2D(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutWallsAndGridlines2D ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WallsAndGridlines2D(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Chart::XYGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_XYGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum XlBarShape _Chart::GetBarShape ( ) {
    enum XlBarShape _result;
    HRESULT _hr = get_BarShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutBarShape ( enum XlBarShape RHS ) {
    HRESULT _hr = put_BarShape(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlRowCol _Chart::GetPlotBy ( ) {
    enum XlRowCol _result;
    HRESULT _hr = get_PlotBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutPlotBy ( enum XlRowCol RHS ) {
    HRESULT _hr = put_PlotBy(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Chart::CopyChartBuild ( ) {
    HRESULT _hr = raw_CopyChartBuild();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Chart::GetProtectFormatting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutProtectFormatting ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ProtectFormatting(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Chart::GetProtectData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutProtectData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ProtectData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Chart::GetProtectGoalSeek ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectGoalSeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutProtectGoalSeek ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ProtectGoalSeek(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Chart::GetProtectSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutProtectSelection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ProtectSelection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Chart::GetChartElement ( long x, long y, long * ElementID, long * Arg1, long * Arg2 ) {
    HRESULT _hr = raw_GetChartElement(x, y, ElementID, Arg1, Arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Chart::SetSourceData ( struct Range * Source, const _variant_t & PlotBy ) {
    HRESULT _hr = raw_SetSourceData(Source, PlotBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Chart::Export ( _bstr_t Filename, const _variant_t & FilterName, const _variant_t & Interactive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Export(Filename, FilterName, Interactive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Chart::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline PivotLayoutPtr _Chart::GetPivotLayout ( ) {
    struct PivotLayout * _result = 0;
    HRESULT _hr = get_PivotLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotLayoutPtr(_result, false);
}

inline VARIANT_BOOL _Chart::GetHasPivotFields ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasPivotFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Chart::PutHasPivotFields ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasPivotFields(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::ScriptsPtr _Chart::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

inline HRESULT _Chart::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Workbook wrapper method implementations
//

inline _ApplicationPtr _Workbook::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator _Workbook::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _Workbook::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _Workbook::GetAcceptLabelsInFormulas ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AcceptLabelsInFormulas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutAcceptLabelsInFormulas ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AcceptLabelsInFormulas(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Workbook::Activate ( long lcid ) {
    HRESULT _hr = raw_Activate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _ChartPtr _Workbook::GetActiveChart ( ) {
    struct _Chart * _result = 0;
    HRESULT _hr = get_ActiveChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

inline IDispatchPtr _Workbook::GetActiveSheet ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ActiveSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t _Workbook::GetAuthor ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Workbook::PutAuthor ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_Author(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Workbook::GetAutoUpdateFrequency ( ) {
    long _result = 0;
    HRESULT _hr = get_AutoUpdateFrequency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutAutoUpdateFrequency ( long RHS ) {
    HRESULT _hr = put_AutoUpdateFrequency(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Workbook::GetAutoUpdateSaveChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoUpdateSaveChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutAutoUpdateSaveChanges ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoUpdateSaveChanges(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Workbook::GetChangeHistoryDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_ChangeHistoryDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutChangeHistoryDuration ( long RHS ) {
    HRESULT _hr = put_ChangeHistoryDuration(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Workbook::GetBuiltinDocumentProperties ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_BuiltinDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Workbook::ChangeFileAccess ( enum XlFileAccess Mode, const _variant_t & WritePassword, const _variant_t & Notify, long lcid ) {
    HRESULT _hr = raw_ChangeFileAccess(Mode, WritePassword, Notify, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::ChangeLink ( _bstr_t Name, _bstr_t NewName, enum XlLinkType Type, long lcid ) {
    HRESULT _hr = raw_ChangeLink(Name, NewName, Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SheetsPtr _Workbook::GetCharts ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Charts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline HRESULT _Workbook::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook, long lcid ) {
    HRESULT _hr = raw_Close(SaveChanges, Filename, RouteWorkbook, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Workbook::GetCodeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _Workbook::Get_CodeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Workbook::Put_CodeName ( _bstr_t RHS ) {
    HRESULT _hr = put__CodeName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Workbook::GetColors ( const _variant_t & Index, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Colors(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void _Workbook::PutColors ( const _variant_t & Index, long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Colors(Index, lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::_CommandBarsPtr _Workbook::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

inline _bstr_t _Workbook::GetComments ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comments(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Workbook::PutComments ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_Comments(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlSaveConflictResolution _Workbook::GetConflictResolution ( ) {
    enum XlSaveConflictResolution _result;
    HRESULT _hr = get_ConflictResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutConflictResolution ( enum XlSaveConflictResolution RHS ) {
    HRESULT _hr = put_ConflictResolution(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Workbook::GetContainer ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Container(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _Workbook::GetCreateBackup ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateBackup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _Workbook::GetCustomDocumentProperties ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CustomDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _Workbook::GetDate1904 ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Date1904(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutDate1904 ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Date1904(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Workbook::DeleteNumberFormat ( _bstr_t NumberFormat, long lcid ) {
    HRESULT _hr = raw_DeleteNumberFormat(NumberFormat, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SheetsPtr _Workbook::GetDialogSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_DialogSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline enum xlDisplayDrawingObjects _Workbook::GetDisplayDrawingObjects ( long lcid ) {
    enum xlDisplayDrawingObjects _result;
    HRESULT _hr = get_DisplayDrawingObjects(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutDisplayDrawingObjects ( long lcid, enum xlDisplayDrawingObjects RHS ) {
    HRESULT _hr = put_DisplayDrawingObjects(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Workbook::ExclusiveAccess ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ExclusiveAccess(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum XlFileFormat _Workbook::GetFileFormat ( long lcid ) {
    enum XlFileFormat _result;
    HRESULT _hr = get_FileFormat(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Workbook::ForwardMailer ( long lcid ) {
    HRESULT _hr = raw_ForwardMailer(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Workbook::GetFullName ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL _Workbook::GetHasMailer ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMailer(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutHasMailer ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasMailer(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Workbook::GetHasPassword ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasPassword(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Workbook::GetHasRoutingSlip ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasRoutingSlip(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutHasRoutingSlip ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasRoutingSlip(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Workbook::GetIsAddin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsAddin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutIsAddin ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IsAddin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Workbook::GetKeywords ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Keywords(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Workbook::PutKeywords ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_Keywords(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Workbook::LinkInfo ( _bstr_t Name, enum XlLinkInfo LinkInfo, const _variant_t & Type, const _variant_t & EditionRef, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LinkInfo(Name, LinkInfo, Type, EditionRef, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _Workbook::LinkSources ( const _variant_t & Type, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LinkSources(Type, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline MailerPtr _Workbook::GetMailer ( ) {
    struct Mailer * _result = 0;
    HRESULT _hr = get_Mailer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailerPtr(_result, false);
}

inline HRESULT _Workbook::MergeWorkbook ( const _variant_t & Filename ) {
    HRESULT _hr = raw_MergeWorkbook(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SheetsPtr _Workbook::GetModules ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Modules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline VARIANT_BOOL _Workbook::GetMultiUserEditing ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiUserEditing(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t _Workbook::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline NamesPtr _Workbook::GetNames ( ) {
    struct Names * _result = 0;
    HRESULT _hr = get_Names(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamesPtr(_result, false);
}

inline WindowPtr _Workbook::NewWindow ( long lcid ) {
    struct Window * _result = 0;
    HRESULT _hr = raw_NewWindow(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

inline _bstr_t _Workbook::GetOnSave ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSave(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Workbook::PutOnSave ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSave(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Workbook::GetOnSheetActivate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSheetActivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Workbook::PutOnSheetActivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetActivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Workbook::GetOnSheetDeactivate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSheetDeactivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Workbook::PutOnSheetDeactivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetDeactivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Workbook::OpenLinks ( _bstr_t Name, const _variant_t & ReadOnly, const _variant_t & Type, long lcid ) {
    HRESULT _hr = raw_OpenLinks(Name, ReadOnly, Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Workbook::GetPath ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL _Workbook::GetPersonalViewListSettings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PersonalViewListSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutPersonalViewListSettings ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PersonalViewListSettings(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Workbook::GetPersonalViewPrintSettings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PersonalViewPrintSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutPersonalViewPrintSettings ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PersonalViewPrintSettings(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PivotCachesPtr _Workbook::PivotCaches ( ) {
    struct PivotCaches * _result = 0;
    HRESULT _hr = raw_PivotCaches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCachesPtr(_result, false);
}

inline HRESULT _Workbook::Post ( const _variant_t & DestName, long lcid ) {
    HRESULT _hr = raw_Post(DestName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Workbook::GetPrecisionAsDisplayed ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrecisionAsDisplayed(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutPrecisionAsDisplayed ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrecisionAsDisplayed(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Workbook::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::Protect ( const _variant_t & Password, const _variant_t & Structure, const _variant_t & Windows ) {
    HRESULT _hr = raw_Protect(Password, Structure, Windows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::ProtectSharing ( const _variant_t & Filename, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & SharingPassword ) {
    HRESULT _hr = raw_ProtectSharing(Filename, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, SharingPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Workbook::GetProtectStructure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectStructure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Workbook::GetProtectWindows ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Workbook::GetReadOnly ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Workbook::GetReadOnlyRecommended ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnlyRecommended(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Workbook::RefreshAll ( ) {
    HRESULT _hr = raw_RefreshAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::Reply ( long lcid ) {
    HRESULT _hr = raw_Reply(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::ReplyAll ( long lcid ) {
    HRESULT _hr = raw_ReplyAll(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::RemoveUser ( long Index ) {
    HRESULT _hr = raw_RemoveUser(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _Workbook::GetRevisionNumber ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_RevisionNumber(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Workbook::Route ( long lcid ) {
    HRESULT _hr = raw_Route(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Workbook::GetRouted ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Routed(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline RoutingSlipPtr _Workbook::GetRoutingSlip ( ) {
    struct RoutingSlip * _result = 0;
    HRESULT _hr = get_RoutingSlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RoutingSlipPtr(_result, false);
}

inline HRESULT _Workbook::RunAutoMacros ( enum XlRunAutoMacro Which, long lcid ) {
    HRESULT _hr = raw_RunAutoMacros(Which, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::Save ( long lcid ) {
    HRESULT _hr = raw_Save(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::SaveAs ( const _variant_t & Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, enum XlSaveAsAccessMode AccessMode, const _variant_t & ConflictResolution, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid ) {
    HRESULT _hr = raw_SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AccessMode, ConflictResolution, AddToMru, TextCodepage, TextVisualLayout, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::SaveCopyAs ( const _variant_t & Filename, long lcid ) {
    HRESULT _hr = raw_SaveCopyAs(Filename, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Workbook::GetSaved ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutSaved ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Saved(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Workbook::GetSaveLinkValues ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveLinkValues(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutSaveLinkValues ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SaveLinkValues(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Workbook::SendMail ( const _variant_t & Recipients, const _variant_t & Subject, const _variant_t & ReturnReceipt, long lcid ) {
    HRESULT _hr = raw_SendMail(Recipients, Subject, ReturnReceipt, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::SendMailer ( const _variant_t & FileFormat, enum XlPriority Priority, long lcid ) {
    HRESULT _hr = raw_SendMailer(FileFormat, Priority, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::SetLinkOnData ( _bstr_t Name, const _variant_t & Procedure, long lcid ) {
    HRESULT _hr = raw_SetLinkOnData(Name, Procedure, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SheetsPtr _Workbook::GetSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Sheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline VARIANT_BOOL _Workbook::GetShowConflictHistory ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowConflictHistory(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutShowConflictHistory ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowConflictHistory(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline StylesPtr _Workbook::GetStyles ( ) {
    struct Styles * _result = 0;
    HRESULT _hr = get_Styles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylesPtr(_result, false);
}

inline _bstr_t _Workbook::GetSubject ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Workbook::PutSubject ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_Subject(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Workbook::GetTitle ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Workbook::PutTitle ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_Title(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Workbook::Unprotect ( const _variant_t & Password, long lcid ) {
    HRESULT _hr = raw_Unprotect(Password, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::UnprotectSharing ( const _variant_t & SharingPassword ) {
    HRESULT _hr = raw_UnprotectSharing(SharingPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::UpdateFromFile ( long lcid ) {
    HRESULT _hr = raw_UpdateFromFile(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::UpdateLink ( const _variant_t & Name, const _variant_t & Type, long lcid ) {
    HRESULT _hr = raw_UpdateLink(Name, Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Workbook::GetUpdateRemoteReferences ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpdateRemoteReferences(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutUpdateRemoteReferences ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UpdateRemoteReferences(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Workbook::GetUserControl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutUserControl ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UserControl(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Workbook::GetUserStatus ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UserStatus(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline CustomViewsPtr _Workbook::GetCustomViews ( ) {
    struct CustomViews * _result = 0;
    HRESULT _hr = get_CustomViews(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomViewsPtr(_result, false);
}

inline WindowsPtr _Workbook::GetWindows ( ) {
    struct Windows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowsPtr(_result, false);
}

inline SheetsPtr _Workbook::GetWorksheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Worksheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline VARIANT_BOOL _Workbook::GetWriteReserved ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WriteReserved(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t _Workbook::GetWriteReservedBy ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_WriteReservedBy(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline SheetsPtr _Workbook::GetExcel4IntlMacroSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Excel4IntlMacroSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline SheetsPtr _Workbook::GetExcel4MacroSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Excel4MacroSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline VARIANT_BOOL _Workbook::GetTemplateRemoveExtData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TemplateRemoveExtData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutTemplateRemoveExtData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TemplateRemoveExtData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Workbook::HighlightChangesOptions ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where ) {
    HRESULT _hr = raw_HighlightChangesOptions(When, Who, Where);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Workbook::GetHighlightChangesOnScreen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HighlightChangesOnScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutHighlightChangesOnScreen ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HighlightChangesOnScreen(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Workbook::GetKeepChangeHistory ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeepChangeHistory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutKeepChangeHistory ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_KeepChangeHistory(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Workbook::GetListChangesOnNewSheet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ListChangesOnNewSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutListChangesOnNewSheet ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ListChangesOnNewSheet(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Workbook::PurgeChangeHistoryNow ( long Days, const _variant_t & SharingPassword ) {
    HRESULT _hr = raw_PurgeChangeHistoryNow(Days, SharingPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::AcceptAllChanges ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where ) {
    HRESULT _hr = raw_AcceptAllChanges(When, Who, Where);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::RejectAllChanges ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where ) {
    HRESULT _hr = raw_RejectAllChanges(When, Who, Where);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection, long lcid ) {
    HRESULT _hr = raw_PivotTableWizard(SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::ResetColors ( ) {
    HRESULT _hr = raw_ResetColors();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VBIDE::_VBProjectPtr _Workbook::GetVBProject ( ) {
    struct VBIDE::_VBProject * _result = 0;
    HRESULT _hr = get_VBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBIDE::_VBProjectPtr(_result, false);
}

inline HRESULT _Workbook::FollowHyperlink ( _bstr_t Address, const _variant_t & SubAddress, const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo ) {
    HRESULT _hr = raw_FollowHyperlink(Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Workbook::GetIsInplace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsInplace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Workbook::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::WebPagePreview ( ) {
    HRESULT _hr = raw_WebPagePreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline PublishObjectsPtr _Workbook::GetPublishObjects ( ) {
    struct PublishObjects * _result = 0;
    HRESULT _hr = get_PublishObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectsPtr(_result, false);
}

inline WebOptionsPtr _Workbook::GetWebOptions ( ) {
    struct WebOptions * _result = 0;
    HRESULT _hr = get_WebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebOptionsPtr(_result, false);
}

inline HRESULT _Workbook::ReloadAs ( enum Office::MsoEncoding Encoding ) {
    HRESULT _hr = raw_ReloadAs(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Office::HTMLProjectPtr _Workbook::GetHTMLProject ( ) {
    struct Office::HTMLProject * _result = 0;
    HRESULT _hr = get_HTMLProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::HTMLProjectPtr(_result, false);
}

inline VARIANT_BOOL _Workbook::GetEnvelopeVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnvelopeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Workbook::PutEnvelopeVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnvelopeVisible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Workbook::GetCalculationVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_CalculationVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Workbook::Dummy1 ( long unused ) {
    HRESULT _hr = raw_Dummy1(unused);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Workbook::sblt ( _bstr_t s ) {
    HRESULT _hr = raw_sblt(s);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Workbook::GetVBASigned ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VBASigned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICharts wrapper method implementations
//

inline _ApplicationPtr ICharts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator ICharts::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ICharts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _ChartPtr ICharts::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count ) {
    struct _Chart * _result = 0;
    HRESULT _hr = raw_Add(Before, After, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

inline HRESULT ICharts::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ICharts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ICharts::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr ICharts::GetItem ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT ICharts::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr ICharts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT ICharts::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICharts::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICharts::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HPageBreaksPtr ICharts::GetHPageBreaks ( ) {
    struct HPageBreaks * _result = 0;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

inline VPageBreaksPtr ICharts::GetVPageBreaks ( ) {
    struct VPageBreaks * _result = 0;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

inline _variant_t ICharts::GetVisible ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ICharts::PutVisible ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr ICharts::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT ICharts::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IChartObject wrapper method implementations
//

inline _ApplicationPtr IChartObject::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IChartObject::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IChartObject::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RangePtr IChartObject::GetBottomRightCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IChartObject::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IChartObject::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IChartObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IChartObject::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IChartObject::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IChartObject::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IChartObject::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObject::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IChartObject::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObject::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IChartObject::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IChartObject::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObject::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartObject::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObject::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IChartObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IChartObject::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IChartObject::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IChartObject::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IChartObject::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IChartObject::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartObject::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObject::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IChartObject::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IChartObject::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IChartObject::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObject::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IChartObject::GetTopLeftCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline VARIANT_BOOL IChartObject::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObject::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IChartObject::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObject::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IChartObject::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IChartObject::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _variant_t IChartObject::Activate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Activate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _ChartPtr IChartObject::GetChart ( ) {
    struct _Chart * _result = 0;
    HRESULT _hr = get_Chart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

inline VARIANT_BOOL IChartObject::GetProtectChartObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectChartObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObject::PutProtectChartObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ProtectChartObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChartObject::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObject::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline BorderPtr IChartObject::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr IChartObject::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL IChartObject::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChartObject::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRange wrapper method implementations
//

inline _ApplicationPtr IRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IRange::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IRange::Activate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Activate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::GetAddIndent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutAddIndent ( const _variant_t & RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IRange::GetAddress ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo, long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(RowAbsolute, ColumnAbsolute, ReferenceStyle, External, RelativeTo, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IRange::GetAddressLocal ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddressLocal(RowAbsolute, ColumnAbsolute, ReferenceStyle, External, RelativeTo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IRange::AdvancedFilter ( enum XlFilterAction Action, const _variant_t & CriteriaRange, const _variant_t & CopyToRange, const _variant_t & Unique ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AdvancedFilter(Action, CriteriaRange, CopyToRange, Unique, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::ApplyNames ( const _variant_t & Names, const _variant_t & IgnoreRelativeAbsolute, const _variant_t & UseRowColumnNames, const _variant_t & OmitColumn, const _variant_t & OmitRow, enum XlApplyNamesOrder Order, const _variant_t & AppendLast ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyNames(Names, IgnoreRelativeAbsolute, UseRowColumnNames, OmitColumn, OmitRow, Order, AppendLast, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::ApplyOutlineStyles ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyOutlineStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline AreasPtr IRange::GetAreas ( ) {
    struct Areas * _result = 0;
    HRESULT _hr = get_Areas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AreasPtr(_result, false);
}

inline _bstr_t IRange::AutoComplete ( _bstr_t String ) {
    BSTR _result = 0;
    HRESULT _hr = raw_AutoComplete(String, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IRange::AutoFill ( struct Range * Destination, enum XlAutoFillType Type ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AutoFill(Destination, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::AutoFilter ( const _variant_t & Field, const _variant_t & Criteria1, enum XlAutoFilterOperator Operator, const _variant_t & Criteria2, const _variant_t & VisibleDropDown ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AutoFilter(Field, Criteria1, Operator, Criteria2, VisibleDropDown, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::AutoFit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AutoFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::AutoFormat ( enum XlRangeAutoFormat Format, const _variant_t & Number, const _variant_t & Font, const _variant_t & Alignment, const _variant_t & Border, const _variant_t & Pattern, const _variant_t & Width ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AutoFormat(Format, Number, Font, Alignment, Border, Pattern, Width, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::AutoOutline ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AutoOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::BorderAround ( const _variant_t & LineStyle, enum XlBorderWeight Weight, enum XlColorIndex ColorIndex, const _variant_t & Color ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BorderAround(LineStyle, Weight, ColorIndex, Color, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline BordersPtr IRange::GetBorders ( ) {
    struct Borders * _result = 0;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

inline _variant_t IRange::Calculate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Calculate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IRange::GetCells ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline CharactersPtr IRange::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

inline _variant_t IRange::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::ClearContents ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearContents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::ClearNotes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::ClearOutline ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IRange::GetColumn ( ) {
    long _result = 0;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline RangePtr IRange::ColumnDifferences ( const _variant_t & Comparison ) {
    struct Range * _result = 0;
    HRESULT _hr = raw_ColumnDifferences(Comparison, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline RangePtr IRange::GetColumns ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::GetColumnWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColumnWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutColumnWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColumnWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::Consolidate ( const _variant_t & Sources, const _variant_t & Function, const _variant_t & TopRow, const _variant_t & LeftColumn, const _variant_t & CreateLinks ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Consolidate(Sources, Function, TopRow, LeftColumn, CreateLinks, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::Copy ( const _variant_t & Destination ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(Destination, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IRange::CopyFromRecordset ( IUnknown * Data, const _variant_t & MaxRows, const _variant_t & MaxColumns ) {
    long _result = 0;
    HRESULT _hr = raw_CopyFromRecordset(Data, MaxRows, MaxColumns, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IRange::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IRange::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IRange::CreateNames ( const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CreateNames(Top, Left, Bottom, Right, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CreatePublisher(Edition, Appearance, ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IRange::GetCurrentArray ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_CurrentArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline RangePtr IRange::GetCurrentRegion ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_CurrentRegion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::Cut ( const _variant_t & Destination ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(Destination, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::DataSeries ( const _variant_t & Rowcol, enum XlDataSeriesType Type, enum XlDataSeriesDate Date, const _variant_t & Step, const _variant_t & Stop, const _variant_t & Trend ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_DataSeries(Rowcol, Type, Date, Step, Stop, Trend, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::Get_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get__Default(RowIndex, ColumnIndex, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::Put_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put__Default(RowIndex, ColumnIndex, lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::Delete ( const _variant_t & Shift ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(Shift, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IRange::GetDependents ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Dependents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::MSDialogBox ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_MSDialogBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IRange::GetDirectDependents ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_DirectDependents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline RangePtr IRange::GetDirectPrecedents ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_DirectPrecedents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::EditionOptions ( enum XlEditionType Type, enum XlEditionOptionsOption Option, const _variant_t & Name, const _variant_t & Reference, enum XlPictureAppearance Appearance, enum XlPictureAppearance ChartSize, const _variant_t & Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_EditionOptions(Type, Option, Name, Reference, Appearance, ChartSize, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IRange::GetEnd ( enum XlDirection Direction ) {
    struct Range * _result = 0;
    HRESULT _hr = get_End(Direction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline RangePtr IRange::GetEntireColumn ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_EntireColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline RangePtr IRange::GetEntireRow ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_EntireRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::FillDown ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FillDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::FillLeft ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FillLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::FillRight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FillRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::FillUp ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FillUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IRange::Find ( const _variant_t & What, const _variant_t & After, const _variant_t & LookIn, const _variant_t & LookAt, const _variant_t & SearchOrder, enum XlSearchDirection SearchDirection, const _variant_t & MatchCase, const _variant_t & MatchByte ) {
    struct Range * _result = 0;
    HRESULT _hr = raw_Find(What, After, LookIn, LookAt, SearchOrder, SearchDirection, MatchCase, MatchByte, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline RangePtr IRange::FindNext ( const _variant_t & After ) {
    struct Range * _result = 0;
    HRESULT _hr = raw_FindNext(After, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline RangePtr IRange::FindPrevious ( const _variant_t & After ) {
    struct Range * _result = 0;
    HRESULT _hr = raw_FindPrevious(After, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline FontPtr IRange::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

inline _variant_t IRange::GetFormula ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Formula(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutFormula ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Formula(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetFormulaArray ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FormulaArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutFormulaArray ( const _variant_t & RHS ) {
    HRESULT _hr = put_FormulaArray(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlFormulaLabel IRange::GetFormulaLabel ( ) {
    enum XlFormulaLabel _result;
    HRESULT _hr = get_FormulaLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRange::PutFormulaLabel ( enum XlFormulaLabel RHS ) {
    HRESULT _hr = put_FormulaLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetFormulaHidden ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FormulaHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutFormulaHidden ( const _variant_t & RHS ) {
    HRESULT _hr = put_FormulaHidden(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetFormulaLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutFormulaLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_FormulaLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetFormulaR1C1 ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FormulaR1C1(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutFormulaR1C1 ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_FormulaR1C1(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetFormulaR1C1Local ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutFormulaR1C1Local ( const _variant_t & RHS ) {
    HRESULT _hr = put_FormulaR1C1Local(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::FunctionWizard ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FunctionWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IRange::GoalSeek ( const _variant_t & Goal, struct Range * ChangingCell ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GoalSeek(Goal, ChangingCell, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IRange::Group ( const _variant_t & Start, const _variant_t & End, const _variant_t & By, const _variant_t & Periods ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Group(Start, End, By, Periods, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::GetHasArray ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HasArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::GetHasFormula ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HasFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::GetHeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::GetHidden ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutHidden ( const _variant_t & RHS ) {
    HRESULT _hr = put_Hidden(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetIndentLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_IndentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutIndentLevel ( const _variant_t & RHS ) {
    HRESULT _hr = put_IndentLevel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IRange::InsertIndent ( long InsertAmount ) {
    HRESULT _hr = raw_InsertIndent(InsertAmount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IRange::Insert ( const _variant_t & Shift ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Insert(Shift, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline InteriorPtr IRange::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline _variant_t IRange::GetItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(RowIndex, ColumnIndex, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Item(RowIndex, ColumnIndex, lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::Justify ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Justify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::GetLeft ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IRange::GetListHeaderRows ( ) {
    long _result = 0;
    HRESULT _hr = get_ListHeaderRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IRange::ListNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ListNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum XlLocationInTable IRange::GetLocationInTable ( ) {
    enum XlLocationInTable _result;
    HRESULT _hr = get_LocationInTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IRange::GetLocked ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutLocked ( const _variant_t & RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IRange::Merge ( const _variant_t & Across ) {
    HRESULT _hr = raw_Merge(Across);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IRange::UnMerge ( ) {
    HRESULT _hr = raw_UnMerge();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline RangePtr IRange::GetMergeArea ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_MergeArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::GetMergeCells ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MergeCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutMergeCells ( const _variant_t & RHS ) {
    HRESULT _hr = put_MergeCells(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutName ( const _variant_t & RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::NavigateArrow ( const _variant_t & TowardPrecedent, const _variant_t & ArrowNumber, const _variant_t & LinkNumber ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_NavigateArrow(TowardPrecedent, ArrowNumber, LinkNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IUnknownPtr IRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline RangePtr IRange::GetNext ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _bstr_t IRange::NoteText ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Length ) {
    BSTR _result = 0;
    HRESULT _hr = raw_NoteText(Text, Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IRange::GetNumberFormat ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutNumberFormat ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IRange::GetOffset ( const _variant_t & RowOffset, const _variant_t & ColumnOffset ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Offset(RowOffset, ColumnOffset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetOutlineLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OutlineLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutOutlineLevel ( const _variant_t & RHS ) {
    HRESULT _hr = put_OutlineLevel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IRange::GetPageBreak ( ) {
    long _result = 0;
    HRESULT _hr = get_PageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRange::PutPageBreak ( long RHS ) {
    HRESULT _hr = put_PageBreak(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::Parse ( const _variant_t & ParseLine, const _variant_t & Destination ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Parse(ParseLine, Destination, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PasteSpecial(Paste, Operation, SkipBlanks, Transpose, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline PivotFieldPtr IRange::GetPivotField ( ) {
    struct PivotField * _result = 0;
    HRESULT _hr = get_PivotField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

inline PivotItemPtr IRange::GetPivotItem ( ) {
    struct PivotItem * _result = 0;
    HRESULT _hr = get_PivotItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

inline PivotTablePtr IRange::GetPivotTable ( ) {
    struct PivotTable * _result = 0;
    HRESULT _hr = get_PivotTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

inline RangePtr IRange::GetPrecedents ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Precedents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::GetPrefixCharacter ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PrefixCharacter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr IRange::GetPrevious ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::PrintPreview ( const _variant_t & EnableChanges ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PrintPreview(EnableChanges, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _QueryTablePtr IRange::GetQueryTable ( ) {
    struct _QueryTable * _result = 0;
    HRESULT _hr = get_QueryTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _QueryTablePtr(_result, false);
}

inline RangePtr IRange::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Range(Cell1, Cell2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::RemoveSubtotal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveSubtotal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IRange::Replace ( const _variant_t & What, const _variant_t & Replacement, const _variant_t & LookAt, const _variant_t & SearchOrder, const _variant_t & MatchCase, const _variant_t & MatchByte ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Replace(What, Replacement, LookAt, SearchOrder, MatchCase, MatchByte, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline RangePtr IRange::GetResize ( const _variant_t & RowSize, const _variant_t & ColumnSize ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Resize(RowSize, ColumnSize, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline long IRange::GetRow ( ) {
    long _result = 0;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline RangePtr IRange::RowDifferences ( const _variant_t & Comparison ) {
    struct Range * _result = 0;
    HRESULT _hr = raw_RowDifferences(Comparison, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::GetRowHeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutRowHeight ( const _variant_t & RHS ) {
    HRESULT _hr = put_RowHeight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RangePtr IRange::GetRows ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::Run ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Run(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::Show ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::ShowDependents ( const _variant_t & Remove ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ShowDependents(Remove, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::GetShowDetail ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ShowDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutShowDetail ( const _variant_t & RHS ) {
    HRESULT _hr = put_ShowDetail(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::ShowErrors ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ShowErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::ShowPrecedents ( const _variant_t & Remove ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ShowPrecedents(Remove, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::GetShrinkToFit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ShrinkToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutShrinkToFit ( const _variant_t & RHS ) {
    HRESULT _hr = put_ShrinkToFit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::Sort ( const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Key2, const _variant_t & Type, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortMethod SortMethod ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Sort(Key1, Order1, Key2, Type, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, SortMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::SortSpecial ( enum XlSortMethod SortMethod, const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Type, const _variant_t & Key2, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SortSpecial(SortMethod, Key1, Order1, Type, Key2, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline SoundNotePtr IRange::GetSoundNote ( ) {
    struct SoundNote * _result = 0;
    HRESULT _hr = get_SoundNote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundNotePtr(_result, false);
}

inline RangePtr IRange::SpecialCells ( enum XlCellType Type, const _variant_t & Value ) {
    struct Range * _result = 0;
    HRESULT _hr = raw_SpecialCells(Type, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t IRange::GetStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_Style(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::SubscribeTo ( _bstr_t Edition, enum XlSubscribeToFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SubscribeTo(Edition, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::Subtotal ( long GroupBy, enum XlConsolidationFunction Function, const _variant_t & TotalList, const _variant_t & Replace, const _variant_t & PageBreaks, enum XlSummaryRow SummaryBelowData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Subtotal(GroupBy, Function, TotalList, Replace, PageBreaks, SummaryBelowData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::GetSummary ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Summary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::Table ( const _variant_t & RowInput, const _variant_t & ColumnInput ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Table(RowInput, ColumnInput, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::GetText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::TextToColumns ( const _variant_t & Destination, enum XlTextParsingType DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_TextToColumns(Destination, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, DecimalSeparator, ThousandsSeparator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::GetTop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::Ungroup ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRange::GetUseStandardHeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UseStandardHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutUseStandardHeight ( const _variant_t & RHS ) {
    HRESULT _hr = put_UseStandardHeight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetUseStandardWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UseStandardWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutUseStandardWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_UseStandardWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ValidationPtr IRange::GetValidation ( ) {
    struct Validation * _result = 0;
    HRESULT _hr = get_Validation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ValidationPtr(_result, false);
}

inline _variant_t IRange::GetValue ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutValue ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Value(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetValue2 ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value2(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutValue2 ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Value2(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::GetWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _WorksheetPtr IRange::GetWorksheet ( ) {
    struct _Worksheet * _result = 0;
    HRESULT _hr = get_Worksheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorksheetPtr(_result, false);
}

inline _variant_t IRange::GetWrapText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_WrapText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IRange::PutWrapText ( const _variant_t & RHS ) {
    HRESULT _hr = put_WrapText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CommentPtr IRange::AddComment ( const _variant_t & Text ) {
    struct Comment * _result = 0;
    HRESULT _hr = raw_AddComment(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

inline CommentPtr IRange::GetComment ( ) {
    struct Comment * _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

inline HRESULT IRange::ClearComments ( ) {
    HRESULT _hr = raw_ClearComments();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline PhoneticPtr IRange::GetPhonetic ( ) {
    struct Phonetic * _result = 0;
    HRESULT _hr = get_Phonetic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PhoneticPtr(_result, false);
}

inline FormatConditionsPtr IRange::GetFormatConditions ( ) {
    struct FormatConditions * _result = 0;
    HRESULT _hr = get_FormatConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormatConditionsPtr(_result, false);
}

inline long IRange::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRange::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HyperlinksPtr IRange::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

inline PhoneticsPtr IRange::GetPhonetics ( ) {
    struct Phonetics * _result = 0;
    HRESULT _hr = get_Phonetics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PhoneticsPtr(_result, false);
}

inline HRESULT IRange::SetPhonetic ( ) {
    HRESULT _hr = raw_SetPhonetic();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IRange::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRange::PutID ( _bstr_t RHS ) {
    HRESULT _hr = put_ID(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IRange::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IVPageBreak wrapper method implementations
//

inline _ApplicationPtr IVPageBreak::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IVPageBreak::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _WorksheetPtr IVPageBreak::GetParent ( ) {
    struct _Worksheet * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorksheetPtr(_result, false);
}

inline HRESULT IVPageBreak::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex ) {
    HRESULT _hr = raw_DragOff(Direction, RegionIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum XlPageBreak IVPageBreak::GetType ( ) {
    enum XlPageBreak _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IVPageBreak::PutType ( enum XlPageBreak RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlPageBreakExtent IVPageBreak::GetExtent ( ) {
    enum XlPageBreakExtent _result;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline RangePtr IVPageBreak::GetLocation ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline void IVPageBreak::PutRefLocation ( struct Range * RHS ) {
    HRESULT _hr = putref_Location(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHPageBreak wrapper method implementations
//

inline _ApplicationPtr IHPageBreak::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IHPageBreak::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _WorksheetPtr IHPageBreak::GetParent ( ) {
    struct _Worksheet * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorksheetPtr(_result, false);
}

inline HRESULT IHPageBreak::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex ) {
    HRESULT _hr = raw_DragOff(Direction, RegionIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum XlPageBreak IHPageBreak::GetType ( ) {
    enum XlPageBreak _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IHPageBreak::PutType ( enum XlPageBreak RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlPageBreakExtent IHPageBreak::GetExtent ( ) {
    enum XlPageBreakExtent _result;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline RangePtr IHPageBreak::GetLocation ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline void IHPageBreak::PutRefLocation ( struct Range * RHS ) {
    HRESULT _hr = putref_Location(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAppEvents wrapper method implementations
//

inline HRESULT IAppEvents::NewWorkbook ( struct _Workbook * Wb ) {
    HRESULT _hr = raw_NewWorkbook(Wb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target ) {
    HRESULT _hr = raw_SheetSelectionChange(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_SheetBeforeDoubleClick(Sh, Target, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_SheetBeforeRightClick(Sh, Target, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::SheetActivate ( IDispatch * Sh ) {
    HRESULT _hr = raw_SheetActivate(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::SheetDeactivate ( IDispatch * Sh ) {
    HRESULT _hr = raw_SheetDeactivate(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::SheetCalculate ( IDispatch * Sh ) {
    HRESULT _hr = raw_SheetCalculate(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::SheetChange ( IDispatch * Sh, struct Range * Target ) {
    HRESULT _hr = raw_SheetChange(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::WorkbookOpen ( struct _Workbook * Wb ) {
    HRESULT _hr = raw_WorkbookOpen(Wb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::WorkbookActivate ( struct _Workbook * Wb ) {
    HRESULT _hr = raw_WorkbookActivate(Wb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::WorkbookDeactivate ( struct _Workbook * Wb ) {
    HRESULT _hr = raw_WorkbookDeactivate(Wb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::WorkbookBeforeClose ( struct _Workbook * Wb, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WorkbookBeforeClose(Wb, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::WorkbookBeforeSave ( struct _Workbook * Wb, VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WorkbookBeforeSave(Wb, SaveAsUI, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::WorkbookBeforePrint ( struct _Workbook * Wb, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WorkbookBeforePrint(Wb, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::WorkbookNewSheet ( struct _Workbook * Wb, IDispatch * Sh ) {
    HRESULT _hr = raw_WorkbookNewSheet(Wb, Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::WorkbookAddinInstall ( struct _Workbook * Wb ) {
    HRESULT _hr = raw_WorkbookAddinInstall(Wb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::WorkbookAddinUninstall ( struct _Workbook * Wb ) {
    HRESULT _hr = raw_WorkbookAddinUninstall(Wb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::WindowResize ( struct _Workbook * Wb, struct Window * Wn ) {
    HRESULT _hr = raw_WindowResize(Wb, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::WindowActivate ( struct _Workbook * Wb, struct Window * Wn ) {
    HRESULT _hr = raw_WindowActivate(Wb, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::WindowDeactivate ( struct _Workbook * Wb, struct Window * Wn ) {
    HRESULT _hr = raw_WindowDeactivate(Wb, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAppEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target ) {
    HRESULT _hr = raw_SheetFollowHyperlink(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRecentFile wrapper method implementations
//

inline _ApplicationPtr IRecentFile::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IRecentFile::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IRecentFile::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IRecentFile::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IRecentFile::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IRecentFile::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _WorkbookPtr IRecentFile::Open ( ) {
    struct _Workbook * _result = 0;
    HRESULT _hr = raw_Open(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

inline HRESULT IRecentFile::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Workbooks wrapper method implementations
//

inline _ApplicationPtr Workbooks::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator Workbooks::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr Workbooks::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _WorkbookPtr Workbooks::Add ( const _variant_t & Template, long lcid ) {
    struct _Workbook * _result = 0;
    HRESULT _hr = raw_Add(Template, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

inline HRESULT Workbooks::Close ( long lcid ) {
    HRESULT _hr = raw_Close(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long Workbooks::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _WorkbookPtr Workbooks::GetItem ( const _variant_t & Index ) {
    struct _Workbook * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

inline IUnknownPtr Workbooks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _WorkbookPtr Workbooks::Open ( _bstr_t Filename, const _variant_t & UpdateLinks, const _variant_t & ReadOnly, const _variant_t & Format, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & IgnoreReadOnlyRecommended, const _variant_t & Origin, const _variant_t & Delimiter, const _variant_t & Editable, const _variant_t & Notify, const _variant_t & Converter, const _variant_t & AddToMru, long lcid ) {
    struct _Workbook * _result = 0;
    HRESULT _hr = raw_Open(Filename, UpdateLinks, ReadOnly, Format, Password, WriteResPassword, IgnoreReadOnlyRecommended, Origin, Delimiter, Editable, Notify, Converter, AddToMru, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

inline HRESULT Workbooks::_OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, long lcid ) {
    HRESULT _hr = raw__OpenText(Filename, Origin, StartRow, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _WorkbookPtr Workbooks::Get_Default ( const _variant_t & Index ) {
    struct _Workbook * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

inline HRESULT Workbooks::OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, long lcid ) {
    HRESULT _hr = raw_OpenText(Filename, Origin, StartRow, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout, DecimalSeparator, ThousandsSeparator, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Application wrapper method implementations
//

inline _ApplicationPtr _Application::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator _Application::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _ApplicationPtr _Application::GetParent ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline RangePtr _Application::GetActiveCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_ActiveCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _ChartPtr _Application::GetActiveChart ( ) {
    struct _Chart * _result = 0;
    HRESULT _hr = get_ActiveChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

inline DialogSheetPtr _Application::GetActiveDialog ( ) {
    struct DialogSheet * _result = 0;
    HRESULT _hr = get_ActiveDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogSheetPtr(_result, false);
}

inline MenuBarPtr _Application::GetActiveMenuBar ( ) {
    struct MenuBar * _result = 0;
    HRESULT _hr = get_ActiveMenuBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarPtr(_result, false);
}

inline _bstr_t _Application::GetActivePrinter ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutActivePrinter ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_ActivePrinter(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Application::GetActiveSheet ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ActiveSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline WindowPtr _Application::GetActiveWindow ( ) {
    struct Window * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

inline _WorkbookPtr _Application::GetActiveWorkbook ( ) {
    struct _Workbook * _result = 0;
    HRESULT _hr = get_ActiveWorkbook(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

inline AddInsPtr _Application::GetAddIns ( ) {
    struct AddIns * _result = 0;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

inline Office::AssistantPtr _Application::GetAssistant ( ) {
    struct Office::Assistant * _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

inline HRESULT _Application::Calculate ( long lcid ) {
    HRESULT _hr = raw_Calculate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline RangePtr _Application::GetCells ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline SheetsPtr _Application::GetCharts ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Charts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline RangePtr _Application::GetColumns ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline Office::_CommandBarsPtr _Application::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

inline long _Application::GetDDEAppReturnCode ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_DDEAppReturnCode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Application::DDEExecute ( long Channel, _bstr_t String, long lcid ) {
    HRESULT _hr = raw_DDEExecute(Channel, String, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _Application::DDEInitiate ( _bstr_t App, _bstr_t Topic, long lcid ) {
    long _result = 0;
    HRESULT _hr = raw_DDEInitiate(App, Topic, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Application::DDEPoke ( long Channel, const _variant_t & Item, const _variant_t & Data, long lcid ) {
    HRESULT _hr = raw_DDEPoke(Channel, Item, Data, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t _Application::DDERequest ( long Channel, _bstr_t Item, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_DDERequest(Channel, Item, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT _Application::DDETerminate ( long Channel, long lcid ) {
    HRESULT _hr = raw_DDETerminate(Channel, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SheetsPtr _Application::GetDialogSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_DialogSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline _variant_t _Application::Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _Application::_Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _Application::ExecuteExcel4Macro ( _bstr_t String, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ExecuteExcel4Macro(String, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr _Application::Intersect ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    struct Range * _result = 0;
    HRESULT _hr = raw_Intersect(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline MenuBarsPtr _Application::GetMenuBars ( ) {
    struct MenuBars * _result = 0;
    HRESULT _hr = get_MenuBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarsPtr(_result, false);
}

inline ModulesPtr _Application::GetModules ( ) {
    struct Modules * _result = 0;
    HRESULT _hr = get_Modules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ModulesPtr(_result, false);
}

inline NamesPtr _Application::GetNames ( ) {
    struct Names * _result = 0;
    HRESULT _hr = get_Names(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamesPtr(_result, false);
}

inline RangePtr _Application::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Range(Cell1, Cell2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline RangePtr _Application::GetRows ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t _Application::Run ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Run(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _Application::_Run2 ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Run2(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr _Application::GetSelection ( long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Selection(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Application::SendKeys ( const _variant_t & Keys, const _variant_t & Wait, long lcid ) {
    HRESULT _hr = raw_SendKeys(Keys, Wait, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SheetsPtr _Application::GetSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Sheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline MenuPtr _Application::GetShortcutMenus ( long Index ) {
    struct Menu * _result = 0;
    HRESULT _hr = get_ShortcutMenus(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuPtr(_result, false);
}

inline _WorkbookPtr _Application::GetThisWorkbook ( long lcid ) {
    struct _Workbook * _result = 0;
    HRESULT _hr = get_ThisWorkbook(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

inline ToolbarsPtr _Application::GetToolbars ( ) {
    struct Toolbars * _result = 0;
    HRESULT _hr = get_Toolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarsPtr(_result, false);
}

inline RangePtr _Application::Union ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    struct Range * _result = 0;
    HRESULT _hr = raw_Union(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline WindowsPtr _Application::GetWindows ( ) {
    struct Windows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowsPtr(_result, false);
}

inline WorkbooksPtr _Application::GetWorkbooks ( ) {
    struct Workbooks * _result = 0;
    HRESULT _hr = get_Workbooks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WorkbooksPtr(_result, false);
}

inline WorksheetFunctionPtr _Application::GetWorksheetFunction ( ) {
    struct WorksheetFunction * _result = 0;
    HRESULT _hr = get_WorksheetFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WorksheetFunctionPtr(_result, false);
}

inline SheetsPtr _Application::GetWorksheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Worksheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline SheetsPtr _Application::GetExcel4IntlMacroSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Excel4IntlMacroSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline SheetsPtr _Application::GetExcel4MacroSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Excel4MacroSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline HRESULT _Application::ActivateMicrosoftApp ( enum XlMSApplication Index, long lcid ) {
    HRESULT _hr = raw_ActivateMicrosoftApp(Index, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::AddChartAutoFormat ( const _variant_t & Chart, _bstr_t Name, const _variant_t & Description, long lcid ) {
    HRESULT _hr = raw_AddChartAutoFormat(Chart, Name, Description, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::AddCustomList ( const _variant_t & ListArray, const _variant_t & ByRow, long lcid ) {
    HRESULT _hr = raw_AddCustomList(ListArray, ByRow, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Application::GetAlertBeforeOverwriting ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlertBeforeOverwriting(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutAlertBeforeOverwriting ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AlertBeforeOverwriting(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetAltStartupPath ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltStartupPath(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutAltStartupPath ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_AltStartupPath(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetAskToUpdateLinks ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AskToUpdateLinks(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutAskToUpdateLinks ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AskToUpdateLinks(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetEnableAnimations ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAnimations(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutEnableAnimations ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableAnimations(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline AutoCorrectPtr _Application::GetAutoCorrect ( ) {
    struct AutoCorrect * _result = 0;
    HRESULT _hr = get_AutoCorrect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectPtr(_result, false);
}

inline long _Application::GetBuild ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Build(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Application::GetCalculateBeforeSave ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CalculateBeforeSave(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutCalculateBeforeSave ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CalculateBeforeSave(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlCalculation _Application::GetCalculation ( long lcid ) {
    enum XlCalculation _result;
    HRESULT _hr = get_Calculation(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutCalculation ( long lcid, enum XlCalculation RHS ) {
    HRESULT _hr = put_Calculation(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Application::GetCaller ( const _variant_t & Index, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Caller(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL _Application::GetCanPlaySounds ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanPlaySounds(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Application::GetCanRecordSounds ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanRecordSounds(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t _Application::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetCellDragAndDrop ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CellDragAndDrop(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutCellDragAndDrop ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CellDragAndDrop(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double _Application::CentimetersToPoints ( double Centimeters, long lcid ) {
    double _result = 0;
    HRESULT _hr = raw_CentimetersToPoints(Centimeters, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Application::CheckSpelling ( _bstr_t Word, const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CheckSpelling(Word, CustomDictionary, IgnoreUppercase, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t _Application::GetClipboardFormats ( const _variant_t & Index, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ClipboardFormats(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL _Application::GetDisplayClipboardWindow ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayClipboardWindow(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayClipboardWindow ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayClipboardWindow(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetColorButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColorButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutColorButtons ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ColorButtons(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlCommandUnderlines _Application::GetCommandUnderlines ( long lcid ) {
    enum XlCommandUnderlines _result;
    HRESULT _hr = get_CommandUnderlines(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutCommandUnderlines ( long lcid, enum XlCommandUnderlines RHS ) {
    HRESULT _hr = put_CommandUnderlines(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetConstrainNumeric ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConstrainNumeric(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutConstrainNumeric ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ConstrainNumeric(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Application::ConvertFormula ( const _variant_t & Formula, enum XlReferenceStyle FromReferenceStyle, const _variant_t & ToReferenceStyle, const _variant_t & ToAbsolute, const _variant_t & RelativeTo, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ConvertFormula(Formula, FromReferenceStyle, ToReferenceStyle, ToAbsolute, RelativeTo, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL _Application::GetCopyObjectsWithCells ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CopyObjectsWithCells(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutCopyObjectsWithCells ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CopyObjectsWithCells(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlMousePointer _Application::GetCursor ( long lcid ) {
    enum XlMousePointer _result;
    HRESULT _hr = get_Cursor(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutCursor ( long lcid, enum XlMousePointer RHS ) {
    HRESULT _hr = put_Cursor(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Application::GetCustomListCount ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_CustomListCount(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum XlCutCopyMode _Application::GetCutCopyMode ( long lcid ) {
    enum XlCutCopyMode _result;
    HRESULT _hr = get_CutCopyMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutCutCopyMode ( long lcid, enum XlCutCopyMode RHS ) {
    HRESULT _hr = put_CutCopyMode(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Application::GetDataEntryMode ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_DataEntryMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDataEntryMode ( long lcid, long RHS ) {
    HRESULT _hr = put_DataEntryMode(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Application::Dummy1 ( ) {
    HRESULT _hr = raw_Dummy1();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::Dummy2 ( ) {
    HRESULT _hr = raw_Dummy2();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::Dummy3 ( ) {
    HRESULT _hr = raw_Dummy3();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::Dummy4 ( ) {
    HRESULT _hr = raw_Dummy4();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::Dummy5 ( ) {
    HRESULT _hr = raw_Dummy5();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::Dummy6 ( ) {
    HRESULT _hr = raw_Dummy6();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::Dummy7 ( ) {
    HRESULT _hr = raw_Dummy7();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::Dummy8 ( ) {
    HRESULT _hr = raw_Dummy8();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::Dummy9 ( ) {
    HRESULT _hr = raw_Dummy9();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::Dummy10 ( ) {
    HRESULT _hr = raw_Dummy10();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::Dummy11 ( ) {
    HRESULT _hr = raw_Dummy11();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Application::Get_Default ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _Application::GetDefaultFilePath ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultFilePath(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutDefaultFilePath ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_DefaultFilePath(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Application::DeleteChartAutoFormat ( _bstr_t Name, long lcid ) {
    HRESULT _hr = raw_DeleteChartAutoFormat(Name, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::DeleteCustomList ( long ListNum, long lcid ) {
    HRESULT _hr = raw_DeleteCustomList(ListNum, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline DialogsPtr _Application::GetDialogs ( ) {
    struct Dialogs * _result = 0;
    HRESULT _hr = get_Dialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogsPtr(_result, false);
}

inline VARIANT_BOOL _Application::GetDisplayAlerts ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayAlerts(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayAlerts ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayAlerts(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetDisplayFormulaBar ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayFormulaBar(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayFormulaBar ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayFormulaBar(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetDisplayFullScreen ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayFullScreen(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayFullScreen ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayFullScreen(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetDisplayNoteIndicator ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayNoteIndicator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayNoteIndicator ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayNoteIndicator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlCommentDisplayMode _Application::GetDisplayCommentIndicator ( ) {
    enum XlCommentDisplayMode _result;
    HRESULT _hr = get_DisplayCommentIndicator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayCommentIndicator ( enum XlCommentDisplayMode RHS ) {
    HRESULT _hr = put_DisplayCommentIndicator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetDisplayExcel4Menus ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayExcel4Menus(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayExcel4Menus ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayExcel4Menus(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetDisplayRecentFiles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayRecentFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayRecentFiles ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRecentFiles(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetDisplayScrollBars ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayScrollBars(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayScrollBars ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayScrollBars(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetDisplayStatusBar ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayStatusBar(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayStatusBar ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayStatusBar(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Application::DoubleClick ( long lcid ) {
    HRESULT _hr = raw_DoubleClick(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Application::GetEditDirectlyInCell ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EditDirectlyInCell(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutEditDirectlyInCell ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EditDirectlyInCell(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetEnableAutoComplete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAutoComplete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutEnableAutoComplete ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableAutoComplete(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlEnableCancelKey _Application::GetEnableCancelKey ( long lcid ) {
    enum XlEnableCancelKey _result;
    HRESULT _hr = get_EnableCancelKey(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutEnableCancelKey ( long lcid, enum XlEnableCancelKey RHS ) {
    HRESULT _hr = put_EnableCancelKey(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetEnableSound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutEnableSound ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableSound(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetEnableTipWizard ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableTipWizard(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutEnableTipWizard ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableTipWizard(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Application::GetFileConverters ( const _variant_t & Index1, const _variant_t & Index2, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FileConverters(Index1, Index2, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline Office::FileSearchPtr _Application::GetFileSearch ( ) {
    struct Office::FileSearch * _result = 0;
    HRESULT _hr = get_FileSearch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::FileSearchPtr(_result, false);
}

inline Office::IFindPtr _Application::GetFileFind ( ) {
    struct Office::IFind * _result = 0;
    HRESULT _hr = get_FileFind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IFindPtr(_result, false);
}

inline HRESULT _Application::_FindFile ( long lcid ) {
    HRESULT _hr = raw__FindFile(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Application::GetFixedDecimal ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedDecimal(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutFixedDecimal ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_FixedDecimal(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Application::GetFixedDecimalPlaces ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_FixedDecimalPlaces(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutFixedDecimalPlaces ( long lcid, long RHS ) {
    HRESULT _hr = put_FixedDecimalPlaces(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Application::GetCustomListContents ( long ListNum, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCustomListContents(ListNum, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long _Application::GetCustomListNum ( const _variant_t & ListArray, long lcid ) {
    long _result = 0;
    HRESULT _hr = raw_GetCustomListNum(ListArray, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t _Application::GetOpenFilename ( const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & ButtonText, const _variant_t & MultiSelect, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetOpenFilename(FileFilter, FilterIndex, Title, ButtonText, MultiSelect, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _Application::GetSaveAsFilename ( const _variant_t & InitialFilename, const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & ButtonText, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetSaveAsFilename(InitialFilename, FileFilter, FilterIndex, Title, ButtonText, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT _Application::Goto ( const _variant_t & Reference, const _variant_t & Scroll, long lcid ) {
    HRESULT _hr = raw_Goto(Reference, Scroll, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double _Application::GetHeight ( long lcid ) {
    double _result = 0;
    HRESULT _hr = get_Height(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutHeight ( long lcid, double RHS ) {
    HRESULT _hr = put_Height(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Application::Help ( const _variant_t & HelpFile, const _variant_t & HelpContextID, long lcid ) {
    HRESULT _hr = raw_Help(HelpFile, HelpContextID, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Application::GetIgnoreRemoteRequests ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IgnoreRemoteRequests(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutIgnoreRemoteRequests ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IgnoreRemoteRequests(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double _Application::InchesToPoints ( double Inches, long lcid ) {
    double _result = 0;
    HRESULT _hr = raw_InchesToPoints(Inches, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t _Application::InputBox ( _bstr_t Prompt, const _variant_t & Title, const _variant_t & Default, const _variant_t & Left, const _variant_t & Top, const _variant_t & HelpFile, const _variant_t & HelpContextID, const _variant_t & Type, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_InputBox(Prompt, Title, Default, Left, Top, HelpFile, HelpContextID, Type, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL _Application::GetInteractive ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Interactive(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutInteractive ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Interactive(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Application::GetInternational ( const _variant_t & Index, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_International(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL _Application::GetIteration ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Iteration(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutIteration ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Iteration(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetLargeButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LargeButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutLargeButtons ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LargeButtons(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double _Application::GetLeft ( long lcid ) {
    double _result = 0;
    HRESULT _hr = get_Left(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutLeft ( long lcid, double RHS ) {
    HRESULT _hr = put_Left(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetLibraryPath ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_LibraryPath(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT _Application::MacroOptions ( const _variant_t & Macro, const _variant_t & Description, const _variant_t & HasMenu, const _variant_t & MenuText, const _variant_t & HasShortcutKey, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & StatusBar, const _variant_t & HelpContextID, const _variant_t & HelpFile, long lcid ) {
    HRESULT _hr = raw_MacroOptions(Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::MailLogoff ( long lcid ) {
    HRESULT _hr = raw_MailLogoff(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::MailLogon ( const _variant_t & Name, const _variant_t & Password, const _variant_t & DownloadNewMail, long lcid ) {
    HRESULT _hr = raw_MailLogon(Name, Password, DownloadNewMail, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t _Application::GetMailSession ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MailSession(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum XlMailSystem _Application::GetMailSystem ( long lcid ) {
    enum XlMailSystem _result;
    HRESULT _hr = get_MailSystem(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Application::GetMathCoprocessorAvailable ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MathCoprocessorAvailable(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double _Application::GetMaxChange ( long lcid ) {
    double _result = 0;
    HRESULT _hr = get_MaxChange(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutMaxChange ( long lcid, double RHS ) {
    HRESULT _hr = put_MaxChange(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Application::GetMaxIterations ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutMaxIterations ( long lcid, long RHS ) {
    HRESULT _hr = put_MaxIterations(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Application::GetMemoryFree ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_MemoryFree(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _Application::GetMemoryTotal ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_MemoryTotal(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _Application::GetMemoryUsed ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_MemoryUsed(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Application::GetMouseAvailable ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MouseAvailable(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Application::GetMoveAfterReturn ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoveAfterReturn(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutMoveAfterReturn ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MoveAfterReturn(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlDirection _Application::GetMoveAfterReturnDirection ( long lcid ) {
    enum XlDirection _result;
    HRESULT _hr = get_MoveAfterReturnDirection(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutMoveAfterReturnDirection ( long lcid, enum XlDirection RHS ) {
    HRESULT _hr = put_MoveAfterReturnDirection(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RecentFilesPtr _Application::GetRecentFiles ( ) {
    struct RecentFiles * _result = 0;
    HRESULT _hr = get_RecentFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecentFilesPtr(_result, false);
}

inline _bstr_t _Application::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _WorkbookPtr _Application::NextLetter ( long lcid ) {
    struct _Workbook * _result = 0;
    HRESULT _hr = raw_NextLetter(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

inline _bstr_t _Application::GetNetworkTemplatesPath ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetworkTemplatesPath(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline ODBCErrorsPtr _Application::GetODBCErrors ( ) {
    struct ODBCErrors * _result = 0;
    HRESULT _hr = get_ODBCErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ODBCErrorsPtr(_result, false);
}

inline long _Application::GetODBCTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_ODBCTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutODBCTimeout ( long RHS ) {
    HRESULT _hr = put_ODBCTimeout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetOnCalculate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnCalculate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutOnCalculate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnCalculate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetOnData ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnData(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutOnData ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnData(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetOnDoubleClick ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnDoubleClick(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutOnDoubleClick ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnDoubleClick(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetOnEntry ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnEntry(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutOnEntry ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnEntry(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Application::OnKey ( _bstr_t Key, const _variant_t & Procedure, long lcid ) {
    HRESULT _hr = raw_OnKey(Key, Procedure, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::OnRepeat ( _bstr_t Text, _bstr_t Procedure, long lcid ) {
    HRESULT _hr = raw_OnRepeat(Text, Procedure, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Application::GetOnSheetActivate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSheetActivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutOnSheetActivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetActivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetOnSheetDeactivate ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSheetDeactivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutOnSheetDeactivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetDeactivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Application::OnTime ( const _variant_t & EarliestTime, _bstr_t Procedure, const _variant_t & LatestTime, const _variant_t & Schedule, long lcid ) {
    HRESULT _hr = raw_OnTime(EarliestTime, Procedure, LatestTime, Schedule, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::OnUndo ( _bstr_t Text, _bstr_t Procedure, long lcid ) {
    HRESULT _hr = raw_OnUndo(Text, Procedure, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Application::GetOnWindow ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnWindow(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutOnWindow ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnWindow(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetOperatingSystem ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OperatingSystem(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _Application::GetOrganizationName ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_OrganizationName(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _Application::GetPath ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _Application::GetPathSeparator ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathSeparator(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t _Application::GetPreviousSelections ( const _variant_t & Index, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreviousSelections(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL _Application::GetPivotTableSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PivotTableSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutPivotTableSelection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PivotTableSelection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetPromptForSummaryInfo ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PromptForSummaryInfo(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutPromptForSummaryInfo ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PromptForSummaryInfo(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Application::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::RecordMacro ( const _variant_t & BasicCode, const _variant_t & XlmCode, long lcid ) {
    HRESULT _hr = raw_RecordMacro(BasicCode, XlmCode, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Application::GetRecordRelative ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RecordRelative(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum XlReferenceStyle _Application::GetReferenceStyle ( long lcid ) {
    enum XlReferenceStyle _result;
    HRESULT _hr = get_ReferenceStyle(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutReferenceStyle ( long lcid, enum XlReferenceStyle RHS ) {
    HRESULT _hr = put_ReferenceStyle(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Application::GetRegisteredFunctions ( const _variant_t & Index1, const _variant_t & Index2, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RegisteredFunctions(Index1, Index2, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL _Application::RegisterXLL ( _bstr_t Filename, long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RegisterXLL(Filename, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Application::Repeat ( long lcid ) {
    HRESULT _hr = raw_Repeat(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::ResetTipWizard ( long lcid ) {
    HRESULT _hr = raw_ResetTipWizard(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Application::GetRollZoom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RollZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutRollZoom ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RollZoom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Application::Save ( const _variant_t & Filename, long lcid ) {
    HRESULT _hr = raw_Save(Filename, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::SaveWorkspace ( const _variant_t & Filename, long lcid ) {
    HRESULT _hr = raw_SaveWorkspace(Filename, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Application::GetScreenUpdating ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScreenUpdating(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutScreenUpdating ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ScreenUpdating(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Application::SetDefaultChart ( const _variant_t & FormatName, const _variant_t & Gallery ) {
    HRESULT _hr = raw_SetDefaultChart(FormatName, Gallery);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _Application::GetSheetsInNewWorkbook ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_SheetsInNewWorkbook(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutSheetsInNewWorkbook ( long lcid, long RHS ) {
    HRESULT _hr = put_SheetsInNewWorkbook(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetShowChartTipNames ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowChartTipNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutShowChartTipNames ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowChartTipNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetShowChartTipValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowChartTipValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutShowChartTipValues ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowChartTipValues(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetStandardFont ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_StandardFont(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutStandardFont ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_StandardFont(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double _Application::GetStandardFontSize ( long lcid ) {
    double _result = 0;
    HRESULT _hr = get_StandardFontSize(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutStandardFontSize ( long lcid, double RHS ) {
    HRESULT _hr = put_StandardFontSize(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetStartupPath ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartupPath(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t _Application::GetStatusBar ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StatusBar(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void _Application::PutStatusBar ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_StatusBar(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetTemplatesPath ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplatesPath(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL _Application::GetShowToolTips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowToolTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutShowToolTips ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowToolTips(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double _Application::GetTop ( long lcid ) {
    double _result = 0;
    HRESULT _hr = get_Top(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutTop ( long lcid, double RHS ) {
    HRESULT _hr = put_Top(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum XlFileFormat _Application::GetDefaultSaveFormat ( ) {
    enum XlFileFormat _result;
    HRESULT _hr = get_DefaultSaveFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDefaultSaveFormat ( enum XlFileFormat RHS ) {
    HRESULT _hr = put_DefaultSaveFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetTransitionMenuKey ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_TransitionMenuKey(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutTransitionMenuKey ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_TransitionMenuKey(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Application::GetTransitionMenuKeyAction ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_TransitionMenuKeyAction(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutTransitionMenuKeyAction ( long lcid, long RHS ) {
    HRESULT _hr = put_TransitionMenuKeyAction(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetTransitionNavigKeys ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TransitionNavigKeys(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutTransitionNavigKeys ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TransitionNavigKeys(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Application::Undo ( long lcid ) {
    HRESULT _hr = raw_Undo(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double _Application::GetUsableHeight ( long lcid ) {
    double _result = 0;
    HRESULT _hr = get_UsableHeight(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double _Application::GetUsableWidth ( long lcid ) {
    double _result = 0;
    HRESULT _hr = get_UsableWidth(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Application::GetUserControl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutUserControl ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UserControl(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetUserName ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserName(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Application::PutUserName ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_UserName(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Application::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VBIDE::VBEPtr _Application::GetVBE ( ) {
    struct VBIDE::VBE * _result = 0;
    HRESULT _hr = get_VBE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBIDE::VBEPtr(_result, false);
}

inline _bstr_t _Application::GetVersion ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL _Application::GetVisible ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutVisible ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Application::Volatile ( const _variant_t & Volatile, long lcid ) {
    HRESULT _hr = raw_Volatile(Volatile, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::_Wait ( const _variant_t & Time, long lcid ) {
    HRESULT _hr = raw__Wait(Time, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double _Application::GetWidth ( long lcid ) {
    double _result = 0;
    HRESULT _hr = get_Width(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutWidth ( long lcid, double RHS ) {
    HRESULT _hr = put_Width(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetWindowsForPens ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WindowsForPens(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum XlWindowState _Application::GetWindowState ( long lcid ) {
    enum XlWindowState _result;
    HRESULT _hr = get_WindowState(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutWindowState ( long lcid, enum XlWindowState RHS ) {
    HRESULT _hr = put_WindowState(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Application::GetUILanguage ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_UILanguage(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutUILanguage ( long lcid, long RHS ) {
    HRESULT _hr = put_UILanguage(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Application::GetDefaultSheetDirection ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_DefaultSheetDirection(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDefaultSheetDirection ( long lcid, long RHS ) {
    HRESULT _hr = put_DefaultSheetDirection(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Application::GetCursorMovement ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_CursorMovement(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutCursorMovement ( long lcid, long RHS ) {
    HRESULT _hr = put_CursorMovement(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetControlCharacters ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlCharacters(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutControlCharacters ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ControlCharacters(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _Application::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__WSFunction(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL _Application::GetEnableEvents ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutEnableEvents ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableEvents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetDisplayInfoWindow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayInfoWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayInfoWindow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayInfoWindow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::Wait ( const _variant_t & Time, long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Wait(Time, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Application::GetExtendList ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtendList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutExtendList ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ExtendList(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline OLEDBErrorsPtr _Application::GetOLEDBErrors ( ) {
    struct OLEDBErrors * _result = 0;
    HRESULT _hr = get_OLEDBErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEDBErrorsPtr(_result, false);
}

inline _bstr_t _Application::GetPhonetic ( const _variant_t & Text ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPhonetic(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline Office::COMAddInsPtr _Application::GetCOMAddIns ( ) {
    struct Office::COMAddIns * _result = 0;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::COMAddInsPtr(_result, false);
}

inline DefaultWebOptionsPtr _Application::GetDefaultWebOptions ( ) {
    struct DefaultWebOptions * _result = 0;
    HRESULT _hr = get_DefaultWebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DefaultWebOptionsPtr(_result, false);
}

inline _bstr_t _Application::GetProductCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProductCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _Application::GetUserLibraryPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserLibraryPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL _Application::GetAutoPercentEntry ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoPercentEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutAutoPercentEntry ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoPercentEntry(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::LanguageSettingsPtr _Application::GetLanguageSettings ( ) {
    struct Office::LanguageSettings * _result = 0;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::LanguageSettingsPtr(_result, false);
}

inline VARIANT_BOOL _Application::GetDummy101 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dummy101(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Application::Dummy12 ( ) {
    HRESULT _hr = raw_Dummy12();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Office::AnswerWizardPtr _Application::GetAnswerWizard ( ) {
    struct Office::AnswerWizard * _result = 0;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AnswerWizardPtr(_result, false);
}

inline HRESULT _Application::CalculateFull ( ) {
    HRESULT _hr = raw_CalculateFull();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Application::FindFile ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_FindFile(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _Application::GetCalculationVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_CalculationVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Application::GetShowWindowsInTaskbar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowWindowsInTaskbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutShowWindowsInTaskbar ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowWindowsInTaskbar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoFeatureInstall _Application::GetFeatureInstall ( ) {
    enum Office::MsoFeatureInstall _result;
    HRESULT _hr = get_FeatureInstall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutFeatureInstall ( enum Office::MsoFeatureInstall RHS ) {
    HRESULT _hr = put_FeatureInstall(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Global wrapper method implementations
//

inline _ApplicationPtr _Global::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator _Global::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _ApplicationPtr _Global::GetParent ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline RangePtr _Global::GetActiveCell ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_ActiveCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _ChartPtr _Global::GetActiveChart ( ) {
    struct _Chart * _result = 0;
    HRESULT _hr = get_ActiveChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

inline DialogSheetPtr _Global::GetActiveDialog ( ) {
    struct DialogSheet * _result = 0;
    HRESULT _hr = get_ActiveDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogSheetPtr(_result, false);
}

inline MenuBarPtr _Global::GetActiveMenuBar ( ) {
    struct MenuBar * _result = 0;
    HRESULT _hr = get_ActiveMenuBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarPtr(_result, false);
}

inline _bstr_t _Global::GetActivePrinter ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Global::PutActivePrinter ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_ActivePrinter(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr _Global::GetActiveSheet ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ActiveSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline WindowPtr _Global::GetActiveWindow ( ) {
    struct Window * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

inline _WorkbookPtr _Global::GetActiveWorkbook ( ) {
    struct _Workbook * _result = 0;
    HRESULT _hr = get_ActiveWorkbook(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

inline AddInsPtr _Global::GetAddIns ( ) {
    struct AddIns * _result = 0;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

inline Office::AssistantPtr _Global::GetAssistant ( ) {
    struct Office::Assistant * _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

inline HRESULT _Global::Calculate ( long lcid ) {
    HRESULT _hr = raw_Calculate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline RangePtr _Global::GetCells ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline SheetsPtr _Global::GetCharts ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Charts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline RangePtr _Global::GetColumns ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline Office::_CommandBarsPtr _Global::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

inline long _Global::GetDDEAppReturnCode ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_DDEAppReturnCode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Global::DDEExecute ( long Channel, _bstr_t String, long lcid ) {
    HRESULT _hr = raw_DDEExecute(Channel, String, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _Global::DDEInitiate ( _bstr_t App, _bstr_t Topic, long lcid ) {
    long _result = 0;
    HRESULT _hr = raw_DDEInitiate(App, Topic, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Global::DDEPoke ( long Channel, const _variant_t & Item, const _variant_t & Data, long lcid ) {
    HRESULT _hr = raw_DDEPoke(Channel, Item, Data, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t _Global::DDERequest ( long Channel, _bstr_t Item, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_DDERequest(Channel, Item, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT _Global::DDETerminate ( long Channel, long lcid ) {
    HRESULT _hr = raw_DDETerminate(Channel, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SheetsPtr _Global::GetDialogSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_DialogSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline _variant_t _Global::Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _Global::_Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _Global::ExecuteExcel4Macro ( _bstr_t String, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ExecuteExcel4Macro(String, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline RangePtr _Global::Intersect ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    struct Range * _result = 0;
    HRESULT _hr = raw_Intersect(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline MenuBarsPtr _Global::GetMenuBars ( ) {
    struct MenuBars * _result = 0;
    HRESULT _hr = get_MenuBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarsPtr(_result, false);
}

inline ModulesPtr _Global::GetModules ( ) {
    struct Modules * _result = 0;
    HRESULT _hr = get_Modules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ModulesPtr(_result, false);
}

inline NamesPtr _Global::GetNames ( ) {
    struct Names * _result = 0;
    HRESULT _hr = get_Names(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamesPtr(_result, false);
}

inline RangePtr _Global::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Range(Cell1, Cell2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline RangePtr _Global::GetRows ( ) {
    struct Range * _result = 0;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline _variant_t _Global::Run ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Run(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _Global::_Run2 ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Run2(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr _Global::GetSelection ( long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Selection(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _Global::SendKeys ( const _variant_t & Keys, const _variant_t & Wait, long lcid ) {
    HRESULT _hr = raw_SendKeys(Keys, Wait, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SheetsPtr _Global::GetSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Sheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline MenuPtr _Global::GetShortcutMenus ( long Index ) {
    struct Menu * _result = 0;
    HRESULT _hr = get_ShortcutMenus(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuPtr(_result, false);
}

inline _WorkbookPtr _Global::GetThisWorkbook ( long lcid ) {
    struct _Workbook * _result = 0;
    HRESULT _hr = get_ThisWorkbook(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

inline ToolbarsPtr _Global::GetToolbars ( ) {
    struct Toolbars * _result = 0;
    HRESULT _hr = get_Toolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarsPtr(_result, false);
}

inline RangePtr _Global::Union ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    struct Range * _result = 0;
    HRESULT _hr = raw_Union(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

inline WindowsPtr _Global::GetWindows ( ) {
    struct Windows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowsPtr(_result, false);
}

inline WorkbooksPtr _Global::GetWorkbooks ( ) {
    struct Workbooks * _result = 0;
    HRESULT _hr = get_Workbooks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WorkbooksPtr(_result, false);
}

inline WorksheetFunctionPtr _Global::GetWorksheetFunction ( ) {
    struct WorksheetFunction * _result = 0;
    HRESULT _hr = get_WorksheetFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WorksheetFunctionPtr(_result, false);
}

inline SheetsPtr _Global::GetWorksheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Worksheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline SheetsPtr _Global::GetExcel4IntlMacroSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Excel4IntlMacroSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

inline SheetsPtr _Global::GetExcel4MacroSheets ( ) {
    struct Sheets * _result = 0;
    HRESULT _hr = get_Excel4MacroSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

//
// interface IOLEObjects wrapper method implementations
//

inline _ApplicationPtr IOLEObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline enum XlCreator IOLEObjects::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IOLEObjects::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IOLEObjects::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOLEObjects::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOLEObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOLEObjects::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOLEObjects::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IDispatchPtr IOLEObjects::Duplicate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IOLEObjects::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOLEObjects::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOLEObjects::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOLEObjects::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOLEObjects::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOLEObjects::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOLEObjects::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOLEObjects::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOLEObjects::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOLEObjects::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOLEObjects::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IOLEObjects::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOLEObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOLEObjects::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IOLEObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IOLEObjects::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double IOLEObjects::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOLEObjects::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOLEObjects::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOLEObjects::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IOLEObjects::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOLEObjects::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IOLEObjects::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapeRangePtr IOLEObjects::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline BorderPtr IOLEObjects::GetBorder ( ) {
    struct Border * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

inline InteriorPtr IOLEObjects::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

inline VARIANT_BOOL IOLEObjects::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOLEObjects::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOLEObjects::GetAutoLoad ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoLoad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IOLEObjects::PutAutoLoad ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoLoad(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOLEObjects::GetSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOLEObjects::PutSourceName ( _bstr_t RHS ) {
    HRESULT _hr = put_SourceName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _OLEObjectPtr IOLEObjects::Add ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height ) {
    struct _OLEObject * _result = 0;
    HRESULT _hr = raw_Add(ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OLEObjectPtr(_result, false);
}

inline long IOLEObjects::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline GroupObjectPtr IOLEObjects::Group ( ) {
    struct GroupObject * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

inline IDispatchPtr IOLEObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IOLEObjects::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}
